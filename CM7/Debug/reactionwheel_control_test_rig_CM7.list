
reactionwheel_control_test_rig_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006540  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080067e0  080067e0  000077e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006864  08006864  00008088  2**0
                  CONTENTS
  4 .ARM          00000008  08006864  08006864  00007864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800686c  0800686c  00008088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800686c  0800686c  0000786c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006870  08006870  00007870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  08006874  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  24000088  080068fc  00008088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000390  080068fc  00008390  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f7b  00000000  00000000  000080b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028bd  00000000  00000000  0001e031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  000208f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ddd  00000000  00000000  00021ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bc2b  00000000  00000000  0002289d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017042  00000000  00000000  0005e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00189ff3  00000000  00000000  0007550a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ff4fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c4  00000000  00000000  001ff540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00204804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080067c8 	.word	0x080067c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	080067c8 	.word	0x080067c8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b49      	ldr	r3, [pc, #292]	@ (800079c <SystemInit+0x12c>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a48      	ldr	r2, [pc, #288]	@ (800079c <SystemInit+0x12c>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b45      	ldr	r3, [pc, #276]	@ (800079c <SystemInit+0x12c>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a44      	ldr	r2, [pc, #272]	@ (800079c <SystemInit+0x12c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <SystemInit+0x130>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <SystemInit+0x130>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a3e      	ldr	r2, [pc, #248]	@ (80007a0 <SystemInit+0x130>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <SystemInit+0x134>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a3c      	ldr	r2, [pc, #240]	@ (80007a4 <SystemInit+0x134>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b3a      	ldr	r3, [pc, #232]	@ (80007a4 <SystemInit+0x134>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b39      	ldr	r3, [pc, #228]	@ (80007a4 <SystemInit+0x134>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4938      	ldr	r1, [pc, #224]	@ (80007a4 <SystemInit+0x134>)
 80006c4:	4b38      	ldr	r3, [pc, #224]	@ (80007a8 <SystemInit+0x138>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b35      	ldr	r3, [pc, #212]	@ (80007a0 <SystemInit+0x130>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <SystemInit+0x130>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a30      	ldr	r2, [pc, #192]	@ (80007a0 <SystemInit+0x130>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <SystemInit+0x134>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <SystemInit+0x134>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <SystemInit+0x134>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <SystemInit+0x134>)
 80006fa:	4a2c      	ldr	r2, [pc, #176]	@ (80007ac <SystemInit+0x13c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <SystemInit+0x134>)
 8000700:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <SystemInit+0x140>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <SystemInit+0x134>)
 8000706:	4a2b      	ldr	r2, [pc, #172]	@ (80007b4 <SystemInit+0x144>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <SystemInit+0x134>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <SystemInit+0x134>)
 8000712:	4a28      	ldr	r2, [pc, #160]	@ (80007b4 <SystemInit+0x144>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <SystemInit+0x134>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <SystemInit+0x134>)
 800071e:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <SystemInit+0x144>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <SystemInit+0x134>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1d      	ldr	r2, [pc, #116]	@ (80007a4 <SystemInit+0x134>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <SystemInit+0x134>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <SystemInit+0x148>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a1e      	ldr	r2, [pc, #120]	@ (80007b8 <SystemInit+0x148>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <SystemInit+0x14c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <SystemInit+0x150>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <SystemInit+0x154>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <SystemInit+0x134>)
 800075c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d113      	bne.n	8000790 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <SystemInit+0x134>)
 800076a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800076e:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <SystemInit+0x134>)
 8000770:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000774:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <SystemInit+0x158>)
 800077a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800077e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <SystemInit+0x134>)
 8000782:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000786:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <SystemInit+0x134>)
 8000788:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800078c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	52002000 	.word	0x52002000
 80007a4:	58024400 	.word	0x58024400
 80007a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007ac:	02020200 	.word	0x02020200
 80007b0:	01ff0000 	.word	0x01ff0000
 80007b4:	01010280 	.word	0x01010280
 80007b8:	580000c0 	.word	0x580000c0
 80007bc:	5c001000 	.word	0x5c001000
 80007c0:	ffff0000 	.word	0xffff0000
 80007c4:	51008108 	.word	0x51008108
 80007c8:	52004000 	.word	0x52004000

080007cc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007d6:	f023 0302 	bic.w	r3, r3, #2
 80007da:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007dc:	bf00      	nop
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f9      	beq.n	80007de <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	58024800 	.word	0x58024800

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000806:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000808:	bf00      	nop
 800080a:	4b51      	ldr	r3, [pc, #324]	@ (8000950 <main+0x154>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000812:	2b00      	cmp	r3, #0
 8000814:	d004      	beq.n	8000820 <main+0x24>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	dcf4      	bgt.n	800080a <main+0xe>
  if ( timeout < 0 )
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	da01      	bge.n	800082a <main+0x2e>
  {
  Error_Handler();
 8000826:	f000 fb7b 	bl	8000f20 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082a:	f000 ffa5 	bl	8001778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082e:	f000 f897 	bl	8000960 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000832:	4b47      	ldr	r3, [pc, #284]	@ (8000950 <main+0x154>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000838:	4a45      	ldr	r2, [pc, #276]	@ (8000950 <main+0x154>)
 800083a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800083e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000842:	4b43      	ldr	r3, [pc, #268]	@ (8000950 <main+0x154>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000850:	2000      	movs	r0, #0
 8000852:	f001 fb5f 	bl	8001f14 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000856:	2100      	movs	r1, #0
 8000858:	2000      	movs	r0, #0
 800085a:	f001 fb75 	bl	8001f48 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800085e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000862:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000864:	bf00      	nop
 8000866:	4b3a      	ldr	r3, [pc, #232]	@ (8000950 <main+0x154>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800086e:	2b00      	cmp	r3, #0
 8000870:	d104      	bne.n	800087c <main+0x80>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	1e5a      	subs	r2, r3, #1
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	dcf4      	bgt.n	8000866 <main+0x6a>
if ( timeout < 0 )
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	da01      	bge.n	8000886 <main+0x8a>
{
Error_Handler();
 8000882:	f000 fb4d 	bl	8000f20 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f000 fa6d 	bl	8000d64 <MX_GPIO_Init>
  MX_TIM2_Init();
 800088a:	f000 f8d3 	bl	8000a34 <MX_TIM2_Init>
  MX_TIM3_Init();
 800088e:	f000 f963 	bl	8000b58 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000892:	f000 f9ef 	bl	8000c74 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000896:	2000      	movs	r0, #0
 8000898:	f000 fd7e 	bl	8001398 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800089c:	2001      	movs	r0, #1
 800089e:	f000 fd7b 	bl	8001398 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008a2:	2002      	movs	r0, #2
 80008a4:	f000 fd78 	bl	8001398 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80008a8:	2101      	movs	r1, #1
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fe14 	bl	80014d8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008b0:	4b28      	ldr	r3, [pc, #160]	@ (8000954 <main+0x158>)
 80008b2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b6:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008b8:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <main+0x158>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008be:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <main+0x158>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80008c4:	4b23      	ldr	r3, [pc, #140]	@ (8000954 <main+0x158>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80008ca:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <main+0x158>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80008d0:	4920      	ldr	r1, [pc, #128]	@ (8000954 <main+0x158>)
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 fe72 	bl	80015bc <BSP_COM_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <main+0xe6>
  {
    Error_Handler();
 80008de:	f000 fb1f 	bl	8000f20 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80008e2:	481d      	ldr	r0, [pc, #116]	@ (8000958 <main+0x15c>)
 80008e4:	f005 f902 	bl	8005aec <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 fdcb 	bl	8001484 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f000 fdc8 	bl	8001484 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 80008f4:	2002      	movs	r0, #2
 80008f6:	f000 fdc5 	bl	8001484 <BSP_LED_On>
//      BSP_LED_Toggle(LED_RED);
//
//      /* ..... Perform your action ..... */
//    }

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2110      	movs	r1, #16
 80008fe:	4817      	ldr	r0, [pc, #92]	@ (800095c <main+0x160>)
 8000900:	f001 faee 	bl	8001ee0 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2120      	movs	r1, #32
 8000908:	4814      	ldr	r0, [pc, #80]	@ (800095c <main+0x160>)
 800090a:	f001 fae9 	bl	8001ee0 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);

	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	  //BSP_LED_On(LED_RED);

	  HAL_Delay(5000);
 800090e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000912:	f000 ffc3 	bl	800189c <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2110      	movs	r1, #16
 800091a:	4810      	ldr	r0, [pc, #64]	@ (800095c <main+0x160>)
 800091c:	f001 fae0 	bl	8001ee0 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2120      	movs	r1, #32
 8000924:	480d      	ldr	r0, [pc, #52]	@ (800095c <main+0x160>)
 8000926:	f001 fadb 	bl	8001ee0 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);

	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	  //BSP_LED_Off(LED_RED);

	  HAL_Delay(100);
 800092a:	2064      	movs	r0, #100	@ 0x64
 800092c:	f000 ffb6 	bl	800189c <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2110      	movs	r1, #16
 8000934:	4809      	ldr	r0, [pc, #36]	@ (800095c <main+0x160>)
 8000936:	f001 fad3 	bl	8001ee0 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2120      	movs	r1, #32
 800093e:	4807      	ldr	r0, [pc, #28]	@ (800095c <main+0x160>)
 8000940:	f001 face 	bl	8001ee0 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);

	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	  //BSP_LED_Off(LED_RED);

	  HAL_Delay(5000);
 8000944:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000948:	f000 ffa8 	bl	800189c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800094c:	bf00      	nop
 800094e:	e7d4      	b.n	80008fa <main+0xfe>
 8000950:	58024400 	.word	0x58024400
 8000954:	240000a4 	.word	0x240000a4
 8000958:	080067e0 	.word	0x080067e0
 800095c:	58020000 	.word	0x58020000

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	@ 0x70
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800096a:	224c      	movs	r2, #76	@ 0x4c
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f005 f911 	bl	8005b96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2220      	movs	r2, #32
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f005 f90b 	bl	8005b96 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000980:	2004      	movs	r0, #4
 8000982:	f001 faf5 	bl	8001f70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b28      	ldr	r3, [pc, #160]	@ (8000a2c <SystemClock_Config+0xcc>)
 800098c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800098e:	4a27      	ldr	r2, [pc, #156]	@ (8000a2c <SystemClock_Config+0xcc>)
 8000990:	f023 0301 	bic.w	r3, r3, #1
 8000994:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000996:	4b25      	ldr	r3, [pc, #148]	@ (8000a2c <SystemClock_Config+0xcc>)
 8000998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <SystemClock_Config+0xd0>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009a8:	4a21      	ldr	r2, [pc, #132]	@ (8000a30 <SystemClock_Config+0xd0>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <SystemClock_Config+0xd0>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009bc:	bf00      	nop
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <SystemClock_Config+0xd0>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009ca:	d1f8      	bne.n	80009be <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d4:	2340      	movs	r3, #64	@ 0x40
 80009d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d8:	2300      	movs	r3, #0
 80009da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fb1f 	bl	8002024 <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009ec:	f000 fa98 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f0:	233f      	movs	r3, #63	@ 0x3f
 80009f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	2101      	movs	r1, #1
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 ff5f 	bl	80028d8 <HAL_RCC_ClockConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a20:	f000 fa7e 	bl	8000f20 <Error_Handler>
  }
}
 8000a24:	bf00      	nop
 8000a26:	3770      	adds	r7, #112	@ 0x70
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	58000400 	.word	0x58000400
 8000a30:	58024800 	.word	0x58024800

08000a34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	@ 0x30
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a60:	4b3c      	ldr	r3, [pc, #240]	@ (8000b54 <MX_TIM2_Init+0x120>)
 8000a62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a68:	4b3a      	ldr	r3, [pc, #232]	@ (8000b54 <MX_TIM2_Init+0x120>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b39      	ldr	r3, [pc, #228]	@ (8000b54 <MX_TIM2_Init+0x120>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a74:	4b37      	ldr	r3, [pc, #220]	@ (8000b54 <MX_TIM2_Init+0x120>)
 8000a76:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b35      	ldr	r3, [pc, #212]	@ (8000b54 <MX_TIM2_Init+0x120>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b34      	ldr	r3, [pc, #208]	@ (8000b54 <MX_TIM2_Init+0x120>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a88:	4832      	ldr	r0, [pc, #200]	@ (8000b54 <MX_TIM2_Init+0x120>)
 8000a8a:	f002 fd6f 	bl	800356c <HAL_TIM_Base_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000a94:	f000 fa44 	bl	8000f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a9c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	482b      	ldr	r0, [pc, #172]	@ (8000b54 <MX_TIM2_Init+0x120>)
 8000aa6:	f003 f82b 	bl	8003b00 <HAL_TIM_ConfigClockSource>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ab0:	f000 fa36 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ab4:	4827      	ldr	r0, [pc, #156]	@ (8000b54 <MX_TIM2_Init+0x120>)
 8000ab6:	f002 fe11 	bl	80036dc <HAL_TIM_IC_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ac0:	f000 fa2e 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4820      	ldr	r0, [pc, #128]	@ (8000b54 <MX_TIM2_Init+0x120>)
 8000ad4:	f003 fe4a 	bl	800476c <HAL_TIMEx_MasterConfigSynchronization>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000ade:	f000 fa1f 	bl	8000f20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	2200      	movs	r2, #0
 8000af6:	4619      	mov	r1, r3
 8000af8:	4816      	ldr	r0, [pc, #88]	@ (8000b54 <MX_TIM2_Init+0x120>)
 8000afa:	f002 fe50 	bl	800379e <HAL_TIM_IC_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000b04:	f000 fa0c 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <MX_TIM2_Init+0x120>)
 8000b10:	f002 fe45 	bl	800379e <HAL_TIM_IC_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8000b1a:	f000 fa01 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2208      	movs	r2, #8
 8000b22:	4619      	mov	r1, r3
 8000b24:	480b      	ldr	r0, [pc, #44]	@ (8000b54 <MX_TIM2_Init+0x120>)
 8000b26:	f002 fe3a 	bl	800379e <HAL_TIM_IC_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8000b30:	f000 f9f6 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	220c      	movs	r2, #12
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	@ (8000b54 <MX_TIM2_Init+0x120>)
 8000b3c:	f002 fe2f 	bl	800379e <HAL_TIM_IC_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM2_Init+0x116>
  {
    Error_Handler();
 8000b46:	f000 f9eb 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3730      	adds	r7, #48	@ 0x30
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	240000b8 	.word	0x240000b8

08000b58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	@ 0x38
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]
 8000b86:	615a      	str	r2, [r3, #20]
 8000b88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b8a:	4b38      	ldr	r3, [pc, #224]	@ (8000c6c <MX_TIM3_Init+0x114>)
 8000b8c:	4a38      	ldr	r2, [pc, #224]	@ (8000c70 <MX_TIM3_Init+0x118>)
 8000b8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b90:	4b36      	ldr	r3, [pc, #216]	@ (8000c6c <MX_TIM3_Init+0x114>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b96:	4b35      	ldr	r3, [pc, #212]	@ (8000c6c <MX_TIM3_Init+0x114>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b9c:	4b33      	ldr	r3, [pc, #204]	@ (8000c6c <MX_TIM3_Init+0x114>)
 8000b9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ba2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba4:	4b31      	ldr	r3, [pc, #196]	@ (8000c6c <MX_TIM3_Init+0x114>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000baa:	4b30      	ldr	r3, [pc, #192]	@ (8000c6c <MX_TIM3_Init+0x114>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bb0:	482e      	ldr	r0, [pc, #184]	@ (8000c6c <MX_TIM3_Init+0x114>)
 8000bb2:	f002 fcdb 	bl	800356c <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000bbc:	f000 f9b0 	bl	8000f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4827      	ldr	r0, [pc, #156]	@ (8000c6c <MX_TIM3_Init+0x114>)
 8000bce:	f002 ff97 	bl	8003b00 <HAL_TIM_ConfigClockSource>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000bd8:	f000 f9a2 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bdc:	4823      	ldr	r0, [pc, #140]	@ (8000c6c <MX_TIM3_Init+0x114>)
 8000bde:	f002 fd1c 	bl	800361a <HAL_TIM_PWM_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000be8:	f000 f99a 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	481c      	ldr	r0, [pc, #112]	@ (8000c6c <MX_TIM3_Init+0x114>)
 8000bfc:	f003 fdb6 	bl	800476c <HAL_TIMEx_MasterConfigSynchronization>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c06:	f000 f98b 	bl	8000f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c0a:	2360      	movs	r3, #96	@ 0x60
 8000c0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4812      	ldr	r0, [pc, #72]	@ (8000c6c <MX_TIM3_Init+0x114>)
 8000c22:	f002 fe59 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c2c:	f000 f978 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	2208      	movs	r2, #8
 8000c34:	4619      	mov	r1, r3
 8000c36:	480d      	ldr	r0, [pc, #52]	@ (8000c6c <MX_TIM3_Init+0x114>)
 8000c38:	f002 fe4e 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000c42:	f000 f96d 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c46:	463b      	mov	r3, r7
 8000c48:	220c      	movs	r2, #12
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4807      	ldr	r0, [pc, #28]	@ (8000c6c <MX_TIM3_Init+0x114>)
 8000c4e:	f002 fe43 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000c58:	f000 f962 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c5c:	4803      	ldr	r0, [pc, #12]	@ (8000c6c <MX_TIM3_Init+0x114>)
 8000c5e:	f000 fa17 	bl	8001090 <HAL_TIM_MspPostInit>

}
 8000c62:	bf00      	nop
 8000c64:	3738      	adds	r7, #56	@ 0x38
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	24000104 	.word	0x24000104
 8000c70:	40000400 	.word	0x40000400

08000c74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08e      	sub	sp, #56	@ 0x38
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c94:	463b      	mov	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
 8000ca2:	615a      	str	r2, [r3, #20]
 8000ca4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d5c <MX_TIM4_Init+0xe8>)
 8000ca8:	4a2d      	ldr	r2, [pc, #180]	@ (8000d60 <MX_TIM4_Init+0xec>)
 8000caa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cac:	4b2b      	ldr	r3, [pc, #172]	@ (8000d5c <MX_TIM4_Init+0xe8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d5c <MX_TIM4_Init+0xe8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cb8:	4b28      	ldr	r3, [pc, #160]	@ (8000d5c <MX_TIM4_Init+0xe8>)
 8000cba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc0:	4b26      	ldr	r3, [pc, #152]	@ (8000d5c <MX_TIM4_Init+0xe8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc6:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <MX_TIM4_Init+0xe8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ccc:	4823      	ldr	r0, [pc, #140]	@ (8000d5c <MX_TIM4_Init+0xe8>)
 8000cce:	f002 fc4d 	bl	800356c <HAL_TIM_Base_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000cd8:	f000 f922 	bl	8000f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ce2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	481c      	ldr	r0, [pc, #112]	@ (8000d5c <MX_TIM4_Init+0xe8>)
 8000cea:	f002 ff09 	bl	8003b00 <HAL_TIM_ConfigClockSource>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000cf4:	f000 f914 	bl	8000f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cf8:	4818      	ldr	r0, [pc, #96]	@ (8000d5c <MX_TIM4_Init+0xe8>)
 8000cfa:	f002 fc8e 	bl	800361a <HAL_TIM_PWM_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d04:	f000 f90c 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4811      	ldr	r0, [pc, #68]	@ (8000d5c <MX_TIM4_Init+0xe8>)
 8000d18:	f003 fd28 	bl	800476c <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d22:	f000 f8fd 	bl	8000f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d26:	2360      	movs	r3, #96	@ 0x60
 8000d28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4807      	ldr	r0, [pc, #28]	@ (8000d5c <MX_TIM4_Init+0xe8>)
 8000d3e:	f002 fdcb 	bl	80038d8 <HAL_TIM_PWM_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000d48:	f000 f8ea 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d4c:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <MX_TIM4_Init+0xe8>)
 8000d4e:	f000 f99f 	bl	8001090 <HAL_TIM_MspPostInit>

}
 8000d52:	bf00      	nop
 8000d54:	3738      	adds	r7, #56	@ 0x38
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	24000150 	.word	0x24000150
 8000d60:	40000800 	.word	0x40000800

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d80:	4a58      	ldr	r2, [pc, #352]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d8a:	4b56      	ldr	r3, [pc, #344]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	4b52      	ldr	r3, [pc, #328]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9e:	4a51      	ldr	r2, [pc, #324]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da8:	4b4e      	ldr	r3, [pc, #312]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	4a49      	ldr	r2, [pc, #292]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc6:	4b47      	ldr	r3, [pc, #284]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd4:	4b43      	ldr	r3, [pc, #268]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	4a42      	ldr	r2, [pc, #264]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e02:	4b38      	ldr	r3, [pc, #224]	@ (8000ee4 <MX_GPIO_Init+0x180>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2130      	movs	r1, #48	@ 0x30
 8000e14:	4834      	ldr	r0, [pc, #208]	@ (8000ee8 <MX_GPIO_Init+0x184>)
 8000e16:	f001 f863 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e1a:	2332      	movs	r3, #50	@ 0x32
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2a:	230b      	movs	r3, #11
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	482d      	ldr	r0, [pc, #180]	@ (8000eec <MX_GPIO_Init+0x188>)
 8000e36:	f000 fea3 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e3a:	2386      	movs	r3, #134	@ 0x86
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e4a:	230b      	movs	r3, #11
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4824      	ldr	r0, [pc, #144]	@ (8000ee8 <MX_GPIO_Init+0x184>)
 8000e56:	f000 fe93 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e5a:	2330      	movs	r3, #48	@ 0x30
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	481d      	ldr	r0, [pc, #116]	@ (8000ee8 <MX_GPIO_Init+0x184>)
 8000e72:	f000 fe85 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e88:	230b      	movs	r3, #11
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4817      	ldr	r0, [pc, #92]	@ (8000ef0 <MX_GPIO_Init+0x18c>)
 8000e94:	f000 fe74 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e98:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000eaa:	230a      	movs	r3, #10
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480c      	ldr	r0, [pc, #48]	@ (8000ee8 <MX_GPIO_Init+0x184>)
 8000eb6:	f000 fe63 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000eba:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ecc:	230b      	movs	r3, #11
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4807      	ldr	r0, [pc, #28]	@ (8000ef4 <MX_GPIO_Init+0x190>)
 8000ed8:	f000 fe52 	bl	8001b80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	@ 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	58020000 	.word	0x58020000
 8000eec:	58020800 	.word	0x58020800
 8000ef0:	58020400 	.word	0x58020400
 8000ef4:	58021800 	.word	0x58021800

08000ef8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000f08:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <BSP_PB_Callback+0x24>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	240000b4 	.word	0x240000b4

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <Error_Handler+0x8>

08000f2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <HAL_MspInit+0x30>)
 8000f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f38:	4a08      	ldr	r2, [pc, #32]	@ (8000f5c <HAL_MspInit+0x30>)
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_MspInit+0x30>)
 8000f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	58024400 	.word	0x58024400

08000f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f80:	d14e      	bne.n	8001020 <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f82:	4b3e      	ldr	r3, [pc, #248]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 8000f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f88:	4a3c      	ldr	r2, [pc, #240]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f92:	4b3a      	ldr	r3, [pc, #232]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 8000f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b36      	ldr	r3, [pc, #216]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa6:	4a35      	ldr	r2, [pc, #212]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb0:	4b32      	ldr	r3, [pc, #200]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fce:	4b2b      	ldr	r3, [pc, #172]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000fdc:	2309      	movs	r3, #9
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fec:	2301      	movs	r3, #1
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4822      	ldr	r0, [pc, #136]	@ (8001080 <HAL_TIM_Base_MspInit+0x120>)
 8000ff8:	f000 fdc2 	bl	8001b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8000ffc:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800100e:	2301      	movs	r3, #1
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	481a      	ldr	r0, [pc, #104]	@ (8001084 <HAL_TIM_Base_MspInit+0x124>)
 800101a:	f000 fdb1 	bl	8001b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800101e:	e028      	b.n	8001072 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a18      	ldr	r2, [pc, #96]	@ (8001088 <HAL_TIM_Base_MspInit+0x128>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d10f      	bne.n	800104a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 800102c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001030:	4a12      	ldr	r2, [pc, #72]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 8001032:	f043 0302 	orr.w	r3, r3, #2
 8001036:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 800103c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	e013      	b.n	8001072 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <HAL_TIM_Base_MspInit+0x12c>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d10e      	bne.n	8001072 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001054:	4b09      	ldr	r3, [pc, #36]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 8001056:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800105a:	4a08      	ldr	r2, [pc, #32]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <HAL_TIM_Base_MspInit+0x11c>)
 8001066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	@ 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	58024400 	.word	0x58024400
 8001080:	58020000 	.word	0x58020000
 8001084:	58020400 	.word	0x58020400
 8001088:	40000400 	.word	0x40000400
 800108c:	40000800 	.word	0x40000800

08001090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	@ 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a35      	ldr	r2, [pc, #212]	@ (8001184 <HAL_TIM_MspPostInit+0xf4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d13f      	bne.n	8001132 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b35      	ldr	r3, [pc, #212]	@ (8001188 <HAL_TIM_MspPostInit+0xf8>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b8:	4a33      	ldr	r2, [pc, #204]	@ (8001188 <HAL_TIM_MspPostInit+0xf8>)
 80010ba:	f043 0302 	orr.w	r3, r3, #2
 80010be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c2:	4b31      	ldr	r3, [pc, #196]	@ (8001188 <HAL_TIM_MspPostInit+0xf8>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001188 <HAL_TIM_MspPostInit+0xf8>)
 80010d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001188 <HAL_TIM_MspPostInit+0xf8>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e0:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <HAL_TIM_MspPostInit+0xf8>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010ee:	2302      	movs	r3, #2
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010fe:	2302      	movs	r3, #2
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4820      	ldr	r0, [pc, #128]	@ (800118c <HAL_TIM_MspPostInit+0xfc>)
 800110a:	f000 fd39 	bl	8001b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800110e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001120:	2302      	movs	r3, #2
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	4819      	ldr	r0, [pc, #100]	@ (8001190 <HAL_TIM_MspPostInit+0x100>)
 800112c:	f000 fd28 	bl	8001b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001130:	e024      	b.n	800117c <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM4)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a17      	ldr	r2, [pc, #92]	@ (8001194 <HAL_TIM_MspPostInit+0x104>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d11f      	bne.n	800117c <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <HAL_TIM_MspPostInit+0xf8>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001142:	4a11      	ldr	r2, [pc, #68]	@ (8001188 <HAL_TIM_MspPostInit+0xf8>)
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <HAL_TIM_MspPostInit+0xf8>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800115a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800116c:	2302      	movs	r3, #2
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4808      	ldr	r0, [pc, #32]	@ (8001198 <HAL_TIM_MspPostInit+0x108>)
 8001178:	f000 fd02 	bl	8001b80 <HAL_GPIO_Init>
}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	@ 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40000400 	.word	0x40000400
 8001188:	58024400 	.word	0x58024400
 800118c:	58020400 	.word	0x58020400
 8001190:	58020800 	.word	0x58020800
 8001194:	40000800 	.word	0x40000800
 8001198:	58020c00 	.word	0x58020c00

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <NMI_Handler+0x4>

080011a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <HardFault_Handler+0x4>

080011ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <MemManage_Handler+0x4>

080011b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f2:	f000 fb33 	bl	800185c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	e00a      	b.n	8001222 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800120c:	f3af 8000 	nop.w
 8001210:	4601      	mov	r1, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	60ba      	str	r2, [r7, #8]
 8001218:	b2ca      	uxtb	r2, r1
 800121a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	3301      	adds	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	429a      	cmp	r2, r3
 8001228:	dbf0      	blt.n	800120c <_read+0x12>
  }

  return len;
 800122a:	687b      	ldr	r3, [r7, #4]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	e009      	b.n	800125a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	60ba      	str	r2, [r7, #8]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fa16 	bl	8001680 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3301      	adds	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	429a      	cmp	r2, r3
 8001260:	dbf1      	blt.n	8001246 <_write+0x12>
  }
  return len;
 8001262:	687b      	ldr	r3, [r7, #4]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_close>:

int _close(int file)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001294:	605a      	str	r2, [r3, #4]
  return 0;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <_isatty>:

int _isatty(int file)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b085      	sub	sp, #20
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	@ (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	@ (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f004 fc96 	bl	8005c34 <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	24080000 	.word	0x24080000
 8001334:	00000400 	.word	0x00000400
 8001338:	2400019c 	.word	0x2400019c
 800133c:	24000390 	.word	0x24000390

08001340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001340:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800137c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001344:	f7ff fa42 	bl	80007cc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001348:	f7ff f992 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480c      	ldr	r0, [pc, #48]	@ (8001380 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134e:	490d      	ldr	r1, [pc, #52]	@ (8001384 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001350:	4a0d      	ldr	r2, [pc, #52]	@ (8001388 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a0a      	ldr	r2, [pc, #40]	@ (800138c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001364:	4c0a      	ldr	r4, [pc, #40]	@ (8001390 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f004 fc65 	bl	8005c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001376:	f7ff fa41 	bl	80007fc <main>
  bx  lr
 800137a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800137c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001380:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001384:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8001388:	08006874 	.word	0x08006874
  ldr r2, =_sbss
 800138c:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001390:	24000390 	.word	0x24000390

08001394 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <ADC3_IRQHandler>
	...

08001398 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	@ 0x30
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d009      	beq.n	80013c0 <BSP_LED_Init+0x28>
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d006      	beq.n	80013c0 <BSP_LED_Init+0x28>
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d003      	beq.n	80013c0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013b8:	f06f 0301 	mvn.w	r3, #1
 80013bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013be:	e055      	b.n	800146c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10f      	bne.n	80013e6 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80013c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001478 <BSP_LED_Init+0xe0>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013cc:	4a2a      	ldr	r2, [pc, #168]	@ (8001478 <BSP_LED_Init+0xe0>)
 80013ce:	f043 0302 	orr.w	r3, r3, #2
 80013d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d6:	4b28      	ldr	r3, [pc, #160]	@ (8001478 <BSP_LED_Init+0xe0>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	e021      	b.n	800142a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d10f      	bne.n	800140c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <BSP_LED_Init+0xe0>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f2:	4a21      	ldr	r2, [pc, #132]	@ (8001478 <BSP_LED_Init+0xe0>)
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <BSP_LED_Init+0xe0>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	e00e      	b.n	800142a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <BSP_LED_Init+0xe0>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001412:	4a19      	ldr	r2, [pc, #100]	@ (8001478 <BSP_LED_Init+0xe0>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <BSP_LED_Init+0xe0>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4a13      	ldr	r2, [pc, #76]	@ (800147c <BSP_LED_Init+0xe4>)
 800142e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001432:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	4a0f      	ldr	r2, [pc, #60]	@ (8001480 <BSP_LED_Init+0xe8>)
 8001444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001448:	f107 0218 	add.w	r2, r7, #24
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fb96 	bl	8001b80 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4a0a      	ldr	r2, [pc, #40]	@ (8001480 <BSP_LED_Init+0xe8>)
 8001458:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	4a07      	ldr	r2, [pc, #28]	@ (800147c <BSP_LED_Init+0xe4>)
 8001460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001464:	2200      	movs	r2, #0
 8001466:	4619      	mov	r1, r3
 8001468:	f000 fd3a 	bl	8001ee0 <HAL_GPIO_WritePin>
  }

  return ret;
 800146c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800146e:	4618      	mov	r0, r3
 8001470:	3730      	adds	r7, #48	@ 0x30
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	58024400 	.word	0x58024400
 800147c:	0800680c 	.word	0x0800680c
 8001480:	2400000c 	.word	0x2400000c

08001484 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d009      	beq.n	80014ac <BSP_LED_On+0x28>
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d006      	beq.n	80014ac <BSP_LED_On+0x28>
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d003      	beq.n	80014ac <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014a4:	f06f 0301 	mvn.w	r3, #1
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	e00b      	b.n	80014c4 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	4a08      	ldr	r2, [pc, #32]	@ (80014d0 <BSP_LED_On+0x4c>)
 80014b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	4a07      	ldr	r2, [pc, #28]	@ (80014d4 <BSP_LED_On+0x50>)
 80014b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014bc:	2201      	movs	r2, #1
 80014be:	4619      	mov	r1, r3
 80014c0:	f000 fd0e 	bl	8001ee0 <HAL_GPIO_WritePin>
  }

  return ret;
 80014c4:	68fb      	ldr	r3, [r7, #12]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2400000c 	.word	0x2400000c
 80014d4:	0800680c 	.word	0x0800680c

080014d8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	460a      	mov	r2, r1
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	4613      	mov	r3, r2
 80014e6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80014e8:	4b2e      	ldr	r3, [pc, #184]	@ (80015a4 <BSP_PB_Init+0xcc>)
 80014ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ee:	4a2d      	ldr	r2, [pc, #180]	@ (80015a4 <BSP_PB_Init+0xcc>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f8:	4b2a      	ldr	r3, [pc, #168]	@ (80015a4 <BSP_PB_Init+0xcc>)
 80014fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001506:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800150a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800150c:	2302      	movs	r3, #2
 800150e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001510:	2302      	movs	r3, #2
 8001512:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10c      	bne.n	8001534 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	4a21      	ldr	r2, [pc, #132]	@ (80015a8 <BSP_PB_Init+0xd0>)
 8001522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001526:	f107 020c 	add.w	r2, r7, #12
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fb27 	bl	8001b80 <HAL_GPIO_Init>
 8001532:	e031      	b.n	8001598 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001534:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001538:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	4a1a      	ldr	r2, [pc, #104]	@ (80015a8 <BSP_PB_Init+0xd0>)
 800153e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001542:	f107 020c 	add.w	r2, r7, #12
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f000 fb19 	bl	8001b80 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <BSP_PB_Init+0xd4>)
 8001554:	441a      	add	r2, r3
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	4915      	ldr	r1, [pc, #84]	@ (80015b0 <BSP_PB_Init+0xd8>)
 800155a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800155e:	4619      	mov	r1, r3
 8001560:	4610      	mov	r0, r2
 8001562:	f000 faf9 	bl	8001b58 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4a10      	ldr	r2, [pc, #64]	@ (80015ac <BSP_PB_Init+0xd4>)
 800156c:	1898      	adds	r0, r3, r2
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4a10      	ldr	r2, [pc, #64]	@ (80015b4 <BSP_PB_Init+0xdc>)
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	461a      	mov	r2, r3
 8001578:	2100      	movs	r1, #0
 800157a:	f000 face 	bl	8001b1a <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800157e:	2028      	movs	r0, #40	@ 0x28
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	4a0d      	ldr	r2, [pc, #52]	@ (80015b8 <BSP_PB_Init+0xe0>)
 8001584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001588:	2200      	movs	r2, #0
 800158a:	4619      	mov	r1, r3
 800158c:	f000 fa91 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001590:	2328      	movs	r3, #40	@ 0x28
 8001592:	4618      	mov	r0, r3
 8001594:	f000 faa7 	bl	8001ae6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3720      	adds	r7, #32
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	58024400 	.word	0x58024400
 80015a8:	24000018 	.word	0x24000018
 80015ac:	240001a0 	.word	0x240001a0
 80015b0:	08006814 	.word	0x08006814
 80015b4:	2400001c 	.word	0x2400001c
 80015b8:	24000020 	.word	0x24000020

080015bc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015d2:	f06f 0301 	mvn.w	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	e018      	b.n	800160c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2294      	movs	r2, #148	@ 0x94
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001618 <BSP_COM_Init+0x5c>)
 80015e4:	4413      	add	r3, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f86e 	bl	80016c8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	2294      	movs	r2, #148	@ 0x94
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	4a08      	ldr	r2, [pc, #32]	@ (8001618 <BSP_COM_Init+0x5c>)
 80015f6:	4413      	add	r3, r2
 80015f8:	6839      	ldr	r1, [r7, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f80e 	bl	800161c <MX_USART3_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d002      	beq.n	800160c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001606:	f06f 0303 	mvn.w	r3, #3
 800160a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800160c:	68fb      	ldr	r3, [r7, #12]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	240001a8 	.word	0x240001a8

0800161c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <MX_USART3_Init+0x60>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	220c      	movs	r2, #12
 800163a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	895b      	ldrh	r3, [r3, #10]
 8001640:	461a      	mov	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	891b      	ldrh	r3, [r3, #8]
 8001652:	461a      	mov	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	899b      	ldrh	r3, [r3, #12]
 800165c:	461a      	mov	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001668:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f003 f90c 	bl	8004888 <HAL_UART_Init>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	24000008 	.word	0x24000008

08001680 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001688:	4b09      	ldr	r3, [pc, #36]	@ (80016b0 <__io_putchar+0x30>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	2394      	movs	r3, #148	@ 0x94
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	4a07      	ldr	r2, [pc, #28]	@ (80016b4 <__io_putchar+0x34>)
 8001696:	1898      	adds	r0, r3, r2
 8001698:	1d39      	adds	r1, r7, #4
 800169a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169e:	2201      	movs	r2, #1
 80016a0:	f003 f94c 	bl	800493c <HAL_UART_Transmit>
  return ch;
 80016a4:	687b      	ldr	r3, [r7, #4]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2400023c 	.word	0x2400023c
 80016b4:	240001a8 	.word	0x240001a8

080016b8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff fc1b 	bl	8000ef8 <BSP_PB_Callback>
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80016d0:	4b27      	ldr	r3, [pc, #156]	@ (8001770 <COM1_MspInit+0xa8>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d6:	4a26      	ldr	r2, [pc, #152]	@ (8001770 <COM1_MspInit+0xa8>)
 80016d8:	f043 0308 	orr.w	r3, r3, #8
 80016dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e0:	4b23      	ldr	r3, [pc, #140]	@ (8001770 <COM1_MspInit+0xa8>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80016ee:	4b20      	ldr	r3, [pc, #128]	@ (8001770 <COM1_MspInit+0xa8>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001770 <COM1_MspInit+0xa8>)
 80016f6:	f043 0308 	orr.w	r3, r3, #8
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001770 <COM1_MspInit+0xa8>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800170c:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <COM1_MspInit+0xa8>)
 800170e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001712:	4a17      	ldr	r2, [pc, #92]	@ (8001770 <COM1_MspInit+0xa8>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001718:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800171c:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <COM1_MspInit+0xa8>)
 800171e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800172a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800172e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001734:	2302      	movs	r3, #2
 8001736:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001738:	2301      	movs	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800173c:	2307      	movs	r3, #7
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	480b      	ldr	r0, [pc, #44]	@ (8001774 <COM1_MspInit+0xac>)
 8001748:	f000 fa1a 	bl	8001b80 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800174c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001750:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001756:	2307      	movs	r3, #7
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4804      	ldr	r0, [pc, #16]	@ (8001774 <COM1_MspInit+0xac>)
 8001762:	f000 fa0d 	bl	8001b80 <HAL_GPIO_Init>
}
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	@ 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	58024400 	.word	0x58024400
 8001774:	58020c00 	.word	0x58020c00

08001778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177e:	2003      	movs	r0, #3
 8001780:	f000 f98c 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001784:	f001 fa5e 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8001788:	4602      	mov	r2, r0
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_Init+0x68>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	f003 030f 	and.w	r3, r3, #15
 8001794:	4913      	ldr	r1, [pc, #76]	@ (80017e4 <HAL_Init+0x6c>)
 8001796:	5ccb      	ldrb	r3, [r1, r3]
 8001798:	f003 031f 	and.w	r3, r3, #31
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
 80017a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <HAL_Init+0x68>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	4a0e      	ldr	r2, [pc, #56]	@ (80017e4 <HAL_Init+0x6c>)
 80017ac:	5cd3      	ldrb	r3, [r2, r3]
 80017ae:	f003 031f 	and.w	r3, r3, #31
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	fa22 f303 	lsr.w	r3, r2, r3
 80017b8:	4a0b      	ldr	r2, [pc, #44]	@ (80017e8 <HAL_Init+0x70>)
 80017ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017bc:	4a0b      	ldr	r2, [pc, #44]	@ (80017ec <HAL_Init+0x74>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017c2:	2000      	movs	r0, #0
 80017c4:	f000 f814 	bl	80017f0 <HAL_InitTick>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e002      	b.n	80017d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017d2:	f7ff fbab 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	58024400 	.word	0x58024400
 80017e4:	080067fc 	.word	0x080067fc
 80017e8:	24000004 	.word	0x24000004
 80017ec:	24000000 	.word	0x24000000

080017f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017f8:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <HAL_InitTick+0x60>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e021      	b.n	8001848 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001804:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <HAL_InitTick+0x64>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <HAL_InitTick+0x60>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001812:	fbb3 f3f1 	udiv	r3, r3, r1
 8001816:	fbb2 f3f3 	udiv	r3, r2, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f971 	bl	8001b02 <HAL_SYSTICK_Config>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e00e      	b.n	8001848 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b0f      	cmp	r3, #15
 800182e:	d80a      	bhi.n	8001846 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001830:	2200      	movs	r2, #0
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f000 f93b 	bl	8001ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800183c:	4a06      	ldr	r2, [pc, #24]	@ (8001858 <HAL_InitTick+0x68>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	24000028 	.word	0x24000028
 8001854:	24000000 	.word	0x24000000
 8001858:	24000024 	.word	0x24000024

0800185c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <HAL_IncTick+0x20>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_IncTick+0x24>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4413      	add	r3, r2
 800186c:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <HAL_IncTick+0x24>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	24000028 	.word	0x24000028
 8001880:	24000240 	.word	0x24000240

08001884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return uwTick;
 8001888:	4b03      	ldr	r3, [pc, #12]	@ (8001898 <HAL_GetTick+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	24000240 	.word	0x24000240

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff ffee 	bl	8001884 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b6:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <HAL_Delay+0x44>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffde 	bl	8001884 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	24000028 	.word	0x24000028

080018e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018e8:	4b03      	ldr	r3, [pc, #12]	@ (80018f8 <HAL_GetREVID+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0c1b      	lsrs	r3, r3, #16
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	5c001000 	.word	0x5c001000

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <__NVIC_SetPriorityGrouping+0x40>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	4313      	orrs	r3, r2
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	@ (800193c <__NVIC_SetPriorityGrouping+0x40>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000ed00 	.word	0xe000ed00
 8001940:	05fa0000 	.word	0x05fa0000

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	@ (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	@ (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	@ (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	@ (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	@ 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	@ 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f7ff ff8e 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff29 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff40 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff90 	bl	80019f0 <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5f 	bl	800199c <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff33 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffa4 	bl	8001a58 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b087      	sub	sp, #28
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	460b      	mov	r3, r1
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00a      	b.n	8001b4c <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001b36:	7afb      	ldrb	r3, [r7, #11]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d103      	bne.n	8001b44 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	605a      	str	r2, [r3, #4]
      break;
 8001b42:	e002      	b.n	8001b4a <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	75fb      	strb	r3, [r7, #23]
      break;
 8001b48:	bf00      	nop
  }

  return status;
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e003      	b.n	8001b74 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001b72:	2300      	movs	r3, #0
  }
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	@ 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b8e:	4b89      	ldr	r3, [pc, #548]	@ (8001db4 <HAL_GPIO_Init+0x234>)
 8001b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b92:	e194      	b.n	8001ebe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2101      	movs	r1, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8186 	beq.w	8001eb8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d005      	beq.n	8001bc4 <HAL_GPIO_Init+0x44>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d130      	bne.n	8001c26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	f003 0201 	and.w	r2, r3, #1
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d017      	beq.n	8001c62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d123      	bne.n	8001cb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	08da      	lsrs	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3208      	adds	r2, #8
 8001c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	220f      	movs	r2, #15
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	08da      	lsrs	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3208      	adds	r2, #8
 8001cb0:	69b9      	ldr	r1, [r7, #24]
 8001cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0203 	and.w	r2, r3, #3
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80e0 	beq.w	8001eb8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8001db8 <HAL_GPIO_Init+0x238>)
 8001cfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cfe:	4a2e      	ldr	r2, [pc, #184]	@ (8001db8 <HAL_GPIO_Init+0x238>)
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d08:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <HAL_GPIO_Init+0x238>)
 8001d0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d16:	4a29      	ldr	r2, [pc, #164]	@ (8001dbc <HAL_GPIO_Init+0x23c>)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a20      	ldr	r2, [pc, #128]	@ (8001dc0 <HAL_GPIO_Init+0x240>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d052      	beq.n	8001de8 <HAL_GPIO_Init+0x268>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc4 <HAL_GPIO_Init+0x244>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d031      	beq.n	8001dae <HAL_GPIO_Init+0x22e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc8 <HAL_GPIO_Init+0x248>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d02b      	beq.n	8001daa <HAL_GPIO_Init+0x22a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a1d      	ldr	r2, [pc, #116]	@ (8001dcc <HAL_GPIO_Init+0x24c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d025      	beq.n	8001da6 <HAL_GPIO_Init+0x226>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd0 <HAL_GPIO_Init+0x250>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d01f      	beq.n	8001da2 <HAL_GPIO_Init+0x222>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd4 <HAL_GPIO_Init+0x254>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d019      	beq.n	8001d9e <HAL_GPIO_Init+0x21e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd8 <HAL_GPIO_Init+0x258>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_GPIO_Init+0x21a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a19      	ldr	r2, [pc, #100]	@ (8001ddc <HAL_GPIO_Init+0x25c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00d      	beq.n	8001d96 <HAL_GPIO_Init+0x216>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a18      	ldr	r2, [pc, #96]	@ (8001de0 <HAL_GPIO_Init+0x260>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d007      	beq.n	8001d92 <HAL_GPIO_Init+0x212>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a17      	ldr	r2, [pc, #92]	@ (8001de4 <HAL_GPIO_Init+0x264>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <HAL_GPIO_Init+0x20e>
 8001d8a:	2309      	movs	r3, #9
 8001d8c:	e02d      	b.n	8001dea <HAL_GPIO_Init+0x26a>
 8001d8e:	230a      	movs	r3, #10
 8001d90:	e02b      	b.n	8001dea <HAL_GPIO_Init+0x26a>
 8001d92:	2308      	movs	r3, #8
 8001d94:	e029      	b.n	8001dea <HAL_GPIO_Init+0x26a>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e027      	b.n	8001dea <HAL_GPIO_Init+0x26a>
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	e025      	b.n	8001dea <HAL_GPIO_Init+0x26a>
 8001d9e:	2305      	movs	r3, #5
 8001da0:	e023      	b.n	8001dea <HAL_GPIO_Init+0x26a>
 8001da2:	2304      	movs	r3, #4
 8001da4:	e021      	b.n	8001dea <HAL_GPIO_Init+0x26a>
 8001da6:	2303      	movs	r3, #3
 8001da8:	e01f      	b.n	8001dea <HAL_GPIO_Init+0x26a>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e01d      	b.n	8001dea <HAL_GPIO_Init+0x26a>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e01b      	b.n	8001dea <HAL_GPIO_Init+0x26a>
 8001db2:	bf00      	nop
 8001db4:	58000080 	.word	0x58000080
 8001db8:	58024400 	.word	0x58024400
 8001dbc:	58000400 	.word	0x58000400
 8001dc0:	58020000 	.word	0x58020000
 8001dc4:	58020400 	.word	0x58020400
 8001dc8:	58020800 	.word	0x58020800
 8001dcc:	58020c00 	.word	0x58020c00
 8001dd0:	58021000 	.word	0x58021000
 8001dd4:	58021400 	.word	0x58021400
 8001dd8:	58021800 	.word	0x58021800
 8001ddc:	58021c00 	.word	0x58021c00
 8001de0:	58022000 	.word	0x58022000
 8001de4:	58022400 	.word	0x58022400
 8001de8:	2300      	movs	r3, #0
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	f002 0203 	and.w	r2, r2, #3
 8001df0:	0092      	lsls	r2, r2, #2
 8001df2:	4093      	lsls	r3, r2
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dfa:	4938      	ldr	r1, [pc, #224]	@ (8001edc <HAL_GPIO_Init+0x35c>)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	3302      	adds	r3, #2
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f47f ae63 	bne.w	8001b94 <HAL_GPIO_Init+0x14>
  }
}
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
 8001ed2:	3724      	adds	r7, #36	@ 0x24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	58000400 	.word	0x58000400

08001ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
 8001eec:	4613      	mov	r3, r2
 8001eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef0:	787b      	ldrb	r3, [r7, #1]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001efc:	e003      	b.n	8001f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001efe:	887b      	ldrh	r3, [r7, #2]
 8001f00:	041a      	lsls	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	619a      	str	r2, [r3, #24]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001f1c:	4a08      	ldr	r2, [pc, #32]	@ (8001f40 <HAL_HSEM_FastTake+0x2c>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3320      	adds	r3, #32
 8001f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f26:	4a07      	ldr	r2, [pc, #28]	@ (8001f44 <HAL_HSEM_FastTake+0x30>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d101      	bne.n	8001f30 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	e000      	b.n	8001f32 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	58026400 	.word	0x58026400
 8001f44:	80000300 	.word	0x80000300

08001f48 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001f52:	4906      	ldr	r1, [pc, #24]	@ (8001f6c <HAL_HSEM_Release+0x24>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	58026400 	.word	0x58026400

08001f70 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001f78:	4b29      	ldr	r3, [pc, #164]	@ (8002020 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	2b06      	cmp	r3, #6
 8001f82:	d00a      	beq.n	8001f9a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f84:	4b26      	ldr	r3, [pc, #152]	@ (8002020 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d001      	beq.n	8001f96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e040      	b.n	8002018 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e03e      	b.n	8002018 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001f9a:	4b21      	ldr	r3, [pc, #132]	@ (8002020 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001fa2:	491f      	ldr	r1, [pc, #124]	@ (8002020 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001faa:	f7ff fc6b 	bl	8001884 <HAL_GetTick>
 8001fae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fb0:	e009      	b.n	8001fc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fb2:	f7ff fc67 	bl	8001884 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fc0:	d901      	bls.n	8001fc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e028      	b.n	8002018 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fc6:	4b16      	ldr	r3, [pc, #88]	@ (8002020 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fd2:	d1ee      	bne.n	8001fb2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b1e      	cmp	r3, #30
 8001fd8:	d008      	beq.n	8001fec <HAL_PWREx_ConfigSupply+0x7c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8001fde:	d005      	beq.n	8001fec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b1d      	cmp	r3, #29
 8001fe4:	d002      	beq.n	8001fec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b2d      	cmp	r3, #45	@ 0x2d
 8001fea:	d114      	bne.n	8002016 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001fec:	f7ff fc4a 	bl	8001884 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ff2:	e009      	b.n	8002008 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ff4:	f7ff fc46 	bl	8001884 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002002:	d901      	bls.n	8002008 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e007      	b.n	8002018 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <HAL_PWREx_ConfigSupply+0xb0>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002014:	d1ee      	bne.n	8001ff4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	58024800 	.word	0x58024800

08002024 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08c      	sub	sp, #48	@ 0x30
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	f000 bc48 	b.w	80028c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8088 	beq.w	8002156 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002046:	4b99      	ldr	r3, [pc, #612]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002050:	4b96      	ldr	r3, [pc, #600]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002054:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002058:	2b10      	cmp	r3, #16
 800205a:	d007      	beq.n	800206c <HAL_RCC_OscConfig+0x48>
 800205c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800205e:	2b18      	cmp	r3, #24
 8002060:	d111      	bne.n	8002086 <HAL_RCC_OscConfig+0x62>
 8002062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d10c      	bne.n	8002086 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	4b8f      	ldr	r3, [pc, #572]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d06d      	beq.n	8002154 <HAL_RCC_OscConfig+0x130>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d169      	bne.n	8002154 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	f000 bc21 	b.w	80028c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x7a>
 8002090:	4b86      	ldr	r3, [pc, #536]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a85      	ldr	r2, [pc, #532]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	e02e      	b.n	80020fc <HAL_RCC_OscConfig+0xd8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x9c>
 80020a6:	4b81      	ldr	r3, [pc, #516]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a80      	ldr	r2, [pc, #512]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b7e      	ldr	r3, [pc, #504]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a7d      	ldr	r2, [pc, #500]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e01d      	b.n	80020fc <HAL_RCC_OscConfig+0xd8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0xc0>
 80020ca:	4b78      	ldr	r3, [pc, #480]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a77      	ldr	r2, [pc, #476]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b75      	ldr	r3, [pc, #468]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a74      	ldr	r2, [pc, #464]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0xd8>
 80020e4:	4b71      	ldr	r3, [pc, #452]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a70      	ldr	r2, [pc, #448]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b6e      	ldr	r3, [pc, #440]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a6d      	ldr	r2, [pc, #436]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff fbbe 	bl	8001884 <HAL_GetTick>
 8002108:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800210c:	f7ff fbba 	bl	8001884 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	@ 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e3d4      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800211e:	4b63      	ldr	r3, [pc, #396]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0xe8>
 800212a:	e014      	b.n	8002156 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7ff fbaa 	bl	8001884 <HAL_GetTick>
 8002130:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff fba6 	bl	8001884 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	@ 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e3c0      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002146:	4b59      	ldr	r3, [pc, #356]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x110>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80ca 	beq.w	80022f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002164:	4b51      	ldr	r3, [pc, #324]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800216c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800216e:	4b4f      	ldr	r3, [pc, #316]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002172:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d007      	beq.n	800218a <HAL_RCC_OscConfig+0x166>
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	2b18      	cmp	r3, #24
 800217e:	d156      	bne.n	800222e <HAL_RCC_OscConfig+0x20a>
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d151      	bne.n	800222e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800218a:	4b48      	ldr	r3, [pc, #288]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <HAL_RCC_OscConfig+0x17e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e392      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021a2:	4b42      	ldr	r3, [pc, #264]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 0219 	bic.w	r2, r3, #25
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	493f      	ldr	r1, [pc, #252]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fb66 	bl	8001884 <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021bc:	f7ff fb62 	bl	8001884 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e37c      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021ce:	4b37      	ldr	r3, [pc, #220]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021da:	f7ff fb83 	bl	80018e4 <HAL_GetREVID>
 80021de:	4603      	mov	r3, r0
 80021e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d817      	bhi.n	8002218 <HAL_RCC_OscConfig+0x1f4>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b40      	cmp	r3, #64	@ 0x40
 80021ee:	d108      	bne.n	8002202 <HAL_RCC_OscConfig+0x1de>
 80021f0:	4b2e      	ldr	r3, [pc, #184]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80021f8:	4a2c      	ldr	r2, [pc, #176]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80021fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021fe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002200:	e07a      	b.n	80022f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002202:	4b2a      	ldr	r3, [pc, #168]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	031b      	lsls	r3, r3, #12
 8002210:	4926      	ldr	r1, [pc, #152]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002216:	e06f      	b.n	80022f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002218:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	061b      	lsls	r3, r3, #24
 8002226:	4921      	ldr	r1, [pc, #132]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800222c:	e064      	b.n	80022f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d047      	beq.n	80022c6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002236:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0219 	bic.w	r2, r3, #25
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	491a      	ldr	r1, [pc, #104]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7ff fb1c 	bl	8001884 <HAL_GetTick>
 800224c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002250:	f7ff fb18 	bl	8001884 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e332      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002262:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	f7ff fb39 	bl	80018e4 <HAL_GetREVID>
 8002272:	4603      	mov	r3, r0
 8002274:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002278:	4293      	cmp	r3, r2
 800227a:	d819      	bhi.n	80022b0 <HAL_RCC_OscConfig+0x28c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b40      	cmp	r3, #64	@ 0x40
 8002282:	d108      	bne.n	8002296 <HAL_RCC_OscConfig+0x272>
 8002284:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800228c:	4a07      	ldr	r2, [pc, #28]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 800228e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002292:	6053      	str	r3, [r2, #4]
 8002294:	e030      	b.n	80022f8 <HAL_RCC_OscConfig+0x2d4>
 8002296:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	031b      	lsls	r3, r3, #12
 80022a4:	4901      	ldr	r1, [pc, #4]	@ (80022ac <HAL_RCC_OscConfig+0x288>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
 80022aa:	e025      	b.n	80022f8 <HAL_RCC_OscConfig+0x2d4>
 80022ac:	58024400 	.word	0x58024400
 80022b0:	4b9a      	ldr	r3, [pc, #616]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	061b      	lsls	r3, r3, #24
 80022be:	4997      	ldr	r1, [pc, #604]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
 80022c4:	e018      	b.n	80022f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c6:	4b95      	ldr	r3, [pc, #596]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a94      	ldr	r2, [pc, #592]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d2:	f7ff fad7 	bl	8001884 <HAL_GetTick>
 80022d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022da:	f7ff fad3 	bl	8001884 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e2ed      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022ec:	4b8b      	ldr	r3, [pc, #556]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80a9 	beq.w	8002458 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002306:	4b85      	ldr	r3, [pc, #532]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800230e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002310:	4b82      	ldr	r3, [pc, #520]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002314:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2b08      	cmp	r3, #8
 800231a:	d007      	beq.n	800232c <HAL_RCC_OscConfig+0x308>
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b18      	cmp	r3, #24
 8002320:	d13a      	bne.n	8002398 <HAL_RCC_OscConfig+0x374>
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d135      	bne.n	8002398 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800232c:	4b7b      	ldr	r3, [pc, #492]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_OscConfig+0x320>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b80      	cmp	r3, #128	@ 0x80
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e2c1      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002344:	f7ff face 	bl	80018e4 <HAL_GetREVID>
 8002348:	4603      	mov	r3, r0
 800234a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800234e:	4293      	cmp	r3, r2
 8002350:	d817      	bhi.n	8002382 <HAL_RCC_OscConfig+0x35e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	2b20      	cmp	r3, #32
 8002358:	d108      	bne.n	800236c <HAL_RCC_OscConfig+0x348>
 800235a:	4b70      	ldr	r3, [pc, #448]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002362:	4a6e      	ldr	r2, [pc, #440]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002364:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002368:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800236a:	e075      	b.n	8002458 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800236c:	4b6b      	ldr	r3, [pc, #428]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	069b      	lsls	r3, r3, #26
 800237a:	4968      	ldr	r1, [pc, #416]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002380:	e06a      	b.n	8002458 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002382:	4b66      	ldr	r3, [pc, #408]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	061b      	lsls	r3, r3, #24
 8002390:	4962      	ldr	r1, [pc, #392]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002392:	4313      	orrs	r3, r2
 8002394:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002396:	e05f      	b.n	8002458 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d042      	beq.n	8002426 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80023a0:	4b5e      	ldr	r3, [pc, #376]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a5d      	ldr	r2, [pc, #372]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80023a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff fa6a 	bl	8001884 <HAL_GetTick>
 80023b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80023b4:	f7ff fa66 	bl	8001884 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e280      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023c6:	4b55      	ldr	r3, [pc, #340]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023d2:	f7ff fa87 	bl	80018e4 <HAL_GetREVID>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023dc:	4293      	cmp	r3, r2
 80023de:	d817      	bhi.n	8002410 <HAL_RCC_OscConfig+0x3ec>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d108      	bne.n	80023fa <HAL_RCC_OscConfig+0x3d6>
 80023e8:	4b4c      	ldr	r3, [pc, #304]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80023f0:	4a4a      	ldr	r2, [pc, #296]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80023f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80023f6:	6053      	str	r3, [r2, #4]
 80023f8:	e02e      	b.n	8002458 <HAL_RCC_OscConfig+0x434>
 80023fa:	4b48      	ldr	r3, [pc, #288]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	069b      	lsls	r3, r3, #26
 8002408:	4944      	ldr	r1, [pc, #272]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
 800240e:	e023      	b.n	8002458 <HAL_RCC_OscConfig+0x434>
 8002410:	4b42      	ldr	r3, [pc, #264]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	493f      	ldr	r1, [pc, #252]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002420:	4313      	orrs	r3, r2
 8002422:	60cb      	str	r3, [r1, #12]
 8002424:	e018      	b.n	8002458 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002426:	4b3d      	ldr	r3, [pc, #244]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a3c      	ldr	r2, [pc, #240]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800242c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7ff fa27 	bl	8001884 <HAL_GetTick>
 8002436:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800243a:	f7ff fa23 	bl	8001884 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e23d      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800244c:	4b33      	ldr	r3, [pc, #204]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d036      	beq.n	80024d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d019      	beq.n	80024a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246c:	4b2b      	ldr	r3, [pc, #172]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800246e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002470:	4a2a      	ldr	r2, [pc, #168]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002478:	f7ff fa04 	bl	8001884 <HAL_GetTick>
 800247c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002480:	f7ff fa00 	bl	8001884 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e21a      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002492:	4b22      	ldr	r3, [pc, #136]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 8002494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x45c>
 800249e:	e018      	b.n	80024d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a0:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80024a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a4:	4a1d      	ldr	r2, [pc, #116]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7ff f9ea 	bl	8001884 <HAL_GetTick>
 80024b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b4:	f7ff f9e6 	bl	8001884 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e200      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80024c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d039      	beq.n	8002552 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d01c      	beq.n	8002520 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024e6:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a0c      	ldr	r2, [pc, #48]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 80024ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024f2:	f7ff f9c7 	bl	8001884 <HAL_GetTick>
 80024f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024fa:	f7ff f9c3 	bl	8001884 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e1dd      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800250c:	4b03      	ldr	r3, [pc, #12]	@ (800251c <HAL_RCC_OscConfig+0x4f8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x4d6>
 8002518:	e01b      	b.n	8002552 <HAL_RCC_OscConfig+0x52e>
 800251a:	bf00      	nop
 800251c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002520:	4b9b      	ldr	r3, [pc, #620]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a9a      	ldr	r2, [pc, #616]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002526:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800252a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800252c:	f7ff f9aa 	bl	8001884 <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002534:	f7ff f9a6 	bl	8001884 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e1c0      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002546:	4b92      	ldr	r3, [pc, #584]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8081 	beq.w	8002662 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002560:	4b8c      	ldr	r3, [pc, #560]	@ (8002794 <HAL_RCC_OscConfig+0x770>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a8b      	ldr	r2, [pc, #556]	@ (8002794 <HAL_RCC_OscConfig+0x770>)
 8002566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800256a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800256c:	f7ff f98a 	bl	8001884 <HAL_GetTick>
 8002570:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002574:	f7ff f986 	bl	8001884 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	@ 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1a0      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002586:	4b83      	ldr	r3, [pc, #524]	@ (8002794 <HAL_RCC_OscConfig+0x770>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d106      	bne.n	80025a8 <HAL_RCC_OscConfig+0x584>
 800259a:	4b7d      	ldr	r3, [pc, #500]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259e:	4a7c      	ldr	r2, [pc, #496]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a6:	e02d      	b.n	8002604 <HAL_RCC_OscConfig+0x5e0>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10c      	bne.n	80025ca <HAL_RCC_OscConfig+0x5a6>
 80025b0:	4b77      	ldr	r3, [pc, #476]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b4:	4a76      	ldr	r2, [pc, #472]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80025bc:	4b74      	ldr	r3, [pc, #464]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c0:	4a73      	ldr	r2, [pc, #460]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025c2:	f023 0304 	bic.w	r3, r3, #4
 80025c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025c8:	e01c      	b.n	8002604 <HAL_RCC_OscConfig+0x5e0>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x5c8>
 80025d2:	4b6f      	ldr	r3, [pc, #444]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80025de:	4b6c      	ldr	r3, [pc, #432]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e2:	4a6b      	ldr	r2, [pc, #428]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0x5e0>
 80025ec:	4b68      	ldr	r3, [pc, #416]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f0:	4a67      	ldr	r2, [pc, #412]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f8:	4b65      	ldr	r3, [pc, #404]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fc:	4a64      	ldr	r2, [pc, #400]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80025fe:	f023 0304 	bic.w	r3, r3, #4
 8002602:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7ff f93a 	bl	8001884 <HAL_GetTick>
 8002610:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002612:	e00a      	b.n	800262a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002614:	f7ff f936 	bl	8001884 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e14e      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800262a:	4b59      	ldr	r3, [pc, #356]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0ee      	beq.n	8002614 <HAL_RCC_OscConfig+0x5f0>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7ff f924 	bl	8001884 <HAL_GetTick>
 800263c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7ff f920 	bl	8001884 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e138      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002656:	4b4e      	ldr	r3, [pc, #312]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ee      	bne.n	8002640 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 812d 	beq.w	80028c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800266c:	4b48      	ldr	r3, [pc, #288]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002674:	2b18      	cmp	r3, #24
 8002676:	f000 80bd 	beq.w	80027f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	2b02      	cmp	r3, #2
 8002680:	f040 809e 	bne.w	80027c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002684:	4b42      	ldr	r3, [pc, #264]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a41      	ldr	r2, [pc, #260]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800268a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800268e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7ff f8f8 	bl	8001884 <HAL_GetTick>
 8002694:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7ff f8f4 	bl	8001884 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e10e      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026aa:	4b39      	ldr	r3, [pc, #228]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b6:	4b36      	ldr	r3, [pc, #216]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80026b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026ba:	4b37      	ldr	r3, [pc, #220]	@ (8002798 <HAL_RCC_OscConfig+0x774>)
 80026bc:	4013      	ands	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	430a      	orrs	r2, r1
 80026ca:	4931      	ldr	r1, [pc, #196]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d4:	3b01      	subs	r3, #1
 80026d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026de:	3b01      	subs	r3, #1
 80026e0:	025b      	lsls	r3, r3, #9
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ea:	3b01      	subs	r3, #1
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f8:	3b01      	subs	r3, #1
 80026fa:	061b      	lsls	r3, r3, #24
 80026fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002700:	4923      	ldr	r1, [pc, #140]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002702:	4313      	orrs	r3, r2
 8002704:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002706:	4b22      	ldr	r3, [pc, #136]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800270a:	4a21      	ldr	r2, [pc, #132]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002712:	4b1f      	ldr	r3, [pc, #124]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002716:	4b21      	ldr	r3, [pc, #132]	@ (800279c <HAL_RCC_OscConfig+0x778>)
 8002718:	4013      	ands	r3, r2
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800271e:	00d2      	lsls	r2, r2, #3
 8002720:	491b      	ldr	r1, [pc, #108]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002722:	4313      	orrs	r3, r2
 8002724:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002726:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272a:	f023 020c 	bic.w	r2, r3, #12
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	4917      	ldr	r1, [pc, #92]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002734:	4313      	orrs	r3, r2
 8002736:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002738:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800273a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273c:	f023 0202 	bic.w	r2, r3, #2
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002744:	4912      	ldr	r1, [pc, #72]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002746:	4313      	orrs	r3, r2
 8002748:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800274a:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800274c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274e:	4a10      	ldr	r2, [pc, #64]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002754:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002756:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275a:	4a0d      	ldr	r2, [pc, #52]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800275c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002760:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002762:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002766:	4a0a      	ldr	r2, [pc, #40]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002768:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800276c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800276e:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002772:	4a07      	ldr	r2, [pc, #28]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277a:	4b05      	ldr	r3, [pc, #20]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <HAL_RCC_OscConfig+0x76c>)
 8002780:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7ff f87d 	bl	8001884 <HAL_GetTick>
 800278a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800278c:	e011      	b.n	80027b2 <HAL_RCC_OscConfig+0x78e>
 800278e:	bf00      	nop
 8002790:	58024400 	.word	0x58024400
 8002794:	58024800 	.word	0x58024800
 8002798:	fffffc0c 	.word	0xfffffc0c
 800279c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7ff f870 	bl	8001884 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e08a      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027b2:	4b47      	ldr	r3, [pc, #284]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x77c>
 80027be:	e082      	b.n	80028c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c0:	4b43      	ldr	r3, [pc, #268]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a42      	ldr	r2, [pc, #264]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80027c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7ff f85a 	bl	8001884 <HAL_GetTick>
 80027d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d4:	f7ff f856 	bl	8001884 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e070      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027e6:	4b3a      	ldr	r3, [pc, #232]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x7b0>
 80027f2:	e068      	b.n	80028c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80027f4:	4b36      	ldr	r3, [pc, #216]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80027f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027fa:	4b35      	ldr	r3, [pc, #212]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	2b01      	cmp	r3, #1
 8002806:	d031      	beq.n	800286c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	f003 0203 	and.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d12a      	bne.n	800286c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d122      	bne.n	800286c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002830:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d11a      	bne.n	800286c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	0a5b      	lsrs	r3, r3, #9
 800283a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002842:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d111      	bne.n	800286c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	0c1b      	lsrs	r3, r3, #16
 800284c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002854:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002856:	429a      	cmp	r2, r3
 8002858:	d108      	bne.n	800286c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	0e1b      	lsrs	r3, r3, #24
 800285e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002866:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e02b      	b.n	80028c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002870:	4b17      	ldr	r3, [pc, #92]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 8002872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800287a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	429a      	cmp	r2, r3
 8002884:	d01f      	beq.n	80028c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	4a11      	ldr	r2, [pc, #68]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002892:	f7fe fff7 	bl	8001884 <HAL_GetTick>
 8002896:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002898:	bf00      	nop
 800289a:	f7fe fff3 	bl	8001884 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d0f9      	beq.n	800289a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028a6:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80028a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028aa:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <HAL_RCC_OscConfig+0x8b0>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028b2:	00d2      	lsls	r2, r2, #3
 80028b4:	4906      	ldr	r1, [pc, #24]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80028ba:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80028bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028be:	4a04      	ldr	r2, [pc, #16]	@ (80028d0 <HAL_RCC_OscConfig+0x8ac>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3730      	adds	r7, #48	@ 0x30
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	58024400 	.word	0x58024400
 80028d4:	ffff0007 	.word	0xffff0007

080028d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e19c      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b8a      	ldr	r3, [pc, #552]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d910      	bls.n	800291c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b87      	ldr	r3, [pc, #540]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 020f 	bic.w	r2, r3, #15
 8002902:	4985      	ldr	r1, [pc, #532]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b83      	ldr	r3, [pc, #524]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e184      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d010      	beq.n	800294a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	4b7b      	ldr	r3, [pc, #492]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002934:	429a      	cmp	r2, r3
 8002936:	d908      	bls.n	800294a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002938:	4b78      	ldr	r3, [pc, #480]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	4975      	ldr	r1, [pc, #468]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002946:	4313      	orrs	r3, r2
 8002948:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d010      	beq.n	8002978 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	4b70      	ldr	r3, [pc, #448]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002962:	429a      	cmp	r2, r3
 8002964:	d908      	bls.n	8002978 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002966:	4b6d      	ldr	r3, [pc, #436]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	496a      	ldr	r1, [pc, #424]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002974:	4313      	orrs	r3, r2
 8002976:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d010      	beq.n	80029a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699a      	ldr	r2, [r3, #24]
 8002988:	4b64      	ldr	r3, [pc, #400]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002990:	429a      	cmp	r2, r3
 8002992:	d908      	bls.n	80029a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002994:	4b61      	ldr	r3, [pc, #388]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	495e      	ldr	r1, [pc, #376]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0320 	and.w	r3, r3, #32
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d010      	beq.n	80029d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	4b59      	ldr	r3, [pc, #356]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029be:	429a      	cmp	r2, r3
 80029c0:	d908      	bls.n	80029d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029c2:	4b56      	ldr	r3, [pc, #344]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	4953      	ldr	r1, [pc, #332]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d010      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	4b4d      	ldr	r3, [pc, #308]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d908      	bls.n	8002a02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f0:	4b4a      	ldr	r3, [pc, #296]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	f023 020f 	bic.w	r2, r3, #15
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4947      	ldr	r1, [pc, #284]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d055      	beq.n	8002aba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a0e:	4b43      	ldr	r3, [pc, #268]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	4940      	ldr	r1, [pc, #256]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a28:	4b3c      	ldr	r3, [pc, #240]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d121      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0f6      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a40:	4b36      	ldr	r3, [pc, #216]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d115      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0ea      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a58:	4b30      	ldr	r3, [pc, #192]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0de      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a68:	4b2c      	ldr	r3, [pc, #176]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0d6      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a78:	4b28      	ldr	r3, [pc, #160]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f023 0207 	bic.w	r2, r3, #7
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4925      	ldr	r1, [pc, #148]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a8a:	f7fe fefb 	bl	8001884 <HAL_GetTick>
 8002a8e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a92:	f7fe fef7 	bl	8001884 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e0be      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d1eb      	bne.n	8002a92 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d010      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	4b14      	ldr	r3, [pc, #80]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d208      	bcs.n	8002ae8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad6:	4b11      	ldr	r3, [pc, #68]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f023 020f 	bic.w	r2, r3, #15
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	490e      	ldr	r1, [pc, #56]	@ (8002b1c <HAL_RCC_ClockConfig+0x244>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d214      	bcs.n	8002b20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b08      	ldr	r3, [pc, #32]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 020f 	bic.w	r2, r3, #15
 8002afe:	4906      	ldr	r1, [pc, #24]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <HAL_RCC_ClockConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e086      	b.n	8002c26 <HAL_RCC_ClockConfig+0x34e>
 8002b18:	52002000 	.word	0x52002000
 8002b1c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d010      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	4b3f      	ldr	r3, [pc, #252]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d208      	bcs.n	8002b4e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b3c:	4b3c      	ldr	r3, [pc, #240]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	4939      	ldr	r1, [pc, #228]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d010      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	4b34      	ldr	r3, [pc, #208]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d208      	bcs.n	8002b7c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b6a:	4b31      	ldr	r3, [pc, #196]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	492e      	ldr	r1, [pc, #184]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d010      	beq.n	8002baa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	4b28      	ldr	r3, [pc, #160]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d208      	bcs.n	8002baa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b98:	4b25      	ldr	r3, [pc, #148]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	4922      	ldr	r1, [pc, #136]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d010      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69da      	ldr	r2, [r3, #28]
 8002bba:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d208      	bcs.n	8002bd8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	4917      	ldr	r1, [pc, #92]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bd8:	f000 f834 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b14      	ldr	r3, [pc, #80]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	4912      	ldr	r1, [pc, #72]	@ (8002c34 <HAL_RCC_ClockConfig+0x35c>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c30 <HAL_RCC_ClockConfig+0x358>)
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8002c34 <HAL_RCC_ClockConfig+0x35c>)
 8002c00:	5cd3      	ldrb	r3, [r2, r3]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c38 <HAL_RCC_ClockConfig+0x360>)
 8002c0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c10:	4a0a      	ldr	r2, [pc, #40]	@ (8002c3c <HAL_RCC_ClockConfig+0x364>)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c16:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <HAL_RCC_ClockConfig+0x368>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe fde8 	bl	80017f0 <HAL_InitTick>
 8002c20:	4603      	mov	r3, r0
 8002c22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	58024400 	.word	0x58024400
 8002c34:	080067fc 	.word	0x080067fc
 8002c38:	24000004 	.word	0x24000004
 8002c3c:	24000000 	.word	0x24000000
 8002c40:	24000024 	.word	0x24000024

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	@ 0x24
 8002c48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c4a:	4bb3      	ldr	r3, [pc, #716]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c52:	2b18      	cmp	r3, #24
 8002c54:	f200 8155 	bhi.w	8002f02 <HAL_RCC_GetSysClockFreq+0x2be>
 8002c58:	a201      	add	r2, pc, #4	@ (adr r2, 8002c60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5e:	bf00      	nop
 8002c60:	08002cc5 	.word	0x08002cc5
 8002c64:	08002f03 	.word	0x08002f03
 8002c68:	08002f03 	.word	0x08002f03
 8002c6c:	08002f03 	.word	0x08002f03
 8002c70:	08002f03 	.word	0x08002f03
 8002c74:	08002f03 	.word	0x08002f03
 8002c78:	08002f03 	.word	0x08002f03
 8002c7c:	08002f03 	.word	0x08002f03
 8002c80:	08002ceb 	.word	0x08002ceb
 8002c84:	08002f03 	.word	0x08002f03
 8002c88:	08002f03 	.word	0x08002f03
 8002c8c:	08002f03 	.word	0x08002f03
 8002c90:	08002f03 	.word	0x08002f03
 8002c94:	08002f03 	.word	0x08002f03
 8002c98:	08002f03 	.word	0x08002f03
 8002c9c:	08002f03 	.word	0x08002f03
 8002ca0:	08002cf1 	.word	0x08002cf1
 8002ca4:	08002f03 	.word	0x08002f03
 8002ca8:	08002f03 	.word	0x08002f03
 8002cac:	08002f03 	.word	0x08002f03
 8002cb0:	08002f03 	.word	0x08002f03
 8002cb4:	08002f03 	.word	0x08002f03
 8002cb8:	08002f03 	.word	0x08002f03
 8002cbc:	08002f03 	.word	0x08002f03
 8002cc0:	08002cf7 	.word	0x08002cf7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cc4:	4b94      	ldr	r3, [pc, #592]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d009      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cd0:	4b91      	ldr	r3, [pc, #580]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	08db      	lsrs	r3, r3, #3
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	4a90      	ldr	r2, [pc, #576]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ce2:	e111      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ce4:	4b8d      	ldr	r3, [pc, #564]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ce6:	61bb      	str	r3, [r7, #24]
      break;
 8002ce8:	e10e      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002cea:	4b8d      	ldr	r3, [pc, #564]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002cec:	61bb      	str	r3, [r7, #24]
      break;
 8002cee:	e10b      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002cf0:	4b8c      	ldr	r3, [pc, #560]	@ (8002f24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002cf2:	61bb      	str	r3, [r7, #24]
      break;
 8002cf4:	e108      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002cf6:	4b88      	ldr	r3, [pc, #544]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002d00:	4b85      	ldr	r3, [pc, #532]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d0c:	4b82      	ldr	r3, [pc, #520]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d16:	4b80      	ldr	r3, [pc, #512]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d1a:	08db      	lsrs	r3, r3, #3
 8002d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	ee07 3a90 	vmov	s15, r3
 8002d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80e1 	beq.w	8002efc <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	f000 8083 	beq.w	8002e48 <HAL_RCC_GetSysClockFreq+0x204>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	f200 80a1 	bhi.w	8002e8c <HAL_RCC_GetSysClockFreq+0x248>
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x114>
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d056      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d56:	e099      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d58:	4b6f      	ldr	r3, [pc, #444]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d02d      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d64:	4b6c      	ldr	r3, [pc, #432]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	08db      	lsrs	r3, r3, #3
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	4a6b      	ldr	r2, [pc, #428]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
 8002d74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	ee07 3a90 	vmov	s15, r3
 8002d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d8e:	4b62      	ldr	r3, [pc, #392]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002da2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002dbe:	e087      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002f2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd2:	4b51      	ldr	r3, [pc, #324]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002de2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002de6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002df2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e02:	e065      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002f30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e16:	4b40      	ldr	r3, [pc, #256]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e26:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e46:	e043      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002f34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e62:	ee07 3a90 	vmov	s15, r3
 8002e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e8a:	e021      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002f30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eb2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002f28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ece:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed4:	0a5b      	lsrs	r3, r3, #9
 8002ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002eda:	3301      	adds	r3, #1
 8002edc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	ee07 3a90 	vmov	s15, r3
 8002ee4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ee8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ef4:	ee17 3a90 	vmov	r3, s15
 8002ef8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002efa:	e005      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
      break;
 8002f00:	e002      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002f02:	4b07      	ldr	r3, [pc, #28]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f04:	61bb      	str	r3, [r7, #24]
      break;
 8002f06:	bf00      	nop
  }

  return sysclockfreq;
 8002f08:	69bb      	ldr	r3, [r7, #24]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3724      	adds	r7, #36	@ 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	58024400 	.word	0x58024400
 8002f1c:	03d09000 	.word	0x03d09000
 8002f20:	003d0900 	.word	0x003d0900
 8002f24:	017d7840 	.word	0x017d7840
 8002f28:	46000000 	.word	0x46000000
 8002f2c:	4c742400 	.word	0x4c742400
 8002f30:	4a742400 	.word	0x4a742400
 8002f34:	4bbebc20 	.word	0x4bbebc20

08002f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f3e:	f7ff fe81 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4b10      	ldr	r3, [pc, #64]	@ (8002f88 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	490f      	ldr	r1, [pc, #60]	@ (8002f8c <HAL_RCC_GetHCLKFreq+0x54>)
 8002f50:	5ccb      	ldrb	r3, [r1, r3]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f88 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	4a09      	ldr	r2, [pc, #36]	@ (8002f8c <HAL_RCC_GetHCLKFreq+0x54>)
 8002f66:	5cd3      	ldrb	r3, [r2, r3]
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f72:	4a07      	ldr	r2, [pc, #28]	@ (8002f90 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f76:	4a07      	ldr	r2, [pc, #28]	@ (8002f94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f7c:	4b04      	ldr	r3, [pc, #16]	@ (8002f90 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	58024400 	.word	0x58024400
 8002f8c:	080067fc 	.word	0x080067fc
 8002f90:	24000004 	.word	0x24000004
 8002f94:	24000000 	.word	0x24000000

08002f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002f9c:	f7ff ffcc 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	4904      	ldr	r1, [pc, #16]	@ (8002fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	080067fc 	.word	0x080067fc

08002fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002fc8:	f7ff ffb6 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	4904      	ldr	r1, [pc, #16]	@ (8002fec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fda:	5ccb      	ldrb	r3, [r1, r3]
 8002fdc:	f003 031f 	and.w	r3, r3, #31
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	58024400 	.word	0x58024400
 8002fec:	080067fc 	.word	0x080067fc

08002ff0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002ff4:	f7ff ffa0 	bl	8002f38 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4904      	ldr	r1, [pc, #16]	@ (8003018 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	58024400 	.word	0x58024400
 8003018:	080067fc 	.word	0x080067fc

0800301c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	@ 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003024:	4ba1      	ldr	r3, [pc, #644]	@ (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800302e:	4b9f      	ldr	r3, [pc, #636]	@ (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003032:	0b1b      	lsrs	r3, r3, #12
 8003034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003038:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800303a:	4b9c      	ldr	r3, [pc, #624]	@ (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800303c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003046:	4b99      	ldr	r3, [pc, #612]	@ (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304a:	08db      	lsrs	r3, r3, #3
 800304c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8111 	beq.w	800328c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2b02      	cmp	r3, #2
 800306e:	f000 8083 	beq.w	8003178 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b02      	cmp	r3, #2
 8003076:	f200 80a1 	bhi.w	80031bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d056      	beq.n	8003134 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003086:	e099      	b.n	80031bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003088:	4b88      	ldr	r3, [pc, #544]	@ (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d02d      	beq.n	80030f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003094:	4b85      	ldr	r3, [pc, #532]	@ (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	08db      	lsrs	r3, r3, #3
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	4a84      	ldr	r2, [pc, #528]	@ (80032b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
 80030a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030be:	4b7b      	ldr	r3, [pc, #492]	@ (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80030c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80030d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80032b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80030d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80030ee:	e087      	b.n	8003200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80032b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80030fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003102:	4b6a      	ldr	r3, [pc, #424]	@ (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003112:	ed97 6a03 	vldr	s12, [r7, #12]
 8003116:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80032b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800311a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800311e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800312a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003132:	e065      	b.n	8003200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80032bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003146:	4b59      	ldr	r3, [pc, #356]	@ (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003156:	ed97 6a03 	vldr	s12, [r7, #12]
 800315a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80032b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800315e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800316a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003176:	e043      	b.n	8003200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003182:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80032c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800318a:	4b48      	ldr	r3, [pc, #288]	@ (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800319a:	ed97 6a03 	vldr	s12, [r7, #12]
 800319e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80032b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80031a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031ba:	e021      	b.n	8003200 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80032bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80031ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ce:	4b37      	ldr	r3, [pc, #220]	@ (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031de:	ed97 6a03 	vldr	s12, [r7, #12]
 80031e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80032b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80031e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003200:	4b2a      	ldr	r3, [pc, #168]	@ (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003204:	0a5b      	lsrs	r3, r3, #9
 8003206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003212:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800321a:	edd7 6a07 	vldr	s13, [r7, #28]
 800321e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003226:	ee17 2a90 	vmov	r2, s15
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800322e:	4b1f      	ldr	r3, [pc, #124]	@ (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003232:	0c1b      	lsrs	r3, r3, #16
 8003234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003238:	ee07 3a90 	vmov	s15, r3
 800323c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003240:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003244:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003248:	edd7 6a07 	vldr	s13, [r7, #28]
 800324c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003254:	ee17 2a90 	vmov	r2, s15
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800325c:	4b13      	ldr	r3, [pc, #76]	@ (80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800325e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003260:	0e1b      	lsrs	r3, r3, #24
 8003262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003266:	ee07 3a90 	vmov	s15, r3
 800326a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003272:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003276:	edd7 6a07 	vldr	s13, [r7, #28]
 800327a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800327e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003282:	ee17 2a90 	vmov	r2, s15
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800328a:	e008      	b.n	800329e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
}
 800329e:	bf00      	nop
 80032a0:	3724      	adds	r7, #36	@ 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	58024400 	.word	0x58024400
 80032b0:	03d09000 	.word	0x03d09000
 80032b4:	46000000 	.word	0x46000000
 80032b8:	4c742400 	.word	0x4c742400
 80032bc:	4a742400 	.word	0x4a742400
 80032c0:	4bbebc20 	.word	0x4bbebc20

080032c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	@ 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032cc:	4ba1      	ldr	r3, [pc, #644]	@ (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80032d6:	4b9f      	ldr	r3, [pc, #636]	@ (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032da:	0d1b      	lsrs	r3, r3, #20
 80032dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80032e2:	4b9c      	ldr	r3, [pc, #624]	@ (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80032ee:	4b99      	ldr	r3, [pc, #612]	@ (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	08db      	lsrs	r3, r3, #3
 80032f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	fb02 f303 	mul.w	r3, r2, r3
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003306:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 8111 	beq.w	8003534 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b02      	cmp	r3, #2
 8003316:	f000 8083 	beq.w	8003420 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b02      	cmp	r3, #2
 800331e:	f200 80a1 	bhi.w	8003464 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d056      	beq.n	80033dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800332e:	e099      	b.n	8003464 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003330:	4b88      	ldr	r3, [pc, #544]	@ (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d02d      	beq.n	8003398 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800333c:	4b85      	ldr	r3, [pc, #532]	@ (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	08db      	lsrs	r3, r3, #3
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	4a84      	ldr	r2, [pc, #528]	@ (8003558 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
 800334c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	ee07 3a90 	vmov	s15, r3
 8003354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	ee07 3a90 	vmov	s15, r3
 800335e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003366:	4b7b      	ldr	r3, [pc, #492]	@ (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003376:	ed97 6a03 	vldr	s12, [r7, #12]
 800337a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800355c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800337e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800338a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800338e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003392:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003396:	e087      	b.n	80034a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003560 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80033a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80033be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800355c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80033c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033da:	e065      	b.n	80034a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80033ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ee:	4b59      	ldr	r3, [pc, #356]	@ (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003402:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800355c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800340a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800340e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800341e:	e043      	b.n	80034a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003568 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800342e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003432:	4b48      	ldr	r3, [pc, #288]	@ (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003442:	ed97 6a03 	vldr	s12, [r7, #12]
 8003446:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800355c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800344a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800344e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800345a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003462:	e021      	b.n	80034a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003476:	4b37      	ldr	r3, [pc, #220]	@ (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003486:	ed97 6a03 	vldr	s12, [r7, #12]
 800348a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800355c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800348e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800349a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800349e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80034a8:	4b2a      	ldr	r3, [pc, #168]	@ (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	0a5b      	lsrs	r3, r3, #9
 80034ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80034be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80034c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ce:	ee17 2a90 	vmov	r2, s15
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80034d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034da:	0c1b      	lsrs	r3, r3, #16
 80034dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80034ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80034f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034fc:	ee17 2a90 	vmov	r2, s15
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003504:	4b13      	ldr	r3, [pc, #76]	@ (8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	0e1b      	lsrs	r3, r3, #24
 800350a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003516:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800351a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800351e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800352a:	ee17 2a90 	vmov	r2, s15
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003532:	e008      	b.n	8003546 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	609a      	str	r2, [r3, #8]
}
 8003546:	bf00      	nop
 8003548:	3724      	adds	r7, #36	@ 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	58024400 	.word	0x58024400
 8003558:	03d09000 	.word	0x03d09000
 800355c:	46000000 	.word	0x46000000
 8003560:	4c742400 	.word	0x4c742400
 8003564:	4a742400 	.word	0x4a742400
 8003568:	4bbebc20 	.word	0x4bbebc20

0800356c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e049      	b.n	8003612 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fce4 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	4619      	mov	r1, r3
 80035aa:	4610      	mov	r0, r2
 80035ac:	f000 fba0 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e049      	b.n	80036c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d106      	bne.n	8003646 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f841 	bl	80036c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f000 fb49 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e049      	b.n	8003782 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f841 	bl	800378a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	4619      	mov	r1, r3
 800371a:	4610      	mov	r0, r2
 800371c:	f000 fae8 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b086      	sub	sp, #24
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_TIM_IC_ConfigChannel+0x1e>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e088      	b.n	80038ce <HAL_TIM_IC_ConfigChannel+0x130>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d11b      	bne.n	8003802 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80037da:	f000 fdff 	bl	80043dc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 020c 	bic.w	r2, r2, #12
 80037ec:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6999      	ldr	r1, [r3, #24]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	619a      	str	r2, [r3, #24]
 8003800:	e060      	b.n	80038c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b04      	cmp	r3, #4
 8003806:	d11c      	bne.n	8003842 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003818:	f000 fe83 	bl	8004522 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800382a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6999      	ldr	r1, [r3, #24]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	021a      	lsls	r2, r3, #8
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	619a      	str	r2, [r3, #24]
 8003840:	e040      	b.n	80038c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d11b      	bne.n	8003880 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003858:	f000 fed0 	bl	80045fc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 020c 	bic.w	r2, r2, #12
 800386a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69d9      	ldr	r1, [r3, #28]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	61da      	str	r2, [r3, #28]
 800387e:	e021      	b.n	80038c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b0c      	cmp	r3, #12
 8003884:	d11c      	bne.n	80038c0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003896:	f000 feed 	bl	8004674 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80038a8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69d9      	ldr	r1, [r3, #28]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	021a      	lsls	r2, r3, #8
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	61da      	str	r2, [r3, #28]
 80038be:	e001      	b.n	80038c4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e0ff      	b.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b14      	cmp	r3, #20
 8003902:	f200 80f0 	bhi.w	8003ae6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003906:	a201      	add	r2, pc, #4	@ (adr r2, 800390c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	08003961 	.word	0x08003961
 8003910:	08003ae7 	.word	0x08003ae7
 8003914:	08003ae7 	.word	0x08003ae7
 8003918:	08003ae7 	.word	0x08003ae7
 800391c:	080039a1 	.word	0x080039a1
 8003920:	08003ae7 	.word	0x08003ae7
 8003924:	08003ae7 	.word	0x08003ae7
 8003928:	08003ae7 	.word	0x08003ae7
 800392c:	080039e3 	.word	0x080039e3
 8003930:	08003ae7 	.word	0x08003ae7
 8003934:	08003ae7 	.word	0x08003ae7
 8003938:	08003ae7 	.word	0x08003ae7
 800393c:	08003a23 	.word	0x08003a23
 8003940:	08003ae7 	.word	0x08003ae7
 8003944:	08003ae7 	.word	0x08003ae7
 8003948:	08003ae7 	.word	0x08003ae7
 800394c:	08003a65 	.word	0x08003a65
 8003950:	08003ae7 	.word	0x08003ae7
 8003954:	08003ae7 	.word	0x08003ae7
 8003958:	08003ae7 	.word	0x08003ae7
 800395c:	08003aa5 	.word	0x08003aa5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fa62 	bl	8003e30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0208 	orr.w	r2, r2, #8
 800397a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0204 	bic.w	r2, r2, #4
 800398a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6999      	ldr	r1, [r3, #24]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	619a      	str	r2, [r3, #24]
      break;
 800399e:	e0a5      	b.n	8003aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fad2 	bl	8003f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6999      	ldr	r1, [r3, #24]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	021a      	lsls	r2, r3, #8
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	619a      	str	r2, [r3, #24]
      break;
 80039e0:	e084      	b.n	8003aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fb3b 	bl	8004064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0208 	orr.w	r2, r2, #8
 80039fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69da      	ldr	r2, [r3, #28]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0204 	bic.w	r2, r2, #4
 8003a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69d9      	ldr	r1, [r3, #28]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	61da      	str	r2, [r3, #28]
      break;
 8003a20:	e064      	b.n	8003aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fba3 	bl	8004174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69da      	ldr	r2, [r3, #28]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	69da      	ldr	r2, [r3, #28]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	69d9      	ldr	r1, [r3, #28]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	021a      	lsls	r2, r3, #8
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	61da      	str	r2, [r3, #28]
      break;
 8003a62:	e043      	b.n	8003aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 fbec 	bl	8004248 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0208 	orr.w	r2, r2, #8
 8003a7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0204 	bic.w	r2, r2, #4
 8003a8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003aa2:	e023      	b.n	8003aec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fc30 	bl	8004310 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003abe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ace:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	021a      	lsls	r2, r3, #8
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ae4:	e002      	b.n	8003aec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8003aea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop

08003b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_TIM_ConfigClockSource+0x1c>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e0dc      	b.n	8003cd6 <HAL_TIM_ConfigClockSource+0x1d6>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	4b6a      	ldr	r3, [pc, #424]	@ (8003ce0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a64      	ldr	r2, [pc, #400]	@ (8003ce4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	f000 80a9 	beq.w	8003caa <HAL_TIM_ConfigClockSource+0x1aa>
 8003b58:	4a62      	ldr	r2, [pc, #392]	@ (8003ce4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	f200 80ae 	bhi.w	8003cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8003b60:	4a61      	ldr	r2, [pc, #388]	@ (8003ce8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	f000 80a1 	beq.w	8003caa <HAL_TIM_ConfigClockSource+0x1aa>
 8003b68:	4a5f      	ldr	r2, [pc, #380]	@ (8003ce8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	f200 80a6 	bhi.w	8003cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8003b70:	4a5e      	ldr	r2, [pc, #376]	@ (8003cec <HAL_TIM_ConfigClockSource+0x1ec>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	f000 8099 	beq.w	8003caa <HAL_TIM_ConfigClockSource+0x1aa>
 8003b78:	4a5c      	ldr	r2, [pc, #368]	@ (8003cec <HAL_TIM_ConfigClockSource+0x1ec>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	f200 809e 	bhi.w	8003cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8003b80:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003b84:	f000 8091 	beq.w	8003caa <HAL_TIM_ConfigClockSource+0x1aa>
 8003b88:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003b8c:	f200 8096 	bhi.w	8003cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8003b90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b94:	f000 8089 	beq.w	8003caa <HAL_TIM_ConfigClockSource+0x1aa>
 8003b98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b9c:	f200 808e 	bhi.w	8003cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8003ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba4:	d03e      	beq.n	8003c24 <HAL_TIM_ConfigClockSource+0x124>
 8003ba6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003baa:	f200 8087 	bhi.w	8003cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb2:	f000 8086 	beq.w	8003cc2 <HAL_TIM_ConfigClockSource+0x1c2>
 8003bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bba:	d87f      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8003bbc:	2b70      	cmp	r3, #112	@ 0x70
 8003bbe:	d01a      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0xf6>
 8003bc0:	2b70      	cmp	r3, #112	@ 0x70
 8003bc2:	d87b      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8003bc4:	2b60      	cmp	r3, #96	@ 0x60
 8003bc6:	d050      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0x16a>
 8003bc8:	2b60      	cmp	r3, #96	@ 0x60
 8003bca:	d877      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8003bcc:	2b50      	cmp	r3, #80	@ 0x50
 8003bce:	d03c      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x14a>
 8003bd0:	2b50      	cmp	r3, #80	@ 0x50
 8003bd2:	d873      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8003bd4:	2b40      	cmp	r3, #64	@ 0x40
 8003bd6:	d058      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0x18a>
 8003bd8:	2b40      	cmp	r3, #64	@ 0x40
 8003bda:	d86f      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8003bdc:	2b30      	cmp	r3, #48	@ 0x30
 8003bde:	d064      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x1aa>
 8003be0:	2b30      	cmp	r3, #48	@ 0x30
 8003be2:	d86b      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d060      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x1aa>
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d867      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x1bc>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d05c      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x1aa>
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d05a      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x1aa>
 8003bf4:	e062      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c06:	f000 fd91 	bl	800472c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	609a      	str	r2, [r3, #8]
      break;
 8003c22:	e04f      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c34:	f000 fd7a 	bl	800472c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c46:	609a      	str	r2, [r3, #8]
      break;
 8003c48:	e03c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c56:	461a      	mov	r2, r3
 8003c58:	f000 fc34 	bl	80044c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2150      	movs	r1, #80	@ 0x50
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fd44 	bl	80046f0 <TIM_ITRx_SetConfig>
      break;
 8003c68:	e02c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c76:	461a      	mov	r2, r3
 8003c78:	f000 fc90 	bl	800459c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2160      	movs	r1, #96	@ 0x60
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fd34 	bl	80046f0 <TIM_ITRx_SetConfig>
      break;
 8003c88:	e01c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c96:	461a      	mov	r2, r3
 8003c98:	f000 fc14 	bl	80044c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2140      	movs	r1, #64	@ 0x40
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fd24 	bl	80046f0 <TIM_ITRx_SetConfig>
      break;
 8003ca8:	e00c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	f000 fd1b 	bl	80046f0 <TIM_ITRx_SetConfig>
      break;
 8003cba:	e003      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc0:	e000      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8003cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	ffceff88 	.word	0xffceff88
 8003ce4:	00100040 	.word	0x00100040
 8003ce8:	00100030 	.word	0x00100030
 8003cec:	00100020 	.word	0x00100020

08003cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a43      	ldr	r2, [pc, #268]	@ (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0e:	d00f      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a40      	ldr	r2, [pc, #256]	@ (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e18 <TIM_Base_SetConfig+0x128>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3e      	ldr	r2, [pc, #248]	@ (8003e1c <TIM_Base_SetConfig+0x12c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3d      	ldr	r2, [pc, #244]	@ (8003e20 <TIM_Base_SetConfig+0x130>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d108      	bne.n	8003d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a32      	ldr	r2, [pc, #200]	@ (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d01f      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d50:	d01b      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2f      	ldr	r2, [pc, #188]	@ (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d017      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003e18 <TIM_Base_SetConfig+0x128>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2d      	ldr	r2, [pc, #180]	@ (8003e1c <TIM_Base_SetConfig+0x12c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00f      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8003e20 <TIM_Base_SetConfig+0x130>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00b      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a2b      	ldr	r2, [pc, #172]	@ (8003e24 <TIM_Base_SetConfig+0x134>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003e28 <TIM_Base_SetConfig+0x138>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d003      	beq.n	8003d8a <TIM_Base_SetConfig+0x9a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a29      	ldr	r2, [pc, #164]	@ (8003e2c <TIM_Base_SetConfig+0x13c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d108      	bne.n	8003d9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a14      	ldr	r2, [pc, #80]	@ (8003e10 <TIM_Base_SetConfig+0x120>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00f      	beq.n	8003de2 <TIM_Base_SetConfig+0xf2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a16      	ldr	r2, [pc, #88]	@ (8003e20 <TIM_Base_SetConfig+0x130>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00b      	beq.n	8003de2 <TIM_Base_SetConfig+0xf2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a15      	ldr	r2, [pc, #84]	@ (8003e24 <TIM_Base_SetConfig+0x134>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d007      	beq.n	8003de2 <TIM_Base_SetConfig+0xf2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a14      	ldr	r2, [pc, #80]	@ (8003e28 <TIM_Base_SetConfig+0x138>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d003      	beq.n	8003de2 <TIM_Base_SetConfig+0xf2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a13      	ldr	r2, [pc, #76]	@ (8003e2c <TIM_Base_SetConfig+0x13c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d103      	bne.n	8003dea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f043 0204 	orr.w	r2, r3, #4
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	601a      	str	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800
 8003e1c:	40000c00 	.word	0x40000c00
 8003e20:	40010400 	.word	0x40010400
 8003e24:	40014000 	.word	0x40014000
 8003e28:	40014400 	.word	0x40014400
 8003e2c:	40014800 	.word	0x40014800

08003e30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f023 0201 	bic.w	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4b37      	ldr	r3, [pc, #220]	@ (8003f38 <TIM_OC1_SetConfig+0x108>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f023 0302 	bic.w	r3, r3, #2
 8003e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a2d      	ldr	r2, [pc, #180]	@ (8003f3c <TIM_OC1_SetConfig+0x10c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d00f      	beq.n	8003eac <TIM_OC1_SetConfig+0x7c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f40 <TIM_OC1_SetConfig+0x110>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00b      	beq.n	8003eac <TIM_OC1_SetConfig+0x7c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a2b      	ldr	r2, [pc, #172]	@ (8003f44 <TIM_OC1_SetConfig+0x114>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_OC1_SetConfig+0x7c>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f48 <TIM_OC1_SetConfig+0x118>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_OC1_SetConfig+0x7c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a29      	ldr	r2, [pc, #164]	@ (8003f4c <TIM_OC1_SetConfig+0x11c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d10c      	bne.n	8003ec6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f023 0308 	bic.w	r3, r3, #8
 8003eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f023 0304 	bic.w	r3, r3, #4
 8003ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f3c <TIM_OC1_SetConfig+0x10c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00f      	beq.n	8003eee <TIM_OC1_SetConfig+0xbe>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f40 <TIM_OC1_SetConfig+0x110>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00b      	beq.n	8003eee <TIM_OC1_SetConfig+0xbe>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f44 <TIM_OC1_SetConfig+0x114>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d007      	beq.n	8003eee <TIM_OC1_SetConfig+0xbe>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a19      	ldr	r2, [pc, #100]	@ (8003f48 <TIM_OC1_SetConfig+0x118>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d003      	beq.n	8003eee <TIM_OC1_SetConfig+0xbe>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a18      	ldr	r2, [pc, #96]	@ (8003f4c <TIM_OC1_SetConfig+0x11c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d111      	bne.n	8003f12 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	621a      	str	r2, [r3, #32]
}
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	fffeff8f 	.word	0xfffeff8f
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40010400 	.word	0x40010400
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40014400 	.word	0x40014400
 8003f4c:	40014800 	.word	0x40014800

08003f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f023 0210 	bic.w	r2, r3, #16
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4b34      	ldr	r3, [pc, #208]	@ (800404c <TIM_OC2_SetConfig+0xfc>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f023 0320 	bic.w	r3, r3, #32
 8003f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a29      	ldr	r2, [pc, #164]	@ (8004050 <TIM_OC2_SetConfig+0x100>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d003      	beq.n	8003fb8 <TIM_OC2_SetConfig+0x68>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a28      	ldr	r2, [pc, #160]	@ (8004054 <TIM_OC2_SetConfig+0x104>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d10d      	bne.n	8003fd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <TIM_OC2_SetConfig+0x100>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00f      	beq.n	8003ffc <TIM_OC2_SetConfig+0xac>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a1d      	ldr	r2, [pc, #116]	@ (8004054 <TIM_OC2_SetConfig+0x104>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00b      	beq.n	8003ffc <TIM_OC2_SetConfig+0xac>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8004058 <TIM_OC2_SetConfig+0x108>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d007      	beq.n	8003ffc <TIM_OC2_SetConfig+0xac>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a1b      	ldr	r2, [pc, #108]	@ (800405c <TIM_OC2_SetConfig+0x10c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_OC2_SetConfig+0xac>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a1a      	ldr	r2, [pc, #104]	@ (8004060 <TIM_OC2_SetConfig+0x110>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d113      	bne.n	8004024 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004002:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800400a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	621a      	str	r2, [r3, #32]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	feff8fff 	.word	0xfeff8fff
 8004050:	40010000 	.word	0x40010000
 8004054:	40010400 	.word	0x40010400
 8004058:	40014000 	.word	0x40014000
 800405c:	40014400 	.word	0x40014400
 8004060:	40014800 	.word	0x40014800

08004064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4b33      	ldr	r3, [pc, #204]	@ (800415c <TIM_OC3_SetConfig+0xf8>)
 8004090:	4013      	ands	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0303 	bic.w	r3, r3, #3
 800409a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a28      	ldr	r2, [pc, #160]	@ (8004160 <TIM_OC3_SetConfig+0xfc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC3_SetConfig+0x66>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a27      	ldr	r2, [pc, #156]	@ (8004164 <TIM_OC3_SetConfig+0x100>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d10d      	bne.n	80040e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004160 <TIM_OC3_SetConfig+0xfc>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00f      	beq.n	800410e <TIM_OC3_SetConfig+0xaa>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004164 <TIM_OC3_SetConfig+0x100>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00b      	beq.n	800410e <TIM_OC3_SetConfig+0xaa>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004168 <TIM_OC3_SetConfig+0x104>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <TIM_OC3_SetConfig+0xaa>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a1a      	ldr	r2, [pc, #104]	@ (800416c <TIM_OC3_SetConfig+0x108>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_OC3_SetConfig+0xaa>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a19      	ldr	r2, [pc, #100]	@ (8004170 <TIM_OC3_SetConfig+0x10c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d113      	bne.n	8004136 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800411c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	621a      	str	r2, [r3, #32]
}
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	fffeff8f 	.word	0xfffeff8f
 8004160:	40010000 	.word	0x40010000
 8004164:	40010400 	.word	0x40010400
 8004168:	40014000 	.word	0x40014000
 800416c:	40014400 	.word	0x40014400
 8004170:	40014800 	.word	0x40014800

08004174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <TIM_OC4_SetConfig+0xbc>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	031b      	lsls	r3, r3, #12
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a19      	ldr	r2, [pc, #100]	@ (8004234 <TIM_OC4_SetConfig+0xc0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00f      	beq.n	80041f4 <TIM_OC4_SetConfig+0x80>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a18      	ldr	r2, [pc, #96]	@ (8004238 <TIM_OC4_SetConfig+0xc4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00b      	beq.n	80041f4 <TIM_OC4_SetConfig+0x80>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a17      	ldr	r2, [pc, #92]	@ (800423c <TIM_OC4_SetConfig+0xc8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <TIM_OC4_SetConfig+0x80>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a16      	ldr	r2, [pc, #88]	@ (8004240 <TIM_OC4_SetConfig+0xcc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d003      	beq.n	80041f4 <TIM_OC4_SetConfig+0x80>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a15      	ldr	r2, [pc, #84]	@ (8004244 <TIM_OC4_SetConfig+0xd0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d109      	bne.n	8004208 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	019b      	lsls	r3, r3, #6
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	621a      	str	r2, [r3, #32]
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	feff8fff 	.word	0xfeff8fff
 8004234:	40010000 	.word	0x40010000
 8004238:	40010400 	.word	0x40010400
 800423c:	40014000 	.word	0x40014000
 8004240:	40014400 	.word	0x40014400
 8004244:	40014800 	.word	0x40014800

08004248 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4b21      	ldr	r3, [pc, #132]	@ (80042f8 <TIM_OC5_SetConfig+0xb0>)
 8004274:	4013      	ands	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004288:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	041b      	lsls	r3, r3, #16
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	4313      	orrs	r3, r2
 8004294:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a18      	ldr	r2, [pc, #96]	@ (80042fc <TIM_OC5_SetConfig+0xb4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00f      	beq.n	80042be <TIM_OC5_SetConfig+0x76>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a17      	ldr	r2, [pc, #92]	@ (8004300 <TIM_OC5_SetConfig+0xb8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d00b      	beq.n	80042be <TIM_OC5_SetConfig+0x76>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a16      	ldr	r2, [pc, #88]	@ (8004304 <TIM_OC5_SetConfig+0xbc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d007      	beq.n	80042be <TIM_OC5_SetConfig+0x76>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	@ (8004308 <TIM_OC5_SetConfig+0xc0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d003      	beq.n	80042be <TIM_OC5_SetConfig+0x76>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a14      	ldr	r2, [pc, #80]	@ (800430c <TIM_OC5_SetConfig+0xc4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d109      	bne.n	80042d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	021b      	lsls	r3, r3, #8
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	621a      	str	r2, [r3, #32]
}
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	fffeff8f 	.word	0xfffeff8f
 80042fc:	40010000 	.word	0x40010000
 8004300:	40010400 	.word	0x40010400
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800

08004310 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4b22      	ldr	r3, [pc, #136]	@ (80043c4 <TIM_OC6_SetConfig+0xb4>)
 800433c:	4013      	ands	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	051b      	lsls	r3, r3, #20
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a19      	ldr	r2, [pc, #100]	@ (80043c8 <TIM_OC6_SetConfig+0xb8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d00f      	beq.n	8004388 <TIM_OC6_SetConfig+0x78>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a18      	ldr	r2, [pc, #96]	@ (80043cc <TIM_OC6_SetConfig+0xbc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00b      	beq.n	8004388 <TIM_OC6_SetConfig+0x78>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a17      	ldr	r2, [pc, #92]	@ (80043d0 <TIM_OC6_SetConfig+0xc0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d007      	beq.n	8004388 <TIM_OC6_SetConfig+0x78>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a16      	ldr	r2, [pc, #88]	@ (80043d4 <TIM_OC6_SetConfig+0xc4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <TIM_OC6_SetConfig+0x78>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a15      	ldr	r2, [pc, #84]	@ (80043d8 <TIM_OC6_SetConfig+0xc8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d109      	bne.n	800439c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800438e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	029b      	lsls	r3, r3, #10
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	621a      	str	r2, [r3, #32]
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	feff8fff 	.word	0xfeff8fff
 80043c8:	40010000 	.word	0x40010000
 80043cc:	40010400 	.word	0x40010400
 80043d0:	40014000 	.word	0x40014000
 80043d4:	40014400 	.word	0x40014400
 80043d8:	40014800 	.word	0x40014800

080043dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f023 0201 	bic.w	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a28      	ldr	r2, [pc, #160]	@ (80044a8 <TIM_TI1_SetConfig+0xcc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d01b      	beq.n	8004442 <TIM_TI1_SetConfig+0x66>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004410:	d017      	beq.n	8004442 <TIM_TI1_SetConfig+0x66>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a25      	ldr	r2, [pc, #148]	@ (80044ac <TIM_TI1_SetConfig+0xd0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d013      	beq.n	8004442 <TIM_TI1_SetConfig+0x66>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4a24      	ldr	r2, [pc, #144]	@ (80044b0 <TIM_TI1_SetConfig+0xd4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00f      	beq.n	8004442 <TIM_TI1_SetConfig+0x66>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a23      	ldr	r2, [pc, #140]	@ (80044b4 <TIM_TI1_SetConfig+0xd8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00b      	beq.n	8004442 <TIM_TI1_SetConfig+0x66>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a22      	ldr	r2, [pc, #136]	@ (80044b8 <TIM_TI1_SetConfig+0xdc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d007      	beq.n	8004442 <TIM_TI1_SetConfig+0x66>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4a21      	ldr	r2, [pc, #132]	@ (80044bc <TIM_TI1_SetConfig+0xe0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d003      	beq.n	8004442 <TIM_TI1_SetConfig+0x66>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4a20      	ldr	r2, [pc, #128]	@ (80044c0 <TIM_TI1_SetConfig+0xe4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <TIM_TI1_SetConfig+0x6a>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <TIM_TI1_SetConfig+0x6c>
 8004446:	2300      	movs	r3, #0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 0303 	bic.w	r3, r3, #3
 8004452:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	e003      	b.n	8004466 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800446c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	b2db      	uxtb	r3, r3
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f023 030a 	bic.w	r3, r3, #10
 8004480:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f003 030a 	and.w	r3, r3, #10
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	621a      	str	r2, [r3, #32]
}
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800
 80044b4:	40000c00 	.word	0x40000c00
 80044b8:	40010400 	.word	0x40010400
 80044bc:	40001800 	.word	0x40001800
 80044c0:	40014000 	.word	0x40014000

080044c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f023 0201 	bic.w	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f023 030a 	bic.w	r3, r3, #10
 8004500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	621a      	str	r2, [r3, #32]
}
 8004516:	bf00      	nop
 8004518:	371c      	adds	r7, #28
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004522:	b480      	push	{r7}
 8004524:	b087      	sub	sp, #28
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f023 0210 	bic.w	r2, r3, #16
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800454e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	021b      	lsls	r3, r3, #8
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004560:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	031b      	lsls	r3, r3, #12
 8004566:	b29b      	uxth	r3, r3
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004574:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	621a      	str	r2, [r3, #32]
}
 8004590:	bf00      	nop
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	f023 0210 	bic.w	r2, r3, #16
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	031b      	lsls	r3, r3, #12
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	621a      	str	r2, [r3, #32]
}
 80045f0:	bf00      	nop
 80045f2:	371c      	adds	r7, #28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f023 0303 	bic.w	r3, r3, #3
 8004628:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004638:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	b2db      	uxtb	r3, r3
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800464c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	621a      	str	r2, [r3, #32]
}
 8004668:	bf00      	nop
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	031b      	lsls	r3, r3, #12
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80046c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	031b      	lsls	r3, r3, #12
 80046cc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	621a      	str	r2, [r3, #32]
}
 80046e2:	bf00      	nop
 80046e4:	371c      	adds	r7, #28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4b09      	ldr	r3, [pc, #36]	@ (8004728 <TIM_ITRx_SetConfig+0x38>)
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	f043 0307 	orr.w	r3, r3, #7
 8004712:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	609a      	str	r2, [r3, #8]
}
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	ffcfff8f 	.word	0xffcfff8f

0800472c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	021a      	lsls	r2, r3, #8
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	431a      	orrs	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4313      	orrs	r3, r2
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	609a      	str	r2, [r3, #8]
}
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004780:	2302      	movs	r3, #2
 8004782:	e06d      	b.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a30      	ldr	r2, [pc, #192]	@ (800486c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004870 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d108      	bne.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80047be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a20      	ldr	r2, [pc, #128]	@ (800486c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d022      	beq.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f6:	d01d      	beq.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004874 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d018      	beq.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1c      	ldr	r2, [pc, #112]	@ (8004878 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d013      	beq.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1a      	ldr	r2, [pc, #104]	@ (800487c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00e      	beq.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a15      	ldr	r2, [pc, #84]	@ (8004870 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d009      	beq.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a16      	ldr	r2, [pc, #88]	@ (8004880 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a15      	ldr	r2, [pc, #84]	@ (8004884 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d10c      	bne.n	800484e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800483a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	4313      	orrs	r3, r2
 8004844:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	40010000 	.word	0x40010000
 8004870:	40010400 	.word	0x40010400
 8004874:	40000400 	.word	0x40000400
 8004878:	40000800 	.word	0x40000800
 800487c:	40000c00 	.word	0x40000c00
 8004880:	40001800 	.word	0x40001800
 8004884:	40014000 	.word	0x40014000

08004888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e042      	b.n	8004920 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d106      	bne.n	80048b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f83b 	bl	8004928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2224      	movs	r2, #36	@ 0x24
 80048b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fe28 	bl	8005528 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f8bd 	bl	8004a58 <UART_SetConfig>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e01b      	b.n	8004920 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004906:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fea7 	bl	800566c <UART_CheckIdleState>
 800491e:	4603      	mov	r3, r0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	@ 0x28
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004952:	2b20      	cmp	r3, #32
 8004954:	d17b      	bne.n	8004a4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_UART_Transmit+0x26>
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e074      	b.n	8004a50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2221      	movs	r2, #33	@ 0x21
 8004972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004976:	f7fc ff85 	bl	8001884 <HAL_GetTick>
 800497a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	88fa      	ldrh	r2, [r7, #6]
 8004980:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	88fa      	ldrh	r2, [r7, #6]
 8004988:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004994:	d108      	bne.n	80049a8 <HAL_UART_Transmit+0x6c>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d104      	bne.n	80049a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	e003      	b.n	80049b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049b0:	e030      	b.n	8004a14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2200      	movs	r2, #0
 80049ba:	2180      	movs	r1, #128	@ 0x80
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 feff 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e03d      	b.n	8004a50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10b      	bne.n	80049f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	3302      	adds	r3, #2
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	e007      	b.n	8004a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	781a      	ldrb	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	3301      	adds	r3, #1
 8004a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1c8      	bne.n	80049b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2200      	movs	r2, #0
 8004a28:	2140      	movs	r1, #64	@ 0x40
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 fec8 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e006      	b.n	8004a50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e000      	b.n	8004a50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
  }
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a5c:	b092      	sub	sp, #72	@ 0x48
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4bbe      	ldr	r3, [pc, #760]	@ (8004d80 <UART_SetConfig+0x328>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4ab3      	ldr	r2, [pc, #716]	@ (8004d84 <UART_SetConfig+0x32c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	4baf      	ldr	r3, [pc, #700]	@ (8004d88 <UART_SetConfig+0x330>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	6812      	ldr	r2, [r2, #0]
 8004ad2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ade:	f023 010f 	bic.w	r1, r3, #15
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4aa6      	ldr	r2, [pc, #664]	@ (8004d8c <UART_SetConfig+0x334>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d177      	bne.n	8004be8 <UART_SetConfig+0x190>
 8004af8:	4ba5      	ldr	r3, [pc, #660]	@ (8004d90 <UART_SetConfig+0x338>)
 8004afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b00:	2b28      	cmp	r3, #40	@ 0x28
 8004b02:	d86d      	bhi.n	8004be0 <UART_SetConfig+0x188>
 8004b04:	a201      	add	r2, pc, #4	@ (adr r2, 8004b0c <UART_SetConfig+0xb4>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004bb1 	.word	0x08004bb1
 8004b10:	08004be1 	.word	0x08004be1
 8004b14:	08004be1 	.word	0x08004be1
 8004b18:	08004be1 	.word	0x08004be1
 8004b1c:	08004be1 	.word	0x08004be1
 8004b20:	08004be1 	.word	0x08004be1
 8004b24:	08004be1 	.word	0x08004be1
 8004b28:	08004be1 	.word	0x08004be1
 8004b2c:	08004bb9 	.word	0x08004bb9
 8004b30:	08004be1 	.word	0x08004be1
 8004b34:	08004be1 	.word	0x08004be1
 8004b38:	08004be1 	.word	0x08004be1
 8004b3c:	08004be1 	.word	0x08004be1
 8004b40:	08004be1 	.word	0x08004be1
 8004b44:	08004be1 	.word	0x08004be1
 8004b48:	08004be1 	.word	0x08004be1
 8004b4c:	08004bc1 	.word	0x08004bc1
 8004b50:	08004be1 	.word	0x08004be1
 8004b54:	08004be1 	.word	0x08004be1
 8004b58:	08004be1 	.word	0x08004be1
 8004b5c:	08004be1 	.word	0x08004be1
 8004b60:	08004be1 	.word	0x08004be1
 8004b64:	08004be1 	.word	0x08004be1
 8004b68:	08004be1 	.word	0x08004be1
 8004b6c:	08004bc9 	.word	0x08004bc9
 8004b70:	08004be1 	.word	0x08004be1
 8004b74:	08004be1 	.word	0x08004be1
 8004b78:	08004be1 	.word	0x08004be1
 8004b7c:	08004be1 	.word	0x08004be1
 8004b80:	08004be1 	.word	0x08004be1
 8004b84:	08004be1 	.word	0x08004be1
 8004b88:	08004be1 	.word	0x08004be1
 8004b8c:	08004bd1 	.word	0x08004bd1
 8004b90:	08004be1 	.word	0x08004be1
 8004b94:	08004be1 	.word	0x08004be1
 8004b98:	08004be1 	.word	0x08004be1
 8004b9c:	08004be1 	.word	0x08004be1
 8004ba0:	08004be1 	.word	0x08004be1
 8004ba4:	08004be1 	.word	0x08004be1
 8004ba8:	08004be1 	.word	0x08004be1
 8004bac:	08004bd9 	.word	0x08004bd9
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bb6:	e222      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004bb8:	2304      	movs	r3, #4
 8004bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bbe:	e21e      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bc6:	e21a      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004bc8:	2310      	movs	r3, #16
 8004bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bce:	e216      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bd6:	e212      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004bd8:	2340      	movs	r3, #64	@ 0x40
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bde:	e20e      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004be0:	2380      	movs	r3, #128	@ 0x80
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004be6:	e20a      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a69      	ldr	r2, [pc, #420]	@ (8004d94 <UART_SetConfig+0x33c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d130      	bne.n	8004c54 <UART_SetConfig+0x1fc>
 8004bf2:	4b67      	ldr	r3, [pc, #412]	@ (8004d90 <UART_SetConfig+0x338>)
 8004bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d826      	bhi.n	8004c4c <UART_SetConfig+0x1f4>
 8004bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8004c04 <UART_SetConfig+0x1ac>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004c1d 	.word	0x08004c1d
 8004c08:	08004c25 	.word	0x08004c25
 8004c0c:	08004c2d 	.word	0x08004c2d
 8004c10:	08004c35 	.word	0x08004c35
 8004c14:	08004c3d 	.word	0x08004c3d
 8004c18:	08004c45 	.word	0x08004c45
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c22:	e1ec      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004c24:	2304      	movs	r3, #4
 8004c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c2a:	e1e8      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004c2c:	2308      	movs	r3, #8
 8004c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c32:	e1e4      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004c34:	2310      	movs	r3, #16
 8004c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c3a:	e1e0      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004c3c:	2320      	movs	r3, #32
 8004c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c42:	e1dc      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004c44:	2340      	movs	r3, #64	@ 0x40
 8004c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c4a:	e1d8      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004c4c:	2380      	movs	r3, #128	@ 0x80
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c52:	e1d4      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a4f      	ldr	r2, [pc, #316]	@ (8004d98 <UART_SetConfig+0x340>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d130      	bne.n	8004cc0 <UART_SetConfig+0x268>
 8004c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8004d90 <UART_SetConfig+0x338>)
 8004c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	2b05      	cmp	r3, #5
 8004c68:	d826      	bhi.n	8004cb8 <UART_SetConfig+0x260>
 8004c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c70 <UART_SetConfig+0x218>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004c89 	.word	0x08004c89
 8004c74:	08004c91 	.word	0x08004c91
 8004c78:	08004c99 	.word	0x08004c99
 8004c7c:	08004ca1 	.word	0x08004ca1
 8004c80:	08004ca9 	.word	0x08004ca9
 8004c84:	08004cb1 	.word	0x08004cb1
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c8e:	e1b6      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004c90:	2304      	movs	r3, #4
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c96:	e1b2      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004c98:	2308      	movs	r3, #8
 8004c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c9e:	e1ae      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004ca0:	2310      	movs	r3, #16
 8004ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ca6:	e1aa      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004ca8:	2320      	movs	r3, #32
 8004caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cae:	e1a6      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004cb0:	2340      	movs	r3, #64	@ 0x40
 8004cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cb6:	e1a2      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004cb8:	2380      	movs	r3, #128	@ 0x80
 8004cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cbe:	e19e      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a35      	ldr	r2, [pc, #212]	@ (8004d9c <UART_SetConfig+0x344>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d130      	bne.n	8004d2c <UART_SetConfig+0x2d4>
 8004cca:	4b31      	ldr	r3, [pc, #196]	@ (8004d90 <UART_SetConfig+0x338>)
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	d826      	bhi.n	8004d24 <UART_SetConfig+0x2cc>
 8004cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cdc <UART_SetConfig+0x284>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004cf5 	.word	0x08004cf5
 8004ce0:	08004cfd 	.word	0x08004cfd
 8004ce4:	08004d05 	.word	0x08004d05
 8004ce8:	08004d0d 	.word	0x08004d0d
 8004cec:	08004d15 	.word	0x08004d15
 8004cf0:	08004d1d 	.word	0x08004d1d
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cfa:	e180      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d02:	e17c      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004d04:	2308      	movs	r3, #8
 8004d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d0a:	e178      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d12:	e174      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004d14:	2320      	movs	r3, #32
 8004d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1a:	e170      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004d1c:	2340      	movs	r3, #64	@ 0x40
 8004d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d22:	e16c      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004d24:	2380      	movs	r3, #128	@ 0x80
 8004d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2a:	e168      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1b      	ldr	r2, [pc, #108]	@ (8004da0 <UART_SetConfig+0x348>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d142      	bne.n	8004dbc <UART_SetConfig+0x364>
 8004d36:	4b16      	ldr	r3, [pc, #88]	@ (8004d90 <UART_SetConfig+0x338>)
 8004d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	2b05      	cmp	r3, #5
 8004d40:	d838      	bhi.n	8004db4 <UART_SetConfig+0x35c>
 8004d42:	a201      	add	r2, pc, #4	@ (adr r2, 8004d48 <UART_SetConfig+0x2f0>)
 8004d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d48:	08004d61 	.word	0x08004d61
 8004d4c:	08004d69 	.word	0x08004d69
 8004d50:	08004d71 	.word	0x08004d71
 8004d54:	08004d79 	.word	0x08004d79
 8004d58:	08004da5 	.word	0x08004da5
 8004d5c:	08004dad 	.word	0x08004dad
 8004d60:	2300      	movs	r3, #0
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d66:	e14a      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d6e:	e146      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004d70:	2308      	movs	r3, #8
 8004d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d76:	e142      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004d78:	2310      	movs	r3, #16
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7e:	e13e      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004d80:	cfff69f3 	.word	0xcfff69f3
 8004d84:	58000c00 	.word	0x58000c00
 8004d88:	11fff4ff 	.word	0x11fff4ff
 8004d8c:	40011000 	.word	0x40011000
 8004d90:	58024400 	.word	0x58024400
 8004d94:	40004400 	.word	0x40004400
 8004d98:	40004800 	.word	0x40004800
 8004d9c:	40004c00 	.word	0x40004c00
 8004da0:	40005000 	.word	0x40005000
 8004da4:	2320      	movs	r3, #32
 8004da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004daa:	e128      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004dac:	2340      	movs	r3, #64	@ 0x40
 8004dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004db2:	e124      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004db4:	2380      	movs	r3, #128	@ 0x80
 8004db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dba:	e120      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4acb      	ldr	r2, [pc, #812]	@ (80050f0 <UART_SetConfig+0x698>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d176      	bne.n	8004eb4 <UART_SetConfig+0x45c>
 8004dc6:	4bcb      	ldr	r3, [pc, #812]	@ (80050f4 <UART_SetConfig+0x69c>)
 8004dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dce:	2b28      	cmp	r3, #40	@ 0x28
 8004dd0:	d86c      	bhi.n	8004eac <UART_SetConfig+0x454>
 8004dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd8 <UART_SetConfig+0x380>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004e7d 	.word	0x08004e7d
 8004ddc:	08004ead 	.word	0x08004ead
 8004de0:	08004ead 	.word	0x08004ead
 8004de4:	08004ead 	.word	0x08004ead
 8004de8:	08004ead 	.word	0x08004ead
 8004dec:	08004ead 	.word	0x08004ead
 8004df0:	08004ead 	.word	0x08004ead
 8004df4:	08004ead 	.word	0x08004ead
 8004df8:	08004e85 	.word	0x08004e85
 8004dfc:	08004ead 	.word	0x08004ead
 8004e00:	08004ead 	.word	0x08004ead
 8004e04:	08004ead 	.word	0x08004ead
 8004e08:	08004ead 	.word	0x08004ead
 8004e0c:	08004ead 	.word	0x08004ead
 8004e10:	08004ead 	.word	0x08004ead
 8004e14:	08004ead 	.word	0x08004ead
 8004e18:	08004e8d 	.word	0x08004e8d
 8004e1c:	08004ead 	.word	0x08004ead
 8004e20:	08004ead 	.word	0x08004ead
 8004e24:	08004ead 	.word	0x08004ead
 8004e28:	08004ead 	.word	0x08004ead
 8004e2c:	08004ead 	.word	0x08004ead
 8004e30:	08004ead 	.word	0x08004ead
 8004e34:	08004ead 	.word	0x08004ead
 8004e38:	08004e95 	.word	0x08004e95
 8004e3c:	08004ead 	.word	0x08004ead
 8004e40:	08004ead 	.word	0x08004ead
 8004e44:	08004ead 	.word	0x08004ead
 8004e48:	08004ead 	.word	0x08004ead
 8004e4c:	08004ead 	.word	0x08004ead
 8004e50:	08004ead 	.word	0x08004ead
 8004e54:	08004ead 	.word	0x08004ead
 8004e58:	08004e9d 	.word	0x08004e9d
 8004e5c:	08004ead 	.word	0x08004ead
 8004e60:	08004ead 	.word	0x08004ead
 8004e64:	08004ead 	.word	0x08004ead
 8004e68:	08004ead 	.word	0x08004ead
 8004e6c:	08004ead 	.word	0x08004ead
 8004e70:	08004ead 	.word	0x08004ead
 8004e74:	08004ead 	.word	0x08004ead
 8004e78:	08004ea5 	.word	0x08004ea5
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e82:	e0bc      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004e84:	2304      	movs	r3, #4
 8004e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e8a:	e0b8      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e92:	e0b4      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004e94:	2310      	movs	r3, #16
 8004e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e9a:	e0b0      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004e9c:	2320      	movs	r3, #32
 8004e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ea2:	e0ac      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004ea4:	2340      	movs	r3, #64	@ 0x40
 8004ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eaa:	e0a8      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004eac:	2380      	movs	r3, #128	@ 0x80
 8004eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eb2:	e0a4      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a8f      	ldr	r2, [pc, #572]	@ (80050f8 <UART_SetConfig+0x6a0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d130      	bne.n	8004f20 <UART_SetConfig+0x4c8>
 8004ebe:	4b8d      	ldr	r3, [pc, #564]	@ (80050f4 <UART_SetConfig+0x69c>)
 8004ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	2b05      	cmp	r3, #5
 8004ec8:	d826      	bhi.n	8004f18 <UART_SetConfig+0x4c0>
 8004eca:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed0 <UART_SetConfig+0x478>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004ee9 	.word	0x08004ee9
 8004ed4:	08004ef1 	.word	0x08004ef1
 8004ed8:	08004ef9 	.word	0x08004ef9
 8004edc:	08004f01 	.word	0x08004f01
 8004ee0:	08004f09 	.word	0x08004f09
 8004ee4:	08004f11 	.word	0x08004f11
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eee:	e086      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ef6:	e082      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004ef8:	2308      	movs	r3, #8
 8004efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004efe:	e07e      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004f00:	2310      	movs	r3, #16
 8004f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f06:	e07a      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004f08:	2320      	movs	r3, #32
 8004f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f0e:	e076      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004f10:	2340      	movs	r3, #64	@ 0x40
 8004f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f16:	e072      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004f18:	2380      	movs	r3, #128	@ 0x80
 8004f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f1e:	e06e      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a75      	ldr	r2, [pc, #468]	@ (80050fc <UART_SetConfig+0x6a4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d130      	bne.n	8004f8c <UART_SetConfig+0x534>
 8004f2a:	4b72      	ldr	r3, [pc, #456]	@ (80050f4 <UART_SetConfig+0x69c>)
 8004f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	2b05      	cmp	r3, #5
 8004f34:	d826      	bhi.n	8004f84 <UART_SetConfig+0x52c>
 8004f36:	a201      	add	r2, pc, #4	@ (adr r2, 8004f3c <UART_SetConfig+0x4e4>)
 8004f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3c:	08004f55 	.word	0x08004f55
 8004f40:	08004f5d 	.word	0x08004f5d
 8004f44:	08004f65 	.word	0x08004f65
 8004f48:	08004f6d 	.word	0x08004f6d
 8004f4c:	08004f75 	.word	0x08004f75
 8004f50:	08004f7d 	.word	0x08004f7d
 8004f54:	2300      	movs	r3, #0
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f5a:	e050      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f62:	e04c      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004f64:	2308      	movs	r3, #8
 8004f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f6a:	e048      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004f6c:	2310      	movs	r3, #16
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f72:	e044      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004f74:	2320      	movs	r3, #32
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f7a:	e040      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004f7c:	2340      	movs	r3, #64	@ 0x40
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f82:	e03c      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004f84:	2380      	movs	r3, #128	@ 0x80
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8a:	e038      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a5b      	ldr	r2, [pc, #364]	@ (8005100 <UART_SetConfig+0x6a8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d130      	bne.n	8004ff8 <UART_SetConfig+0x5a0>
 8004f96:	4b57      	ldr	r3, [pc, #348]	@ (80050f4 <UART_SetConfig+0x69c>)
 8004f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9a:	f003 0307 	and.w	r3, r3, #7
 8004f9e:	2b05      	cmp	r3, #5
 8004fa0:	d826      	bhi.n	8004ff0 <UART_SetConfig+0x598>
 8004fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa8 <UART_SetConfig+0x550>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08004fc1 	.word	0x08004fc1
 8004fac:	08004fc9 	.word	0x08004fc9
 8004fb0:	08004fd1 	.word	0x08004fd1
 8004fb4:	08004fd9 	.word	0x08004fd9
 8004fb8:	08004fe1 	.word	0x08004fe1
 8004fbc:	08004fe9 	.word	0x08004fe9
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fc6:	e01a      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004fc8:	2304      	movs	r3, #4
 8004fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fce:	e016      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004fd0:	2308      	movs	r3, #8
 8004fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fd6:	e012      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004fd8:	2310      	movs	r3, #16
 8004fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fde:	e00e      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004fe0:	2320      	movs	r3, #32
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe6:	e00a      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004fe8:	2340      	movs	r3, #64	@ 0x40
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fee:	e006      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004ff0:	2380      	movs	r3, #128	@ 0x80
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff6:	e002      	b.n	8004ffe <UART_SetConfig+0x5a6>
 8004ff8:	2380      	movs	r3, #128	@ 0x80
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a3f      	ldr	r2, [pc, #252]	@ (8005100 <UART_SetConfig+0x6a8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	f040 80f8 	bne.w	80051fa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800500a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800500e:	2b20      	cmp	r3, #32
 8005010:	dc46      	bgt.n	80050a0 <UART_SetConfig+0x648>
 8005012:	2b02      	cmp	r3, #2
 8005014:	f2c0 8082 	blt.w	800511c <UART_SetConfig+0x6c4>
 8005018:	3b02      	subs	r3, #2
 800501a:	2b1e      	cmp	r3, #30
 800501c:	d87e      	bhi.n	800511c <UART_SetConfig+0x6c4>
 800501e:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <UART_SetConfig+0x5cc>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	080050a7 	.word	0x080050a7
 8005028:	0800511d 	.word	0x0800511d
 800502c:	080050af 	.word	0x080050af
 8005030:	0800511d 	.word	0x0800511d
 8005034:	0800511d 	.word	0x0800511d
 8005038:	0800511d 	.word	0x0800511d
 800503c:	080050bf 	.word	0x080050bf
 8005040:	0800511d 	.word	0x0800511d
 8005044:	0800511d 	.word	0x0800511d
 8005048:	0800511d 	.word	0x0800511d
 800504c:	0800511d 	.word	0x0800511d
 8005050:	0800511d 	.word	0x0800511d
 8005054:	0800511d 	.word	0x0800511d
 8005058:	0800511d 	.word	0x0800511d
 800505c:	080050cf 	.word	0x080050cf
 8005060:	0800511d 	.word	0x0800511d
 8005064:	0800511d 	.word	0x0800511d
 8005068:	0800511d 	.word	0x0800511d
 800506c:	0800511d 	.word	0x0800511d
 8005070:	0800511d 	.word	0x0800511d
 8005074:	0800511d 	.word	0x0800511d
 8005078:	0800511d 	.word	0x0800511d
 800507c:	0800511d 	.word	0x0800511d
 8005080:	0800511d 	.word	0x0800511d
 8005084:	0800511d 	.word	0x0800511d
 8005088:	0800511d 	.word	0x0800511d
 800508c:	0800511d 	.word	0x0800511d
 8005090:	0800511d 	.word	0x0800511d
 8005094:	0800511d 	.word	0x0800511d
 8005098:	0800511d 	.word	0x0800511d
 800509c:	0800510f 	.word	0x0800510f
 80050a0:	2b40      	cmp	r3, #64	@ 0x40
 80050a2:	d037      	beq.n	8005114 <UART_SetConfig+0x6bc>
 80050a4:	e03a      	b.n	800511c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80050a6:	f7fd ffa3 	bl	8002ff0 <HAL_RCCEx_GetD3PCLK1Freq>
 80050aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050ac:	e03c      	b.n	8005128 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fd ffb2 	bl	800301c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050bc:	e034      	b.n	8005128 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050be:	f107 0318 	add.w	r3, r7, #24
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fe f8fe 	bl	80032c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050cc:	e02c      	b.n	8005128 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050ce:	4b09      	ldr	r3, [pc, #36]	@ (80050f4 <UART_SetConfig+0x69c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d016      	beq.n	8005108 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050da:	4b06      	ldr	r3, [pc, #24]	@ (80050f4 <UART_SetConfig+0x69c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	08db      	lsrs	r3, r3, #3
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	4a07      	ldr	r2, [pc, #28]	@ (8005104 <UART_SetConfig+0x6ac>)
 80050e6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050ec:	e01c      	b.n	8005128 <UART_SetConfig+0x6d0>
 80050ee:	bf00      	nop
 80050f0:	40011400 	.word	0x40011400
 80050f4:	58024400 	.word	0x58024400
 80050f8:	40007800 	.word	0x40007800
 80050fc:	40007c00 	.word	0x40007c00
 8005100:	58000c00 	.word	0x58000c00
 8005104:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005108:	4b9d      	ldr	r3, [pc, #628]	@ (8005380 <UART_SetConfig+0x928>)
 800510a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800510c:	e00c      	b.n	8005128 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800510e:	4b9d      	ldr	r3, [pc, #628]	@ (8005384 <UART_SetConfig+0x92c>)
 8005110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005112:	e009      	b.n	8005128 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005114:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800511a:	e005      	b.n	8005128 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005126:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 81de 	beq.w	80054ec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005134:	4a94      	ldr	r2, [pc, #592]	@ (8005388 <UART_SetConfig+0x930>)
 8005136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800513a:	461a      	mov	r2, r3
 800513c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800513e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005142:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	4613      	mov	r3, r2
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	4413      	add	r3, r2
 800514e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005150:	429a      	cmp	r2, r3
 8005152:	d305      	bcc.n	8005160 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800515a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800515c:	429a      	cmp	r2, r3
 800515e:	d903      	bls.n	8005168 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005166:	e1c1      	b.n	80054ec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800516a:	2200      	movs	r2, #0
 800516c:	60bb      	str	r3, [r7, #8]
 800516e:	60fa      	str	r2, [r7, #12]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005174:	4a84      	ldr	r2, [pc, #528]	@ (8005388 <UART_SetConfig+0x930>)
 8005176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800517a:	b29b      	uxth	r3, r3
 800517c:	2200      	movs	r2, #0
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	607a      	str	r2, [r7, #4]
 8005182:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005186:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800518a:	f7fb f8f9 	bl	8000380 <__aeabi_uldivmod>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	020b      	lsls	r3, r1, #8
 80051a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051a4:	0202      	lsls	r2, r0, #8
 80051a6:	6979      	ldr	r1, [r7, #20]
 80051a8:	6849      	ldr	r1, [r1, #4]
 80051aa:	0849      	lsrs	r1, r1, #1
 80051ac:	2000      	movs	r0, #0
 80051ae:	460c      	mov	r4, r1
 80051b0:	4605      	mov	r5, r0
 80051b2:	eb12 0804 	adds.w	r8, r2, r4
 80051b6:	eb43 0905 	adc.w	r9, r3, r5
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	469a      	mov	sl, r3
 80051c2:	4693      	mov	fp, r2
 80051c4:	4652      	mov	r2, sl
 80051c6:	465b      	mov	r3, fp
 80051c8:	4640      	mov	r0, r8
 80051ca:	4649      	mov	r1, r9
 80051cc:	f7fb f8d8 	bl	8000380 <__aeabi_uldivmod>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4613      	mov	r3, r2
 80051d6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051de:	d308      	bcc.n	80051f2 <UART_SetConfig+0x79a>
 80051e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051e6:	d204      	bcs.n	80051f2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	e17c      	b.n	80054ec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80051f8:	e178      	b.n	80054ec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005202:	f040 80c5 	bne.w	8005390 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005206:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800520a:	2b20      	cmp	r3, #32
 800520c:	dc48      	bgt.n	80052a0 <UART_SetConfig+0x848>
 800520e:	2b00      	cmp	r3, #0
 8005210:	db7b      	blt.n	800530a <UART_SetConfig+0x8b2>
 8005212:	2b20      	cmp	r3, #32
 8005214:	d879      	bhi.n	800530a <UART_SetConfig+0x8b2>
 8005216:	a201      	add	r2, pc, #4	@ (adr r2, 800521c <UART_SetConfig+0x7c4>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	080052a7 	.word	0x080052a7
 8005220:	080052af 	.word	0x080052af
 8005224:	0800530b 	.word	0x0800530b
 8005228:	0800530b 	.word	0x0800530b
 800522c:	080052b7 	.word	0x080052b7
 8005230:	0800530b 	.word	0x0800530b
 8005234:	0800530b 	.word	0x0800530b
 8005238:	0800530b 	.word	0x0800530b
 800523c:	080052c7 	.word	0x080052c7
 8005240:	0800530b 	.word	0x0800530b
 8005244:	0800530b 	.word	0x0800530b
 8005248:	0800530b 	.word	0x0800530b
 800524c:	0800530b 	.word	0x0800530b
 8005250:	0800530b 	.word	0x0800530b
 8005254:	0800530b 	.word	0x0800530b
 8005258:	0800530b 	.word	0x0800530b
 800525c:	080052d7 	.word	0x080052d7
 8005260:	0800530b 	.word	0x0800530b
 8005264:	0800530b 	.word	0x0800530b
 8005268:	0800530b 	.word	0x0800530b
 800526c:	0800530b 	.word	0x0800530b
 8005270:	0800530b 	.word	0x0800530b
 8005274:	0800530b 	.word	0x0800530b
 8005278:	0800530b 	.word	0x0800530b
 800527c:	0800530b 	.word	0x0800530b
 8005280:	0800530b 	.word	0x0800530b
 8005284:	0800530b 	.word	0x0800530b
 8005288:	0800530b 	.word	0x0800530b
 800528c:	0800530b 	.word	0x0800530b
 8005290:	0800530b 	.word	0x0800530b
 8005294:	0800530b 	.word	0x0800530b
 8005298:	0800530b 	.word	0x0800530b
 800529c:	080052fd 	.word	0x080052fd
 80052a0:	2b40      	cmp	r3, #64	@ 0x40
 80052a2:	d02e      	beq.n	8005302 <UART_SetConfig+0x8aa>
 80052a4:	e031      	b.n	800530a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a6:	f7fd fe77 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 80052aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80052ac:	e033      	b.n	8005316 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ae:	f7fd fe89 	bl	8002fc4 <HAL_RCC_GetPCLK2Freq>
 80052b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80052b4:	e02f      	b.n	8005316 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fd feae 	bl	800301c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052c4:	e027      	b.n	8005316 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052c6:	f107 0318 	add.w	r3, r7, #24
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fd fffa 	bl	80032c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052d4:	e01f      	b.n	8005316 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052d6:	4b2d      	ldr	r3, [pc, #180]	@ (800538c <UART_SetConfig+0x934>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052e2:	4b2a      	ldr	r3, [pc, #168]	@ (800538c <UART_SetConfig+0x934>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	08db      	lsrs	r3, r3, #3
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	4a24      	ldr	r2, [pc, #144]	@ (8005380 <UART_SetConfig+0x928>)
 80052ee:	fa22 f303 	lsr.w	r3, r2, r3
 80052f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052f4:	e00f      	b.n	8005316 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80052f6:	4b22      	ldr	r3, [pc, #136]	@ (8005380 <UART_SetConfig+0x928>)
 80052f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052fa:	e00c      	b.n	8005316 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80052fc:	4b21      	ldr	r3, [pc, #132]	@ (8005384 <UART_SetConfig+0x92c>)
 80052fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005300:	e009      	b.n	8005316 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005308:	e005      	b.n	8005316 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005314:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80e7 	beq.w	80054ec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005322:	4a19      	ldr	r2, [pc, #100]	@ (8005388 <UART_SetConfig+0x930>)
 8005324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005328:	461a      	mov	r2, r3
 800532a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800532c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005330:	005a      	lsls	r2, r3, #1
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	441a      	add	r2, r3
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005342:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005346:	2b0f      	cmp	r3, #15
 8005348:	d916      	bls.n	8005378 <UART_SetConfig+0x920>
 800534a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005350:	d212      	bcs.n	8005378 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005354:	b29b      	uxth	r3, r3
 8005356:	f023 030f 	bic.w	r3, r3, #15
 800535a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800535c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535e:	085b      	lsrs	r3, r3, #1
 8005360:	b29b      	uxth	r3, r3
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	b29a      	uxth	r2, r3
 8005368:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800536a:	4313      	orrs	r3, r2
 800536c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005374:	60da      	str	r2, [r3, #12]
 8005376:	e0b9      	b.n	80054ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800537e:	e0b5      	b.n	80054ec <UART_SetConfig+0xa94>
 8005380:	03d09000 	.word	0x03d09000
 8005384:	003d0900 	.word	0x003d0900
 8005388:	08006818 	.word	0x08006818
 800538c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005390:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005394:	2b20      	cmp	r3, #32
 8005396:	dc49      	bgt.n	800542c <UART_SetConfig+0x9d4>
 8005398:	2b00      	cmp	r3, #0
 800539a:	db7c      	blt.n	8005496 <UART_SetConfig+0xa3e>
 800539c:	2b20      	cmp	r3, #32
 800539e:	d87a      	bhi.n	8005496 <UART_SetConfig+0xa3e>
 80053a0:	a201      	add	r2, pc, #4	@ (adr r2, 80053a8 <UART_SetConfig+0x950>)
 80053a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a6:	bf00      	nop
 80053a8:	08005433 	.word	0x08005433
 80053ac:	0800543b 	.word	0x0800543b
 80053b0:	08005497 	.word	0x08005497
 80053b4:	08005497 	.word	0x08005497
 80053b8:	08005443 	.word	0x08005443
 80053bc:	08005497 	.word	0x08005497
 80053c0:	08005497 	.word	0x08005497
 80053c4:	08005497 	.word	0x08005497
 80053c8:	08005453 	.word	0x08005453
 80053cc:	08005497 	.word	0x08005497
 80053d0:	08005497 	.word	0x08005497
 80053d4:	08005497 	.word	0x08005497
 80053d8:	08005497 	.word	0x08005497
 80053dc:	08005497 	.word	0x08005497
 80053e0:	08005497 	.word	0x08005497
 80053e4:	08005497 	.word	0x08005497
 80053e8:	08005463 	.word	0x08005463
 80053ec:	08005497 	.word	0x08005497
 80053f0:	08005497 	.word	0x08005497
 80053f4:	08005497 	.word	0x08005497
 80053f8:	08005497 	.word	0x08005497
 80053fc:	08005497 	.word	0x08005497
 8005400:	08005497 	.word	0x08005497
 8005404:	08005497 	.word	0x08005497
 8005408:	08005497 	.word	0x08005497
 800540c:	08005497 	.word	0x08005497
 8005410:	08005497 	.word	0x08005497
 8005414:	08005497 	.word	0x08005497
 8005418:	08005497 	.word	0x08005497
 800541c:	08005497 	.word	0x08005497
 8005420:	08005497 	.word	0x08005497
 8005424:	08005497 	.word	0x08005497
 8005428:	08005489 	.word	0x08005489
 800542c:	2b40      	cmp	r3, #64	@ 0x40
 800542e:	d02e      	beq.n	800548e <UART_SetConfig+0xa36>
 8005430:	e031      	b.n	8005496 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005432:	f7fd fdb1 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 8005436:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005438:	e033      	b.n	80054a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800543a:	f7fd fdc3 	bl	8002fc4 <HAL_RCC_GetPCLK2Freq>
 800543e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005440:	e02f      	b.n	80054a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005446:	4618      	mov	r0, r3
 8005448:	f7fd fde8 	bl	800301c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800544c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005450:	e027      	b.n	80054a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005452:	f107 0318 	add.w	r3, r7, #24
 8005456:	4618      	mov	r0, r3
 8005458:	f7fd ff34 	bl	80032c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005460:	e01f      	b.n	80054a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005462:	4b2d      	ldr	r3, [pc, #180]	@ (8005518 <UART_SetConfig+0xac0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800546e:	4b2a      	ldr	r3, [pc, #168]	@ (8005518 <UART_SetConfig+0xac0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	08db      	lsrs	r3, r3, #3
 8005474:	f003 0303 	and.w	r3, r3, #3
 8005478:	4a28      	ldr	r2, [pc, #160]	@ (800551c <UART_SetConfig+0xac4>)
 800547a:	fa22 f303 	lsr.w	r3, r2, r3
 800547e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005480:	e00f      	b.n	80054a2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005482:	4b26      	ldr	r3, [pc, #152]	@ (800551c <UART_SetConfig+0xac4>)
 8005484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005486:	e00c      	b.n	80054a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005488:	4b25      	ldr	r3, [pc, #148]	@ (8005520 <UART_SetConfig+0xac8>)
 800548a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800548c:	e009      	b.n	80054a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800548e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005494:	e005      	b.n	80054a2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80054a0:	bf00      	nop
    }

    if (pclk != 0U)
 80054a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d021      	beq.n	80054ec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005524 <UART_SetConfig+0xacc>)
 80054ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054b2:	461a      	mov	r2, r3
 80054b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	085b      	lsrs	r3, r3, #1
 80054c0:	441a      	add	r2, r3
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ce:	2b0f      	cmp	r3, #15
 80054d0:	d909      	bls.n	80054e6 <UART_SetConfig+0xa8e>
 80054d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054d8:	d205      	bcs.n	80054e6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054dc:	b29a      	uxth	r2, r3
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60da      	str	r2, [r3, #12]
 80054e4:	e002      	b.n	80054ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2200      	movs	r2, #0
 8005500:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2200      	movs	r2, #0
 8005506:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005508:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800550c:	4618      	mov	r0, r3
 800550e:	3748      	adds	r7, #72	@ 0x48
 8005510:	46bd      	mov	sp, r7
 8005512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005516:	bf00      	nop
 8005518:	58024400 	.word	0x58024400
 800551c:	03d09000 	.word	0x03d09000
 8005520:	003d0900 	.word	0x003d0900
 8005524:	08006818 	.word	0x08006818

08005528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00a      	beq.n	80055da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01a      	beq.n	800563e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005626:	d10a      	bne.n	800563e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	605a      	str	r2, [r3, #4]
  }
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b098      	sub	sp, #96	@ 0x60
 8005670:	af02      	add	r7, sp, #8
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800567c:	f7fc f902 	bl	8001884 <HAL_GetTick>
 8005680:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b08      	cmp	r3, #8
 800568e:	d12f      	bne.n	80056f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005690:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005698:	2200      	movs	r2, #0
 800569a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f88e 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d022      	beq.n	80056f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056be:	653b      	str	r3, [r7, #80]	@ 0x50
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	461a      	mov	r2, r3
 80056c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e6      	bne.n	80056aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2220      	movs	r2, #32
 80056e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e063      	b.n	80057b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d149      	bne.n	8005792 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005706:	2200      	movs	r2, #0
 8005708:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f857 	bl	80057c0 <UART_WaitOnFlagUntilTimeout>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d03c      	beq.n	8005792 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	623b      	str	r3, [r7, #32]
   return(result);
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800572c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005736:	633b      	str	r3, [r7, #48]	@ 0x30
 8005738:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800573c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e6      	bne.n	8005718 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	60fb      	str	r3, [r7, #12]
   return(result);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3308      	adds	r3, #8
 8005768:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800576a:	61fa      	str	r2, [r7, #28]
 800576c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576e:	69b9      	ldr	r1, [r7, #24]
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	e841 2300 	strex	r3, r2, [r1]
 8005776:	617b      	str	r3, [r7, #20]
   return(result);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1e5      	bne.n	800574a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e012      	b.n	80057b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3758      	adds	r7, #88	@ 0x58
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	4613      	mov	r3, r2
 80057ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d0:	e04f      	b.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d8:	d04b      	beq.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057da:	f7fc f853 	bl	8001884 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d302      	bcc.n	80057f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d101      	bne.n	80057f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e04e      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d037      	beq.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b80      	cmp	r3, #128	@ 0x80
 8005806:	d034      	beq.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b40      	cmp	r3, #64	@ 0x40
 800580c:	d031      	beq.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b08      	cmp	r3, #8
 800581a:	d110      	bne.n	800583e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2208      	movs	r2, #8
 8005822:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 f839 	bl	800589c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2208      	movs	r2, #8
 800582e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e029      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800584c:	d111      	bne.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005856:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f81f 	bl	800589c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2220      	movs	r2, #32
 8005862:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e00f      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4013      	ands	r3, r2
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	429a      	cmp	r2, r3
 8005880:	bf0c      	ite	eq
 8005882:	2301      	moveq	r3, #1
 8005884:	2300      	movne	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	429a      	cmp	r2, r3
 800588e:	d0a0      	beq.n	80057d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b095      	sub	sp, #84	@ 0x54
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80058c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e6      	bne.n	80058a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3308      	adds	r3, #8
 80058dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005964 <UART_EndRxTransfer+0xc8>)
 80058ea:	4013      	ands	r3, r2
 80058ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3308      	adds	r3, #8
 80058f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058fe:	e841 2300 	strex	r3, r2, [r1]
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e5      	bne.n	80058d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800590e:	2b01      	cmp	r3, #1
 8005910:	d118      	bne.n	8005944 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f023 0310 	bic.w	r3, r3, #16
 8005926:	647b      	str	r3, [r7, #68]	@ 0x44
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6979      	ldr	r1, [r7, #20]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	613b      	str	r3, [r7, #16]
   return(result);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e6      	bne.n	8005912 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2220      	movs	r2, #32
 8005948:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005958:	bf00      	nop
 800595a:	3754      	adds	r7, #84	@ 0x54
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	effffffe 	.word	0xeffffffe

08005968 <std>:
 8005968:	2300      	movs	r3, #0
 800596a:	b510      	push	{r4, lr}
 800596c:	4604      	mov	r4, r0
 800596e:	e9c0 3300 	strd	r3, r3, [r0]
 8005972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005976:	6083      	str	r3, [r0, #8]
 8005978:	8181      	strh	r1, [r0, #12]
 800597a:	6643      	str	r3, [r0, #100]	@ 0x64
 800597c:	81c2      	strh	r2, [r0, #14]
 800597e:	6183      	str	r3, [r0, #24]
 8005980:	4619      	mov	r1, r3
 8005982:	2208      	movs	r2, #8
 8005984:	305c      	adds	r0, #92	@ 0x5c
 8005986:	f000 f906 	bl	8005b96 <memset>
 800598a:	4b0d      	ldr	r3, [pc, #52]	@ (80059c0 <std+0x58>)
 800598c:	6263      	str	r3, [r4, #36]	@ 0x24
 800598e:	4b0d      	ldr	r3, [pc, #52]	@ (80059c4 <std+0x5c>)
 8005990:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005992:	4b0d      	ldr	r3, [pc, #52]	@ (80059c8 <std+0x60>)
 8005994:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005996:	4b0d      	ldr	r3, [pc, #52]	@ (80059cc <std+0x64>)
 8005998:	6323      	str	r3, [r4, #48]	@ 0x30
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <std+0x68>)
 800599c:	6224      	str	r4, [r4, #32]
 800599e:	429c      	cmp	r4, r3
 80059a0:	d006      	beq.n	80059b0 <std+0x48>
 80059a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059a6:	4294      	cmp	r4, r2
 80059a8:	d002      	beq.n	80059b0 <std+0x48>
 80059aa:	33d0      	adds	r3, #208	@ 0xd0
 80059ac:	429c      	cmp	r4, r3
 80059ae:	d105      	bne.n	80059bc <std+0x54>
 80059b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b8:	f000 b966 	b.w	8005c88 <__retarget_lock_init_recursive>
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	bf00      	nop
 80059c0:	08005b11 	.word	0x08005b11
 80059c4:	08005b33 	.word	0x08005b33
 80059c8:	08005b6b 	.word	0x08005b6b
 80059cc:	08005b8f 	.word	0x08005b8f
 80059d0:	24000244 	.word	0x24000244

080059d4 <stdio_exit_handler>:
 80059d4:	4a02      	ldr	r2, [pc, #8]	@ (80059e0 <stdio_exit_handler+0xc>)
 80059d6:	4903      	ldr	r1, [pc, #12]	@ (80059e4 <stdio_exit_handler+0x10>)
 80059d8:	4803      	ldr	r0, [pc, #12]	@ (80059e8 <stdio_exit_handler+0x14>)
 80059da:	f000 b869 	b.w	8005ab0 <_fwalk_sglue>
 80059de:	bf00      	nop
 80059e0:	2400002c 	.word	0x2400002c
 80059e4:	08006529 	.word	0x08006529
 80059e8:	2400003c 	.word	0x2400003c

080059ec <cleanup_stdio>:
 80059ec:	6841      	ldr	r1, [r0, #4]
 80059ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005a20 <cleanup_stdio+0x34>)
 80059f0:	4299      	cmp	r1, r3
 80059f2:	b510      	push	{r4, lr}
 80059f4:	4604      	mov	r4, r0
 80059f6:	d001      	beq.n	80059fc <cleanup_stdio+0x10>
 80059f8:	f000 fd96 	bl	8006528 <_fflush_r>
 80059fc:	68a1      	ldr	r1, [r4, #8]
 80059fe:	4b09      	ldr	r3, [pc, #36]	@ (8005a24 <cleanup_stdio+0x38>)
 8005a00:	4299      	cmp	r1, r3
 8005a02:	d002      	beq.n	8005a0a <cleanup_stdio+0x1e>
 8005a04:	4620      	mov	r0, r4
 8005a06:	f000 fd8f 	bl	8006528 <_fflush_r>
 8005a0a:	68e1      	ldr	r1, [r4, #12]
 8005a0c:	4b06      	ldr	r3, [pc, #24]	@ (8005a28 <cleanup_stdio+0x3c>)
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	d004      	beq.n	8005a1c <cleanup_stdio+0x30>
 8005a12:	4620      	mov	r0, r4
 8005a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a18:	f000 bd86 	b.w	8006528 <_fflush_r>
 8005a1c:	bd10      	pop	{r4, pc}
 8005a1e:	bf00      	nop
 8005a20:	24000244 	.word	0x24000244
 8005a24:	240002ac 	.word	0x240002ac
 8005a28:	24000314 	.word	0x24000314

08005a2c <global_stdio_init.part.0>:
 8005a2c:	b510      	push	{r4, lr}
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a5c <global_stdio_init.part.0+0x30>)
 8005a30:	4c0b      	ldr	r4, [pc, #44]	@ (8005a60 <global_stdio_init.part.0+0x34>)
 8005a32:	4a0c      	ldr	r2, [pc, #48]	@ (8005a64 <global_stdio_init.part.0+0x38>)
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	4620      	mov	r0, r4
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2104      	movs	r1, #4
 8005a3c:	f7ff ff94 	bl	8005968 <std>
 8005a40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a44:	2201      	movs	r2, #1
 8005a46:	2109      	movs	r1, #9
 8005a48:	f7ff ff8e 	bl	8005968 <std>
 8005a4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a50:	2202      	movs	r2, #2
 8005a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a56:	2112      	movs	r1, #18
 8005a58:	f7ff bf86 	b.w	8005968 <std>
 8005a5c:	2400037c 	.word	0x2400037c
 8005a60:	24000244 	.word	0x24000244
 8005a64:	080059d5 	.word	0x080059d5

08005a68 <__sfp_lock_acquire>:
 8005a68:	4801      	ldr	r0, [pc, #4]	@ (8005a70 <__sfp_lock_acquire+0x8>)
 8005a6a:	f000 b90e 	b.w	8005c8a <__retarget_lock_acquire_recursive>
 8005a6e:	bf00      	nop
 8005a70:	24000385 	.word	0x24000385

08005a74 <__sfp_lock_release>:
 8005a74:	4801      	ldr	r0, [pc, #4]	@ (8005a7c <__sfp_lock_release+0x8>)
 8005a76:	f000 b909 	b.w	8005c8c <__retarget_lock_release_recursive>
 8005a7a:	bf00      	nop
 8005a7c:	24000385 	.word	0x24000385

08005a80 <__sinit>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	4604      	mov	r4, r0
 8005a84:	f7ff fff0 	bl	8005a68 <__sfp_lock_acquire>
 8005a88:	6a23      	ldr	r3, [r4, #32]
 8005a8a:	b11b      	cbz	r3, 8005a94 <__sinit+0x14>
 8005a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a90:	f7ff bff0 	b.w	8005a74 <__sfp_lock_release>
 8005a94:	4b04      	ldr	r3, [pc, #16]	@ (8005aa8 <__sinit+0x28>)
 8005a96:	6223      	str	r3, [r4, #32]
 8005a98:	4b04      	ldr	r3, [pc, #16]	@ (8005aac <__sinit+0x2c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f5      	bne.n	8005a8c <__sinit+0xc>
 8005aa0:	f7ff ffc4 	bl	8005a2c <global_stdio_init.part.0>
 8005aa4:	e7f2      	b.n	8005a8c <__sinit+0xc>
 8005aa6:	bf00      	nop
 8005aa8:	080059ed 	.word	0x080059ed
 8005aac:	2400037c 	.word	0x2400037c

08005ab0 <_fwalk_sglue>:
 8005ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	4688      	mov	r8, r1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	2600      	movs	r6, #0
 8005abc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ac0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ac4:	d505      	bpl.n	8005ad2 <_fwalk_sglue+0x22>
 8005ac6:	6824      	ldr	r4, [r4, #0]
 8005ac8:	2c00      	cmp	r4, #0
 8005aca:	d1f7      	bne.n	8005abc <_fwalk_sglue+0xc>
 8005acc:	4630      	mov	r0, r6
 8005ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ad2:	89ab      	ldrh	r3, [r5, #12]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d907      	bls.n	8005ae8 <_fwalk_sglue+0x38>
 8005ad8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005adc:	3301      	adds	r3, #1
 8005ade:	d003      	beq.n	8005ae8 <_fwalk_sglue+0x38>
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	47c0      	blx	r8
 8005ae6:	4306      	orrs	r6, r0
 8005ae8:	3568      	adds	r5, #104	@ 0x68
 8005aea:	e7e9      	b.n	8005ac0 <_fwalk_sglue+0x10>

08005aec <iprintf>:
 8005aec:	b40f      	push	{r0, r1, r2, r3}
 8005aee:	b507      	push	{r0, r1, r2, lr}
 8005af0:	4906      	ldr	r1, [pc, #24]	@ (8005b0c <iprintf+0x20>)
 8005af2:	ab04      	add	r3, sp, #16
 8005af4:	6808      	ldr	r0, [r1, #0]
 8005af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005afa:	6881      	ldr	r1, [r0, #8]
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	f000 f9e9 	bl	8005ed4 <_vfiprintf_r>
 8005b02:	b003      	add	sp, #12
 8005b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b08:	b004      	add	sp, #16
 8005b0a:	4770      	bx	lr
 8005b0c:	24000038 	.word	0x24000038

08005b10 <__sread>:
 8005b10:	b510      	push	{r4, lr}
 8005b12:	460c      	mov	r4, r1
 8005b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b18:	f000 f868 	bl	8005bec <_read_r>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	bfab      	itete	ge
 8005b20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b22:	89a3      	ldrhlt	r3, [r4, #12]
 8005b24:	181b      	addge	r3, r3, r0
 8005b26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b2a:	bfac      	ite	ge
 8005b2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b2e:	81a3      	strhlt	r3, [r4, #12]
 8005b30:	bd10      	pop	{r4, pc}

08005b32 <__swrite>:
 8005b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b36:	461f      	mov	r7, r3
 8005b38:	898b      	ldrh	r3, [r1, #12]
 8005b3a:	05db      	lsls	r3, r3, #23
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	460c      	mov	r4, r1
 8005b40:	4616      	mov	r6, r2
 8005b42:	d505      	bpl.n	8005b50 <__swrite+0x1e>
 8005b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b48:	2302      	movs	r3, #2
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f000 f83c 	bl	8005bc8 <_lseek_r>
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b5a:	81a3      	strh	r3, [r4, #12]
 8005b5c:	4632      	mov	r2, r6
 8005b5e:	463b      	mov	r3, r7
 8005b60:	4628      	mov	r0, r5
 8005b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b66:	f000 b853 	b.w	8005c10 <_write_r>

08005b6a <__sseek>:
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b72:	f000 f829 	bl	8005bc8 <_lseek_r>
 8005b76:	1c43      	adds	r3, r0, #1
 8005b78:	89a3      	ldrh	r3, [r4, #12]
 8005b7a:	bf15      	itete	ne
 8005b7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b86:	81a3      	strheq	r3, [r4, #12]
 8005b88:	bf18      	it	ne
 8005b8a:	81a3      	strhne	r3, [r4, #12]
 8005b8c:	bd10      	pop	{r4, pc}

08005b8e <__sclose>:
 8005b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b92:	f000 b809 	b.w	8005ba8 <_close_r>

08005b96 <memset>:
 8005b96:	4402      	add	r2, r0
 8005b98:	4603      	mov	r3, r0
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d100      	bne.n	8005ba0 <memset+0xa>
 8005b9e:	4770      	bx	lr
 8005ba0:	f803 1b01 	strb.w	r1, [r3], #1
 8005ba4:	e7f9      	b.n	8005b9a <memset+0x4>
	...

08005ba8 <_close_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4d06      	ldr	r5, [pc, #24]	@ (8005bc4 <_close_r+0x1c>)
 8005bac:	2300      	movs	r3, #0
 8005bae:	4604      	mov	r4, r0
 8005bb0:	4608      	mov	r0, r1
 8005bb2:	602b      	str	r3, [r5, #0]
 8005bb4:	f7fb fb5a 	bl	800126c <_close>
 8005bb8:	1c43      	adds	r3, r0, #1
 8005bba:	d102      	bne.n	8005bc2 <_close_r+0x1a>
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	b103      	cbz	r3, 8005bc2 <_close_r+0x1a>
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	bd38      	pop	{r3, r4, r5, pc}
 8005bc4:	24000380 	.word	0x24000380

08005bc8 <_lseek_r>:
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4d07      	ldr	r5, [pc, #28]	@ (8005be8 <_lseek_r+0x20>)
 8005bcc:	4604      	mov	r4, r0
 8005bce:	4608      	mov	r0, r1
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	602a      	str	r2, [r5, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	f7fb fb6f 	bl	80012ba <_lseek>
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	d102      	bne.n	8005be6 <_lseek_r+0x1e>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	b103      	cbz	r3, 8005be6 <_lseek_r+0x1e>
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	bd38      	pop	{r3, r4, r5, pc}
 8005be8:	24000380 	.word	0x24000380

08005bec <_read_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4d07      	ldr	r5, [pc, #28]	@ (8005c0c <_read_r+0x20>)
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	4608      	mov	r0, r1
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	602a      	str	r2, [r5, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f7fb fafd 	bl	80011fa <_read>
 8005c00:	1c43      	adds	r3, r0, #1
 8005c02:	d102      	bne.n	8005c0a <_read_r+0x1e>
 8005c04:	682b      	ldr	r3, [r5, #0]
 8005c06:	b103      	cbz	r3, 8005c0a <_read_r+0x1e>
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	bd38      	pop	{r3, r4, r5, pc}
 8005c0c:	24000380 	.word	0x24000380

08005c10 <_write_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d07      	ldr	r5, [pc, #28]	@ (8005c30 <_write_r+0x20>)
 8005c14:	4604      	mov	r4, r0
 8005c16:	4608      	mov	r0, r1
 8005c18:	4611      	mov	r1, r2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	602a      	str	r2, [r5, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	f7fb fb08 	bl	8001234 <_write>
 8005c24:	1c43      	adds	r3, r0, #1
 8005c26:	d102      	bne.n	8005c2e <_write_r+0x1e>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	b103      	cbz	r3, 8005c2e <_write_r+0x1e>
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	bd38      	pop	{r3, r4, r5, pc}
 8005c30:	24000380 	.word	0x24000380

08005c34 <__errno>:
 8005c34:	4b01      	ldr	r3, [pc, #4]	@ (8005c3c <__errno+0x8>)
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	24000038 	.word	0x24000038

08005c40 <__libc_init_array>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	4d0d      	ldr	r5, [pc, #52]	@ (8005c78 <__libc_init_array+0x38>)
 8005c44:	4c0d      	ldr	r4, [pc, #52]	@ (8005c7c <__libc_init_array+0x3c>)
 8005c46:	1b64      	subs	r4, r4, r5
 8005c48:	10a4      	asrs	r4, r4, #2
 8005c4a:	2600      	movs	r6, #0
 8005c4c:	42a6      	cmp	r6, r4
 8005c4e:	d109      	bne.n	8005c64 <__libc_init_array+0x24>
 8005c50:	4d0b      	ldr	r5, [pc, #44]	@ (8005c80 <__libc_init_array+0x40>)
 8005c52:	4c0c      	ldr	r4, [pc, #48]	@ (8005c84 <__libc_init_array+0x44>)
 8005c54:	f000 fdb8 	bl	80067c8 <_init>
 8005c58:	1b64      	subs	r4, r4, r5
 8005c5a:	10a4      	asrs	r4, r4, #2
 8005c5c:	2600      	movs	r6, #0
 8005c5e:	42a6      	cmp	r6, r4
 8005c60:	d105      	bne.n	8005c6e <__libc_init_array+0x2e>
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c68:	4798      	blx	r3
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7ee      	b.n	8005c4c <__libc_init_array+0xc>
 8005c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c72:	4798      	blx	r3
 8005c74:	3601      	adds	r6, #1
 8005c76:	e7f2      	b.n	8005c5e <__libc_init_array+0x1e>
 8005c78:	0800686c 	.word	0x0800686c
 8005c7c:	0800686c 	.word	0x0800686c
 8005c80:	0800686c 	.word	0x0800686c
 8005c84:	08006870 	.word	0x08006870

08005c88 <__retarget_lock_init_recursive>:
 8005c88:	4770      	bx	lr

08005c8a <__retarget_lock_acquire_recursive>:
 8005c8a:	4770      	bx	lr

08005c8c <__retarget_lock_release_recursive>:
 8005c8c:	4770      	bx	lr
	...

08005c90 <_free_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	4605      	mov	r5, r0
 8005c94:	2900      	cmp	r1, #0
 8005c96:	d041      	beq.n	8005d1c <_free_r+0x8c>
 8005c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c9c:	1f0c      	subs	r4, r1, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bfb8      	it	lt
 8005ca2:	18e4      	addlt	r4, r4, r3
 8005ca4:	f000 f8e0 	bl	8005e68 <__malloc_lock>
 8005ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d20 <_free_r+0x90>)
 8005caa:	6813      	ldr	r3, [r2, #0]
 8005cac:	b933      	cbnz	r3, 8005cbc <_free_r+0x2c>
 8005cae:	6063      	str	r3, [r4, #4]
 8005cb0:	6014      	str	r4, [r2, #0]
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cb8:	f000 b8dc 	b.w	8005e74 <__malloc_unlock>
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	d908      	bls.n	8005cd2 <_free_r+0x42>
 8005cc0:	6820      	ldr	r0, [r4, #0]
 8005cc2:	1821      	adds	r1, r4, r0
 8005cc4:	428b      	cmp	r3, r1
 8005cc6:	bf01      	itttt	eq
 8005cc8:	6819      	ldreq	r1, [r3, #0]
 8005cca:	685b      	ldreq	r3, [r3, #4]
 8005ccc:	1809      	addeq	r1, r1, r0
 8005cce:	6021      	streq	r1, [r4, #0]
 8005cd0:	e7ed      	b.n	8005cae <_free_r+0x1e>
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	b10b      	cbz	r3, 8005cdc <_free_r+0x4c>
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	d9fa      	bls.n	8005cd2 <_free_r+0x42>
 8005cdc:	6811      	ldr	r1, [r2, #0]
 8005cde:	1850      	adds	r0, r2, r1
 8005ce0:	42a0      	cmp	r0, r4
 8005ce2:	d10b      	bne.n	8005cfc <_free_r+0x6c>
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	4401      	add	r1, r0
 8005ce8:	1850      	adds	r0, r2, r1
 8005cea:	4283      	cmp	r3, r0
 8005cec:	6011      	str	r1, [r2, #0]
 8005cee:	d1e0      	bne.n	8005cb2 <_free_r+0x22>
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	6053      	str	r3, [r2, #4]
 8005cf6:	4408      	add	r0, r1
 8005cf8:	6010      	str	r0, [r2, #0]
 8005cfa:	e7da      	b.n	8005cb2 <_free_r+0x22>
 8005cfc:	d902      	bls.n	8005d04 <_free_r+0x74>
 8005cfe:	230c      	movs	r3, #12
 8005d00:	602b      	str	r3, [r5, #0]
 8005d02:	e7d6      	b.n	8005cb2 <_free_r+0x22>
 8005d04:	6820      	ldr	r0, [r4, #0]
 8005d06:	1821      	adds	r1, r4, r0
 8005d08:	428b      	cmp	r3, r1
 8005d0a:	bf04      	itt	eq
 8005d0c:	6819      	ldreq	r1, [r3, #0]
 8005d0e:	685b      	ldreq	r3, [r3, #4]
 8005d10:	6063      	str	r3, [r4, #4]
 8005d12:	bf04      	itt	eq
 8005d14:	1809      	addeq	r1, r1, r0
 8005d16:	6021      	streq	r1, [r4, #0]
 8005d18:	6054      	str	r4, [r2, #4]
 8005d1a:	e7ca      	b.n	8005cb2 <_free_r+0x22>
 8005d1c:	bd38      	pop	{r3, r4, r5, pc}
 8005d1e:	bf00      	nop
 8005d20:	2400038c 	.word	0x2400038c

08005d24 <sbrk_aligned>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	4e0f      	ldr	r6, [pc, #60]	@ (8005d64 <sbrk_aligned+0x40>)
 8005d28:	460c      	mov	r4, r1
 8005d2a:	6831      	ldr	r1, [r6, #0]
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	b911      	cbnz	r1, 8005d36 <sbrk_aligned+0x12>
 8005d30:	f000 fcb6 	bl	80066a0 <_sbrk_r>
 8005d34:	6030      	str	r0, [r6, #0]
 8005d36:	4621      	mov	r1, r4
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f000 fcb1 	bl	80066a0 <_sbrk_r>
 8005d3e:	1c43      	adds	r3, r0, #1
 8005d40:	d103      	bne.n	8005d4a <sbrk_aligned+0x26>
 8005d42:	f04f 34ff 	mov.w	r4, #4294967295
 8005d46:	4620      	mov	r0, r4
 8005d48:	bd70      	pop	{r4, r5, r6, pc}
 8005d4a:	1cc4      	adds	r4, r0, #3
 8005d4c:	f024 0403 	bic.w	r4, r4, #3
 8005d50:	42a0      	cmp	r0, r4
 8005d52:	d0f8      	beq.n	8005d46 <sbrk_aligned+0x22>
 8005d54:	1a21      	subs	r1, r4, r0
 8005d56:	4628      	mov	r0, r5
 8005d58:	f000 fca2 	bl	80066a0 <_sbrk_r>
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d1f2      	bne.n	8005d46 <sbrk_aligned+0x22>
 8005d60:	e7ef      	b.n	8005d42 <sbrk_aligned+0x1e>
 8005d62:	bf00      	nop
 8005d64:	24000388 	.word	0x24000388

08005d68 <_malloc_r>:
 8005d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d6c:	1ccd      	adds	r5, r1, #3
 8005d6e:	f025 0503 	bic.w	r5, r5, #3
 8005d72:	3508      	adds	r5, #8
 8005d74:	2d0c      	cmp	r5, #12
 8005d76:	bf38      	it	cc
 8005d78:	250c      	movcc	r5, #12
 8005d7a:	2d00      	cmp	r5, #0
 8005d7c:	4606      	mov	r6, r0
 8005d7e:	db01      	blt.n	8005d84 <_malloc_r+0x1c>
 8005d80:	42a9      	cmp	r1, r5
 8005d82:	d904      	bls.n	8005d8e <_malloc_r+0x26>
 8005d84:	230c      	movs	r3, #12
 8005d86:	6033      	str	r3, [r6, #0]
 8005d88:	2000      	movs	r0, #0
 8005d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e64 <_malloc_r+0xfc>
 8005d92:	f000 f869 	bl	8005e68 <__malloc_lock>
 8005d96:	f8d8 3000 	ldr.w	r3, [r8]
 8005d9a:	461c      	mov	r4, r3
 8005d9c:	bb44      	cbnz	r4, 8005df0 <_malloc_r+0x88>
 8005d9e:	4629      	mov	r1, r5
 8005da0:	4630      	mov	r0, r6
 8005da2:	f7ff ffbf 	bl	8005d24 <sbrk_aligned>
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	4604      	mov	r4, r0
 8005daa:	d158      	bne.n	8005e5e <_malloc_r+0xf6>
 8005dac:	f8d8 4000 	ldr.w	r4, [r8]
 8005db0:	4627      	mov	r7, r4
 8005db2:	2f00      	cmp	r7, #0
 8005db4:	d143      	bne.n	8005e3e <_malloc_r+0xd6>
 8005db6:	2c00      	cmp	r4, #0
 8005db8:	d04b      	beq.n	8005e52 <_malloc_r+0xea>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	4639      	mov	r1, r7
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	eb04 0903 	add.w	r9, r4, r3
 8005dc4:	f000 fc6c 	bl	80066a0 <_sbrk_r>
 8005dc8:	4581      	cmp	r9, r0
 8005dca:	d142      	bne.n	8005e52 <_malloc_r+0xea>
 8005dcc:	6821      	ldr	r1, [r4, #0]
 8005dce:	1a6d      	subs	r5, r5, r1
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f7ff ffa6 	bl	8005d24 <sbrk_aligned>
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d03a      	beq.n	8005e52 <_malloc_r+0xea>
 8005ddc:	6823      	ldr	r3, [r4, #0]
 8005dde:	442b      	add	r3, r5
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	f8d8 3000 	ldr.w	r3, [r8]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	bb62      	cbnz	r2, 8005e44 <_malloc_r+0xdc>
 8005dea:	f8c8 7000 	str.w	r7, [r8]
 8005dee:	e00f      	b.n	8005e10 <_malloc_r+0xa8>
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	1b52      	subs	r2, r2, r5
 8005df4:	d420      	bmi.n	8005e38 <_malloc_r+0xd0>
 8005df6:	2a0b      	cmp	r2, #11
 8005df8:	d917      	bls.n	8005e2a <_malloc_r+0xc2>
 8005dfa:	1961      	adds	r1, r4, r5
 8005dfc:	42a3      	cmp	r3, r4
 8005dfe:	6025      	str	r5, [r4, #0]
 8005e00:	bf18      	it	ne
 8005e02:	6059      	strne	r1, [r3, #4]
 8005e04:	6863      	ldr	r3, [r4, #4]
 8005e06:	bf08      	it	eq
 8005e08:	f8c8 1000 	streq.w	r1, [r8]
 8005e0c:	5162      	str	r2, [r4, r5]
 8005e0e:	604b      	str	r3, [r1, #4]
 8005e10:	4630      	mov	r0, r6
 8005e12:	f000 f82f 	bl	8005e74 <__malloc_unlock>
 8005e16:	f104 000b 	add.w	r0, r4, #11
 8005e1a:	1d23      	adds	r3, r4, #4
 8005e1c:	f020 0007 	bic.w	r0, r0, #7
 8005e20:	1ac2      	subs	r2, r0, r3
 8005e22:	bf1c      	itt	ne
 8005e24:	1a1b      	subne	r3, r3, r0
 8005e26:	50a3      	strne	r3, [r4, r2]
 8005e28:	e7af      	b.n	8005d8a <_malloc_r+0x22>
 8005e2a:	6862      	ldr	r2, [r4, #4]
 8005e2c:	42a3      	cmp	r3, r4
 8005e2e:	bf0c      	ite	eq
 8005e30:	f8c8 2000 	streq.w	r2, [r8]
 8005e34:	605a      	strne	r2, [r3, #4]
 8005e36:	e7eb      	b.n	8005e10 <_malloc_r+0xa8>
 8005e38:	4623      	mov	r3, r4
 8005e3a:	6864      	ldr	r4, [r4, #4]
 8005e3c:	e7ae      	b.n	8005d9c <_malloc_r+0x34>
 8005e3e:	463c      	mov	r4, r7
 8005e40:	687f      	ldr	r7, [r7, #4]
 8005e42:	e7b6      	b.n	8005db2 <_malloc_r+0x4a>
 8005e44:	461a      	mov	r2, r3
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	42a3      	cmp	r3, r4
 8005e4a:	d1fb      	bne.n	8005e44 <_malloc_r+0xdc>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	6053      	str	r3, [r2, #4]
 8005e50:	e7de      	b.n	8005e10 <_malloc_r+0xa8>
 8005e52:	230c      	movs	r3, #12
 8005e54:	6033      	str	r3, [r6, #0]
 8005e56:	4630      	mov	r0, r6
 8005e58:	f000 f80c 	bl	8005e74 <__malloc_unlock>
 8005e5c:	e794      	b.n	8005d88 <_malloc_r+0x20>
 8005e5e:	6005      	str	r5, [r0, #0]
 8005e60:	e7d6      	b.n	8005e10 <_malloc_r+0xa8>
 8005e62:	bf00      	nop
 8005e64:	2400038c 	.word	0x2400038c

08005e68 <__malloc_lock>:
 8005e68:	4801      	ldr	r0, [pc, #4]	@ (8005e70 <__malloc_lock+0x8>)
 8005e6a:	f7ff bf0e 	b.w	8005c8a <__retarget_lock_acquire_recursive>
 8005e6e:	bf00      	nop
 8005e70:	24000384 	.word	0x24000384

08005e74 <__malloc_unlock>:
 8005e74:	4801      	ldr	r0, [pc, #4]	@ (8005e7c <__malloc_unlock+0x8>)
 8005e76:	f7ff bf09 	b.w	8005c8c <__retarget_lock_release_recursive>
 8005e7a:	bf00      	nop
 8005e7c:	24000384 	.word	0x24000384

08005e80 <__sfputc_r>:
 8005e80:	6893      	ldr	r3, [r2, #8]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	b410      	push	{r4}
 8005e88:	6093      	str	r3, [r2, #8]
 8005e8a:	da08      	bge.n	8005e9e <__sfputc_r+0x1e>
 8005e8c:	6994      	ldr	r4, [r2, #24]
 8005e8e:	42a3      	cmp	r3, r4
 8005e90:	db01      	blt.n	8005e96 <__sfputc_r+0x16>
 8005e92:	290a      	cmp	r1, #10
 8005e94:	d103      	bne.n	8005e9e <__sfputc_r+0x1e>
 8005e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e9a:	f000 bb6d 	b.w	8006578 <__swbuf_r>
 8005e9e:	6813      	ldr	r3, [r2, #0]
 8005ea0:	1c58      	adds	r0, r3, #1
 8005ea2:	6010      	str	r0, [r2, #0]
 8005ea4:	7019      	strb	r1, [r3, #0]
 8005ea6:	4608      	mov	r0, r1
 8005ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <__sfputs_r>:
 8005eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb0:	4606      	mov	r6, r0
 8005eb2:	460f      	mov	r7, r1
 8005eb4:	4614      	mov	r4, r2
 8005eb6:	18d5      	adds	r5, r2, r3
 8005eb8:	42ac      	cmp	r4, r5
 8005eba:	d101      	bne.n	8005ec0 <__sfputs_r+0x12>
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	e007      	b.n	8005ed0 <__sfputs_r+0x22>
 8005ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ec4:	463a      	mov	r2, r7
 8005ec6:	4630      	mov	r0, r6
 8005ec8:	f7ff ffda 	bl	8005e80 <__sfputc_r>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d1f3      	bne.n	8005eb8 <__sfputs_r+0xa>
 8005ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ed4 <_vfiprintf_r>:
 8005ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed8:	460d      	mov	r5, r1
 8005eda:	b09d      	sub	sp, #116	@ 0x74
 8005edc:	4614      	mov	r4, r2
 8005ede:	4698      	mov	r8, r3
 8005ee0:	4606      	mov	r6, r0
 8005ee2:	b118      	cbz	r0, 8005eec <_vfiprintf_r+0x18>
 8005ee4:	6a03      	ldr	r3, [r0, #32]
 8005ee6:	b90b      	cbnz	r3, 8005eec <_vfiprintf_r+0x18>
 8005ee8:	f7ff fdca 	bl	8005a80 <__sinit>
 8005eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005eee:	07d9      	lsls	r1, r3, #31
 8005ef0:	d405      	bmi.n	8005efe <_vfiprintf_r+0x2a>
 8005ef2:	89ab      	ldrh	r3, [r5, #12]
 8005ef4:	059a      	lsls	r2, r3, #22
 8005ef6:	d402      	bmi.n	8005efe <_vfiprintf_r+0x2a>
 8005ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005efa:	f7ff fec6 	bl	8005c8a <__retarget_lock_acquire_recursive>
 8005efe:	89ab      	ldrh	r3, [r5, #12]
 8005f00:	071b      	lsls	r3, r3, #28
 8005f02:	d501      	bpl.n	8005f08 <_vfiprintf_r+0x34>
 8005f04:	692b      	ldr	r3, [r5, #16]
 8005f06:	b99b      	cbnz	r3, 8005f30 <_vfiprintf_r+0x5c>
 8005f08:	4629      	mov	r1, r5
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	f000 fb72 	bl	80065f4 <__swsetup_r>
 8005f10:	b170      	cbz	r0, 8005f30 <_vfiprintf_r+0x5c>
 8005f12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f14:	07dc      	lsls	r4, r3, #31
 8005f16:	d504      	bpl.n	8005f22 <_vfiprintf_r+0x4e>
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	b01d      	add	sp, #116	@ 0x74
 8005f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f22:	89ab      	ldrh	r3, [r5, #12]
 8005f24:	0598      	lsls	r0, r3, #22
 8005f26:	d4f7      	bmi.n	8005f18 <_vfiprintf_r+0x44>
 8005f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f2a:	f7ff feaf 	bl	8005c8c <__retarget_lock_release_recursive>
 8005f2e:	e7f3      	b.n	8005f18 <_vfiprintf_r+0x44>
 8005f30:	2300      	movs	r3, #0
 8005f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f34:	2320      	movs	r3, #32
 8005f36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f3e:	2330      	movs	r3, #48	@ 0x30
 8005f40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80060f0 <_vfiprintf_r+0x21c>
 8005f44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f48:	f04f 0901 	mov.w	r9, #1
 8005f4c:	4623      	mov	r3, r4
 8005f4e:	469a      	mov	sl, r3
 8005f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f54:	b10a      	cbz	r2, 8005f5a <_vfiprintf_r+0x86>
 8005f56:	2a25      	cmp	r2, #37	@ 0x25
 8005f58:	d1f9      	bne.n	8005f4e <_vfiprintf_r+0x7a>
 8005f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8005f5e:	d00b      	beq.n	8005f78 <_vfiprintf_r+0xa4>
 8005f60:	465b      	mov	r3, fp
 8005f62:	4622      	mov	r2, r4
 8005f64:	4629      	mov	r1, r5
 8005f66:	4630      	mov	r0, r6
 8005f68:	f7ff ffa1 	bl	8005eae <__sfputs_r>
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	f000 80a7 	beq.w	80060c0 <_vfiprintf_r+0x1ec>
 8005f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f74:	445a      	add	r2, fp
 8005f76:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f78:	f89a 3000 	ldrb.w	r3, [sl]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 809f 	beq.w	80060c0 <_vfiprintf_r+0x1ec>
 8005f82:	2300      	movs	r3, #0
 8005f84:	f04f 32ff 	mov.w	r2, #4294967295
 8005f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f8c:	f10a 0a01 	add.w	sl, sl, #1
 8005f90:	9304      	str	r3, [sp, #16]
 8005f92:	9307      	str	r3, [sp, #28]
 8005f94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f98:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f9a:	4654      	mov	r4, sl
 8005f9c:	2205      	movs	r2, #5
 8005f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fa2:	4853      	ldr	r0, [pc, #332]	@ (80060f0 <_vfiprintf_r+0x21c>)
 8005fa4:	f7fa f99c 	bl	80002e0 <memchr>
 8005fa8:	9a04      	ldr	r2, [sp, #16]
 8005faa:	b9d8      	cbnz	r0, 8005fe4 <_vfiprintf_r+0x110>
 8005fac:	06d1      	lsls	r1, r2, #27
 8005fae:	bf44      	itt	mi
 8005fb0:	2320      	movmi	r3, #32
 8005fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fb6:	0713      	lsls	r3, r2, #28
 8005fb8:	bf44      	itt	mi
 8005fba:	232b      	movmi	r3, #43	@ 0x2b
 8005fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8005fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fc6:	d015      	beq.n	8005ff4 <_vfiprintf_r+0x120>
 8005fc8:	9a07      	ldr	r2, [sp, #28]
 8005fca:	4654      	mov	r4, sl
 8005fcc:	2000      	movs	r0, #0
 8005fce:	f04f 0c0a 	mov.w	ip, #10
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fd8:	3b30      	subs	r3, #48	@ 0x30
 8005fda:	2b09      	cmp	r3, #9
 8005fdc:	d94b      	bls.n	8006076 <_vfiprintf_r+0x1a2>
 8005fde:	b1b0      	cbz	r0, 800600e <_vfiprintf_r+0x13a>
 8005fe0:	9207      	str	r2, [sp, #28]
 8005fe2:	e014      	b.n	800600e <_vfiprintf_r+0x13a>
 8005fe4:	eba0 0308 	sub.w	r3, r0, r8
 8005fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8005fec:	4313      	orrs	r3, r2
 8005fee:	9304      	str	r3, [sp, #16]
 8005ff0:	46a2      	mov	sl, r4
 8005ff2:	e7d2      	b.n	8005f9a <_vfiprintf_r+0xc6>
 8005ff4:	9b03      	ldr	r3, [sp, #12]
 8005ff6:	1d19      	adds	r1, r3, #4
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	9103      	str	r1, [sp, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bfbb      	ittet	lt
 8006000:	425b      	neglt	r3, r3
 8006002:	f042 0202 	orrlt.w	r2, r2, #2
 8006006:	9307      	strge	r3, [sp, #28]
 8006008:	9307      	strlt	r3, [sp, #28]
 800600a:	bfb8      	it	lt
 800600c:	9204      	strlt	r2, [sp, #16]
 800600e:	7823      	ldrb	r3, [r4, #0]
 8006010:	2b2e      	cmp	r3, #46	@ 0x2e
 8006012:	d10a      	bne.n	800602a <_vfiprintf_r+0x156>
 8006014:	7863      	ldrb	r3, [r4, #1]
 8006016:	2b2a      	cmp	r3, #42	@ 0x2a
 8006018:	d132      	bne.n	8006080 <_vfiprintf_r+0x1ac>
 800601a:	9b03      	ldr	r3, [sp, #12]
 800601c:	1d1a      	adds	r2, r3, #4
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	9203      	str	r2, [sp, #12]
 8006022:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006026:	3402      	adds	r4, #2
 8006028:	9305      	str	r3, [sp, #20]
 800602a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006100 <_vfiprintf_r+0x22c>
 800602e:	7821      	ldrb	r1, [r4, #0]
 8006030:	2203      	movs	r2, #3
 8006032:	4650      	mov	r0, sl
 8006034:	f7fa f954 	bl	80002e0 <memchr>
 8006038:	b138      	cbz	r0, 800604a <_vfiprintf_r+0x176>
 800603a:	9b04      	ldr	r3, [sp, #16]
 800603c:	eba0 000a 	sub.w	r0, r0, sl
 8006040:	2240      	movs	r2, #64	@ 0x40
 8006042:	4082      	lsls	r2, r0
 8006044:	4313      	orrs	r3, r2
 8006046:	3401      	adds	r4, #1
 8006048:	9304      	str	r3, [sp, #16]
 800604a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800604e:	4829      	ldr	r0, [pc, #164]	@ (80060f4 <_vfiprintf_r+0x220>)
 8006050:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006054:	2206      	movs	r2, #6
 8006056:	f7fa f943 	bl	80002e0 <memchr>
 800605a:	2800      	cmp	r0, #0
 800605c:	d03f      	beq.n	80060de <_vfiprintf_r+0x20a>
 800605e:	4b26      	ldr	r3, [pc, #152]	@ (80060f8 <_vfiprintf_r+0x224>)
 8006060:	bb1b      	cbnz	r3, 80060aa <_vfiprintf_r+0x1d6>
 8006062:	9b03      	ldr	r3, [sp, #12]
 8006064:	3307      	adds	r3, #7
 8006066:	f023 0307 	bic.w	r3, r3, #7
 800606a:	3308      	adds	r3, #8
 800606c:	9303      	str	r3, [sp, #12]
 800606e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006070:	443b      	add	r3, r7
 8006072:	9309      	str	r3, [sp, #36]	@ 0x24
 8006074:	e76a      	b.n	8005f4c <_vfiprintf_r+0x78>
 8006076:	fb0c 3202 	mla	r2, ip, r2, r3
 800607a:	460c      	mov	r4, r1
 800607c:	2001      	movs	r0, #1
 800607e:	e7a8      	b.n	8005fd2 <_vfiprintf_r+0xfe>
 8006080:	2300      	movs	r3, #0
 8006082:	3401      	adds	r4, #1
 8006084:	9305      	str	r3, [sp, #20]
 8006086:	4619      	mov	r1, r3
 8006088:	f04f 0c0a 	mov.w	ip, #10
 800608c:	4620      	mov	r0, r4
 800608e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006092:	3a30      	subs	r2, #48	@ 0x30
 8006094:	2a09      	cmp	r2, #9
 8006096:	d903      	bls.n	80060a0 <_vfiprintf_r+0x1cc>
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0c6      	beq.n	800602a <_vfiprintf_r+0x156>
 800609c:	9105      	str	r1, [sp, #20]
 800609e:	e7c4      	b.n	800602a <_vfiprintf_r+0x156>
 80060a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80060a4:	4604      	mov	r4, r0
 80060a6:	2301      	movs	r3, #1
 80060a8:	e7f0      	b.n	800608c <_vfiprintf_r+0x1b8>
 80060aa:	ab03      	add	r3, sp, #12
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	462a      	mov	r2, r5
 80060b0:	4b12      	ldr	r3, [pc, #72]	@ (80060fc <_vfiprintf_r+0x228>)
 80060b2:	a904      	add	r1, sp, #16
 80060b4:	4630      	mov	r0, r6
 80060b6:	f3af 8000 	nop.w
 80060ba:	4607      	mov	r7, r0
 80060bc:	1c78      	adds	r0, r7, #1
 80060be:	d1d6      	bne.n	800606e <_vfiprintf_r+0x19a>
 80060c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060c2:	07d9      	lsls	r1, r3, #31
 80060c4:	d405      	bmi.n	80060d2 <_vfiprintf_r+0x1fe>
 80060c6:	89ab      	ldrh	r3, [r5, #12]
 80060c8:	059a      	lsls	r2, r3, #22
 80060ca:	d402      	bmi.n	80060d2 <_vfiprintf_r+0x1fe>
 80060cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060ce:	f7ff fddd 	bl	8005c8c <__retarget_lock_release_recursive>
 80060d2:	89ab      	ldrh	r3, [r5, #12]
 80060d4:	065b      	lsls	r3, r3, #25
 80060d6:	f53f af1f 	bmi.w	8005f18 <_vfiprintf_r+0x44>
 80060da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060dc:	e71e      	b.n	8005f1c <_vfiprintf_r+0x48>
 80060de:	ab03      	add	r3, sp, #12
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	462a      	mov	r2, r5
 80060e4:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <_vfiprintf_r+0x228>)
 80060e6:	a904      	add	r1, sp, #16
 80060e8:	4630      	mov	r0, r6
 80060ea:	f000 f879 	bl	80061e0 <_printf_i>
 80060ee:	e7e4      	b.n	80060ba <_vfiprintf_r+0x1e6>
 80060f0:	08006830 	.word	0x08006830
 80060f4:	0800683a 	.word	0x0800683a
 80060f8:	00000000 	.word	0x00000000
 80060fc:	08005eaf 	.word	0x08005eaf
 8006100:	08006836 	.word	0x08006836

08006104 <_printf_common>:
 8006104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006108:	4616      	mov	r6, r2
 800610a:	4698      	mov	r8, r3
 800610c:	688a      	ldr	r2, [r1, #8]
 800610e:	690b      	ldr	r3, [r1, #16]
 8006110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006114:	4293      	cmp	r3, r2
 8006116:	bfb8      	it	lt
 8006118:	4613      	movlt	r3, r2
 800611a:	6033      	str	r3, [r6, #0]
 800611c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006120:	4607      	mov	r7, r0
 8006122:	460c      	mov	r4, r1
 8006124:	b10a      	cbz	r2, 800612a <_printf_common+0x26>
 8006126:	3301      	adds	r3, #1
 8006128:	6033      	str	r3, [r6, #0]
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	0699      	lsls	r1, r3, #26
 800612e:	bf42      	ittt	mi
 8006130:	6833      	ldrmi	r3, [r6, #0]
 8006132:	3302      	addmi	r3, #2
 8006134:	6033      	strmi	r3, [r6, #0]
 8006136:	6825      	ldr	r5, [r4, #0]
 8006138:	f015 0506 	ands.w	r5, r5, #6
 800613c:	d106      	bne.n	800614c <_printf_common+0x48>
 800613e:	f104 0a19 	add.w	sl, r4, #25
 8006142:	68e3      	ldr	r3, [r4, #12]
 8006144:	6832      	ldr	r2, [r6, #0]
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	42ab      	cmp	r3, r5
 800614a:	dc26      	bgt.n	800619a <_printf_common+0x96>
 800614c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006150:	6822      	ldr	r2, [r4, #0]
 8006152:	3b00      	subs	r3, #0
 8006154:	bf18      	it	ne
 8006156:	2301      	movne	r3, #1
 8006158:	0692      	lsls	r2, r2, #26
 800615a:	d42b      	bmi.n	80061b4 <_printf_common+0xb0>
 800615c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006160:	4641      	mov	r1, r8
 8006162:	4638      	mov	r0, r7
 8006164:	47c8      	blx	r9
 8006166:	3001      	adds	r0, #1
 8006168:	d01e      	beq.n	80061a8 <_printf_common+0xa4>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	6922      	ldr	r2, [r4, #16]
 800616e:	f003 0306 	and.w	r3, r3, #6
 8006172:	2b04      	cmp	r3, #4
 8006174:	bf02      	ittt	eq
 8006176:	68e5      	ldreq	r5, [r4, #12]
 8006178:	6833      	ldreq	r3, [r6, #0]
 800617a:	1aed      	subeq	r5, r5, r3
 800617c:	68a3      	ldr	r3, [r4, #8]
 800617e:	bf0c      	ite	eq
 8006180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006184:	2500      	movne	r5, #0
 8006186:	4293      	cmp	r3, r2
 8006188:	bfc4      	itt	gt
 800618a:	1a9b      	subgt	r3, r3, r2
 800618c:	18ed      	addgt	r5, r5, r3
 800618e:	2600      	movs	r6, #0
 8006190:	341a      	adds	r4, #26
 8006192:	42b5      	cmp	r5, r6
 8006194:	d11a      	bne.n	80061cc <_printf_common+0xc8>
 8006196:	2000      	movs	r0, #0
 8006198:	e008      	b.n	80061ac <_printf_common+0xa8>
 800619a:	2301      	movs	r3, #1
 800619c:	4652      	mov	r2, sl
 800619e:	4641      	mov	r1, r8
 80061a0:	4638      	mov	r0, r7
 80061a2:	47c8      	blx	r9
 80061a4:	3001      	adds	r0, #1
 80061a6:	d103      	bne.n	80061b0 <_printf_common+0xac>
 80061a8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b0:	3501      	adds	r5, #1
 80061b2:	e7c6      	b.n	8006142 <_printf_common+0x3e>
 80061b4:	18e1      	adds	r1, r4, r3
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	2030      	movs	r0, #48	@ 0x30
 80061ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061be:	4422      	add	r2, r4
 80061c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061c8:	3302      	adds	r3, #2
 80061ca:	e7c7      	b.n	800615c <_printf_common+0x58>
 80061cc:	2301      	movs	r3, #1
 80061ce:	4622      	mov	r2, r4
 80061d0:	4641      	mov	r1, r8
 80061d2:	4638      	mov	r0, r7
 80061d4:	47c8      	blx	r9
 80061d6:	3001      	adds	r0, #1
 80061d8:	d0e6      	beq.n	80061a8 <_printf_common+0xa4>
 80061da:	3601      	adds	r6, #1
 80061dc:	e7d9      	b.n	8006192 <_printf_common+0x8e>
	...

080061e0 <_printf_i>:
 80061e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061e4:	7e0f      	ldrb	r7, [r1, #24]
 80061e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061e8:	2f78      	cmp	r7, #120	@ 0x78
 80061ea:	4691      	mov	r9, r2
 80061ec:	4680      	mov	r8, r0
 80061ee:	460c      	mov	r4, r1
 80061f0:	469a      	mov	sl, r3
 80061f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061f6:	d807      	bhi.n	8006208 <_printf_i+0x28>
 80061f8:	2f62      	cmp	r7, #98	@ 0x62
 80061fa:	d80a      	bhi.n	8006212 <_printf_i+0x32>
 80061fc:	2f00      	cmp	r7, #0
 80061fe:	f000 80d2 	beq.w	80063a6 <_printf_i+0x1c6>
 8006202:	2f58      	cmp	r7, #88	@ 0x58
 8006204:	f000 80b9 	beq.w	800637a <_printf_i+0x19a>
 8006208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800620c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006210:	e03a      	b.n	8006288 <_printf_i+0xa8>
 8006212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006216:	2b15      	cmp	r3, #21
 8006218:	d8f6      	bhi.n	8006208 <_printf_i+0x28>
 800621a:	a101      	add	r1, pc, #4	@ (adr r1, 8006220 <_printf_i+0x40>)
 800621c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006220:	08006279 	.word	0x08006279
 8006224:	0800628d 	.word	0x0800628d
 8006228:	08006209 	.word	0x08006209
 800622c:	08006209 	.word	0x08006209
 8006230:	08006209 	.word	0x08006209
 8006234:	08006209 	.word	0x08006209
 8006238:	0800628d 	.word	0x0800628d
 800623c:	08006209 	.word	0x08006209
 8006240:	08006209 	.word	0x08006209
 8006244:	08006209 	.word	0x08006209
 8006248:	08006209 	.word	0x08006209
 800624c:	0800638d 	.word	0x0800638d
 8006250:	080062b7 	.word	0x080062b7
 8006254:	08006347 	.word	0x08006347
 8006258:	08006209 	.word	0x08006209
 800625c:	08006209 	.word	0x08006209
 8006260:	080063af 	.word	0x080063af
 8006264:	08006209 	.word	0x08006209
 8006268:	080062b7 	.word	0x080062b7
 800626c:	08006209 	.word	0x08006209
 8006270:	08006209 	.word	0x08006209
 8006274:	0800634f 	.word	0x0800634f
 8006278:	6833      	ldr	r3, [r6, #0]
 800627a:	1d1a      	adds	r2, r3, #4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6032      	str	r2, [r6, #0]
 8006280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006288:	2301      	movs	r3, #1
 800628a:	e09d      	b.n	80063c8 <_printf_i+0x1e8>
 800628c:	6833      	ldr	r3, [r6, #0]
 800628e:	6820      	ldr	r0, [r4, #0]
 8006290:	1d19      	adds	r1, r3, #4
 8006292:	6031      	str	r1, [r6, #0]
 8006294:	0606      	lsls	r6, r0, #24
 8006296:	d501      	bpl.n	800629c <_printf_i+0xbc>
 8006298:	681d      	ldr	r5, [r3, #0]
 800629a:	e003      	b.n	80062a4 <_printf_i+0xc4>
 800629c:	0645      	lsls	r5, r0, #25
 800629e:	d5fb      	bpl.n	8006298 <_printf_i+0xb8>
 80062a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062a4:	2d00      	cmp	r5, #0
 80062a6:	da03      	bge.n	80062b0 <_printf_i+0xd0>
 80062a8:	232d      	movs	r3, #45	@ 0x2d
 80062aa:	426d      	negs	r5, r5
 80062ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062b0:	4859      	ldr	r0, [pc, #356]	@ (8006418 <_printf_i+0x238>)
 80062b2:	230a      	movs	r3, #10
 80062b4:	e011      	b.n	80062da <_printf_i+0xfa>
 80062b6:	6821      	ldr	r1, [r4, #0]
 80062b8:	6833      	ldr	r3, [r6, #0]
 80062ba:	0608      	lsls	r0, r1, #24
 80062bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80062c0:	d402      	bmi.n	80062c8 <_printf_i+0xe8>
 80062c2:	0649      	lsls	r1, r1, #25
 80062c4:	bf48      	it	mi
 80062c6:	b2ad      	uxthmi	r5, r5
 80062c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80062ca:	4853      	ldr	r0, [pc, #332]	@ (8006418 <_printf_i+0x238>)
 80062cc:	6033      	str	r3, [r6, #0]
 80062ce:	bf14      	ite	ne
 80062d0:	230a      	movne	r3, #10
 80062d2:	2308      	moveq	r3, #8
 80062d4:	2100      	movs	r1, #0
 80062d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062da:	6866      	ldr	r6, [r4, #4]
 80062dc:	60a6      	str	r6, [r4, #8]
 80062de:	2e00      	cmp	r6, #0
 80062e0:	bfa2      	ittt	ge
 80062e2:	6821      	ldrge	r1, [r4, #0]
 80062e4:	f021 0104 	bicge.w	r1, r1, #4
 80062e8:	6021      	strge	r1, [r4, #0]
 80062ea:	b90d      	cbnz	r5, 80062f0 <_printf_i+0x110>
 80062ec:	2e00      	cmp	r6, #0
 80062ee:	d04b      	beq.n	8006388 <_printf_i+0x1a8>
 80062f0:	4616      	mov	r6, r2
 80062f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80062f6:	fb03 5711 	mls	r7, r3, r1, r5
 80062fa:	5dc7      	ldrb	r7, [r0, r7]
 80062fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006300:	462f      	mov	r7, r5
 8006302:	42bb      	cmp	r3, r7
 8006304:	460d      	mov	r5, r1
 8006306:	d9f4      	bls.n	80062f2 <_printf_i+0x112>
 8006308:	2b08      	cmp	r3, #8
 800630a:	d10b      	bne.n	8006324 <_printf_i+0x144>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	07df      	lsls	r7, r3, #31
 8006310:	d508      	bpl.n	8006324 <_printf_i+0x144>
 8006312:	6923      	ldr	r3, [r4, #16]
 8006314:	6861      	ldr	r1, [r4, #4]
 8006316:	4299      	cmp	r1, r3
 8006318:	bfde      	ittt	le
 800631a:	2330      	movle	r3, #48	@ 0x30
 800631c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006320:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006324:	1b92      	subs	r2, r2, r6
 8006326:	6122      	str	r2, [r4, #16]
 8006328:	f8cd a000 	str.w	sl, [sp]
 800632c:	464b      	mov	r3, r9
 800632e:	aa03      	add	r2, sp, #12
 8006330:	4621      	mov	r1, r4
 8006332:	4640      	mov	r0, r8
 8006334:	f7ff fee6 	bl	8006104 <_printf_common>
 8006338:	3001      	adds	r0, #1
 800633a:	d14a      	bne.n	80063d2 <_printf_i+0x1f2>
 800633c:	f04f 30ff 	mov.w	r0, #4294967295
 8006340:	b004      	add	sp, #16
 8006342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	f043 0320 	orr.w	r3, r3, #32
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	4833      	ldr	r0, [pc, #204]	@ (800641c <_printf_i+0x23c>)
 8006350:	2778      	movs	r7, #120	@ 0x78
 8006352:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006356:	6823      	ldr	r3, [r4, #0]
 8006358:	6831      	ldr	r1, [r6, #0]
 800635a:	061f      	lsls	r7, r3, #24
 800635c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006360:	d402      	bmi.n	8006368 <_printf_i+0x188>
 8006362:	065f      	lsls	r7, r3, #25
 8006364:	bf48      	it	mi
 8006366:	b2ad      	uxthmi	r5, r5
 8006368:	6031      	str	r1, [r6, #0]
 800636a:	07d9      	lsls	r1, r3, #31
 800636c:	bf44      	itt	mi
 800636e:	f043 0320 	orrmi.w	r3, r3, #32
 8006372:	6023      	strmi	r3, [r4, #0]
 8006374:	b11d      	cbz	r5, 800637e <_printf_i+0x19e>
 8006376:	2310      	movs	r3, #16
 8006378:	e7ac      	b.n	80062d4 <_printf_i+0xf4>
 800637a:	4827      	ldr	r0, [pc, #156]	@ (8006418 <_printf_i+0x238>)
 800637c:	e7e9      	b.n	8006352 <_printf_i+0x172>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	f023 0320 	bic.w	r3, r3, #32
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	e7f6      	b.n	8006376 <_printf_i+0x196>
 8006388:	4616      	mov	r6, r2
 800638a:	e7bd      	b.n	8006308 <_printf_i+0x128>
 800638c:	6833      	ldr	r3, [r6, #0]
 800638e:	6825      	ldr	r5, [r4, #0]
 8006390:	6961      	ldr	r1, [r4, #20]
 8006392:	1d18      	adds	r0, r3, #4
 8006394:	6030      	str	r0, [r6, #0]
 8006396:	062e      	lsls	r6, r5, #24
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	d501      	bpl.n	80063a0 <_printf_i+0x1c0>
 800639c:	6019      	str	r1, [r3, #0]
 800639e:	e002      	b.n	80063a6 <_printf_i+0x1c6>
 80063a0:	0668      	lsls	r0, r5, #25
 80063a2:	d5fb      	bpl.n	800639c <_printf_i+0x1bc>
 80063a4:	8019      	strh	r1, [r3, #0]
 80063a6:	2300      	movs	r3, #0
 80063a8:	6123      	str	r3, [r4, #16]
 80063aa:	4616      	mov	r6, r2
 80063ac:	e7bc      	b.n	8006328 <_printf_i+0x148>
 80063ae:	6833      	ldr	r3, [r6, #0]
 80063b0:	1d1a      	adds	r2, r3, #4
 80063b2:	6032      	str	r2, [r6, #0]
 80063b4:	681e      	ldr	r6, [r3, #0]
 80063b6:	6862      	ldr	r2, [r4, #4]
 80063b8:	2100      	movs	r1, #0
 80063ba:	4630      	mov	r0, r6
 80063bc:	f7f9 ff90 	bl	80002e0 <memchr>
 80063c0:	b108      	cbz	r0, 80063c6 <_printf_i+0x1e6>
 80063c2:	1b80      	subs	r0, r0, r6
 80063c4:	6060      	str	r0, [r4, #4]
 80063c6:	6863      	ldr	r3, [r4, #4]
 80063c8:	6123      	str	r3, [r4, #16]
 80063ca:	2300      	movs	r3, #0
 80063cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063d0:	e7aa      	b.n	8006328 <_printf_i+0x148>
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	4632      	mov	r2, r6
 80063d6:	4649      	mov	r1, r9
 80063d8:	4640      	mov	r0, r8
 80063da:	47d0      	blx	sl
 80063dc:	3001      	adds	r0, #1
 80063de:	d0ad      	beq.n	800633c <_printf_i+0x15c>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	079b      	lsls	r3, r3, #30
 80063e4:	d413      	bmi.n	800640e <_printf_i+0x22e>
 80063e6:	68e0      	ldr	r0, [r4, #12]
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	4298      	cmp	r0, r3
 80063ec:	bfb8      	it	lt
 80063ee:	4618      	movlt	r0, r3
 80063f0:	e7a6      	b.n	8006340 <_printf_i+0x160>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4632      	mov	r2, r6
 80063f6:	4649      	mov	r1, r9
 80063f8:	4640      	mov	r0, r8
 80063fa:	47d0      	blx	sl
 80063fc:	3001      	adds	r0, #1
 80063fe:	d09d      	beq.n	800633c <_printf_i+0x15c>
 8006400:	3501      	adds	r5, #1
 8006402:	68e3      	ldr	r3, [r4, #12]
 8006404:	9903      	ldr	r1, [sp, #12]
 8006406:	1a5b      	subs	r3, r3, r1
 8006408:	42ab      	cmp	r3, r5
 800640a:	dcf2      	bgt.n	80063f2 <_printf_i+0x212>
 800640c:	e7eb      	b.n	80063e6 <_printf_i+0x206>
 800640e:	2500      	movs	r5, #0
 8006410:	f104 0619 	add.w	r6, r4, #25
 8006414:	e7f5      	b.n	8006402 <_printf_i+0x222>
 8006416:	bf00      	nop
 8006418:	08006841 	.word	0x08006841
 800641c:	08006852 	.word	0x08006852

08006420 <__sflush_r>:
 8006420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006428:	0716      	lsls	r6, r2, #28
 800642a:	4605      	mov	r5, r0
 800642c:	460c      	mov	r4, r1
 800642e:	d454      	bmi.n	80064da <__sflush_r+0xba>
 8006430:	684b      	ldr	r3, [r1, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	dc02      	bgt.n	800643c <__sflush_r+0x1c>
 8006436:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006438:	2b00      	cmp	r3, #0
 800643a:	dd48      	ble.n	80064ce <__sflush_r+0xae>
 800643c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800643e:	2e00      	cmp	r6, #0
 8006440:	d045      	beq.n	80064ce <__sflush_r+0xae>
 8006442:	2300      	movs	r3, #0
 8006444:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006448:	682f      	ldr	r7, [r5, #0]
 800644a:	6a21      	ldr	r1, [r4, #32]
 800644c:	602b      	str	r3, [r5, #0]
 800644e:	d030      	beq.n	80064b2 <__sflush_r+0x92>
 8006450:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	0759      	lsls	r1, r3, #29
 8006456:	d505      	bpl.n	8006464 <__sflush_r+0x44>
 8006458:	6863      	ldr	r3, [r4, #4]
 800645a:	1ad2      	subs	r2, r2, r3
 800645c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800645e:	b10b      	cbz	r3, 8006464 <__sflush_r+0x44>
 8006460:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006462:	1ad2      	subs	r2, r2, r3
 8006464:	2300      	movs	r3, #0
 8006466:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006468:	6a21      	ldr	r1, [r4, #32]
 800646a:	4628      	mov	r0, r5
 800646c:	47b0      	blx	r6
 800646e:	1c43      	adds	r3, r0, #1
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	d106      	bne.n	8006482 <__sflush_r+0x62>
 8006474:	6829      	ldr	r1, [r5, #0]
 8006476:	291d      	cmp	r1, #29
 8006478:	d82b      	bhi.n	80064d2 <__sflush_r+0xb2>
 800647a:	4a2a      	ldr	r2, [pc, #168]	@ (8006524 <__sflush_r+0x104>)
 800647c:	410a      	asrs	r2, r1
 800647e:	07d6      	lsls	r6, r2, #31
 8006480:	d427      	bmi.n	80064d2 <__sflush_r+0xb2>
 8006482:	2200      	movs	r2, #0
 8006484:	6062      	str	r2, [r4, #4]
 8006486:	04d9      	lsls	r1, r3, #19
 8006488:	6922      	ldr	r2, [r4, #16]
 800648a:	6022      	str	r2, [r4, #0]
 800648c:	d504      	bpl.n	8006498 <__sflush_r+0x78>
 800648e:	1c42      	adds	r2, r0, #1
 8006490:	d101      	bne.n	8006496 <__sflush_r+0x76>
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	b903      	cbnz	r3, 8006498 <__sflush_r+0x78>
 8006496:	6560      	str	r0, [r4, #84]	@ 0x54
 8006498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800649a:	602f      	str	r7, [r5, #0]
 800649c:	b1b9      	cbz	r1, 80064ce <__sflush_r+0xae>
 800649e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064a2:	4299      	cmp	r1, r3
 80064a4:	d002      	beq.n	80064ac <__sflush_r+0x8c>
 80064a6:	4628      	mov	r0, r5
 80064a8:	f7ff fbf2 	bl	8005c90 <_free_r>
 80064ac:	2300      	movs	r3, #0
 80064ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80064b0:	e00d      	b.n	80064ce <__sflush_r+0xae>
 80064b2:	2301      	movs	r3, #1
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b0      	blx	r6
 80064b8:	4602      	mov	r2, r0
 80064ba:	1c50      	adds	r0, r2, #1
 80064bc:	d1c9      	bne.n	8006452 <__sflush_r+0x32>
 80064be:	682b      	ldr	r3, [r5, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0c6      	beq.n	8006452 <__sflush_r+0x32>
 80064c4:	2b1d      	cmp	r3, #29
 80064c6:	d001      	beq.n	80064cc <__sflush_r+0xac>
 80064c8:	2b16      	cmp	r3, #22
 80064ca:	d11e      	bne.n	800650a <__sflush_r+0xea>
 80064cc:	602f      	str	r7, [r5, #0]
 80064ce:	2000      	movs	r0, #0
 80064d0:	e022      	b.n	8006518 <__sflush_r+0xf8>
 80064d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064d6:	b21b      	sxth	r3, r3
 80064d8:	e01b      	b.n	8006512 <__sflush_r+0xf2>
 80064da:	690f      	ldr	r7, [r1, #16]
 80064dc:	2f00      	cmp	r7, #0
 80064de:	d0f6      	beq.n	80064ce <__sflush_r+0xae>
 80064e0:	0793      	lsls	r3, r2, #30
 80064e2:	680e      	ldr	r6, [r1, #0]
 80064e4:	bf08      	it	eq
 80064e6:	694b      	ldreq	r3, [r1, #20]
 80064e8:	600f      	str	r7, [r1, #0]
 80064ea:	bf18      	it	ne
 80064ec:	2300      	movne	r3, #0
 80064ee:	eba6 0807 	sub.w	r8, r6, r7
 80064f2:	608b      	str	r3, [r1, #8]
 80064f4:	f1b8 0f00 	cmp.w	r8, #0
 80064f8:	dde9      	ble.n	80064ce <__sflush_r+0xae>
 80064fa:	6a21      	ldr	r1, [r4, #32]
 80064fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80064fe:	4643      	mov	r3, r8
 8006500:	463a      	mov	r2, r7
 8006502:	4628      	mov	r0, r5
 8006504:	47b0      	blx	r6
 8006506:	2800      	cmp	r0, #0
 8006508:	dc08      	bgt.n	800651c <__sflush_r+0xfc>
 800650a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800650e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006512:	81a3      	strh	r3, [r4, #12]
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
 8006518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800651c:	4407      	add	r7, r0
 800651e:	eba8 0800 	sub.w	r8, r8, r0
 8006522:	e7e7      	b.n	80064f4 <__sflush_r+0xd4>
 8006524:	dfbffffe 	.word	0xdfbffffe

08006528 <_fflush_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	690b      	ldr	r3, [r1, #16]
 800652c:	4605      	mov	r5, r0
 800652e:	460c      	mov	r4, r1
 8006530:	b913      	cbnz	r3, 8006538 <_fflush_r+0x10>
 8006532:	2500      	movs	r5, #0
 8006534:	4628      	mov	r0, r5
 8006536:	bd38      	pop	{r3, r4, r5, pc}
 8006538:	b118      	cbz	r0, 8006542 <_fflush_r+0x1a>
 800653a:	6a03      	ldr	r3, [r0, #32]
 800653c:	b90b      	cbnz	r3, 8006542 <_fflush_r+0x1a>
 800653e:	f7ff fa9f 	bl	8005a80 <__sinit>
 8006542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0f3      	beq.n	8006532 <_fflush_r+0xa>
 800654a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800654c:	07d0      	lsls	r0, r2, #31
 800654e:	d404      	bmi.n	800655a <_fflush_r+0x32>
 8006550:	0599      	lsls	r1, r3, #22
 8006552:	d402      	bmi.n	800655a <_fflush_r+0x32>
 8006554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006556:	f7ff fb98 	bl	8005c8a <__retarget_lock_acquire_recursive>
 800655a:	4628      	mov	r0, r5
 800655c:	4621      	mov	r1, r4
 800655e:	f7ff ff5f 	bl	8006420 <__sflush_r>
 8006562:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006564:	07da      	lsls	r2, r3, #31
 8006566:	4605      	mov	r5, r0
 8006568:	d4e4      	bmi.n	8006534 <_fflush_r+0xc>
 800656a:	89a3      	ldrh	r3, [r4, #12]
 800656c:	059b      	lsls	r3, r3, #22
 800656e:	d4e1      	bmi.n	8006534 <_fflush_r+0xc>
 8006570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006572:	f7ff fb8b 	bl	8005c8c <__retarget_lock_release_recursive>
 8006576:	e7dd      	b.n	8006534 <_fflush_r+0xc>

08006578 <__swbuf_r>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	460e      	mov	r6, r1
 800657c:	4614      	mov	r4, r2
 800657e:	4605      	mov	r5, r0
 8006580:	b118      	cbz	r0, 800658a <__swbuf_r+0x12>
 8006582:	6a03      	ldr	r3, [r0, #32]
 8006584:	b90b      	cbnz	r3, 800658a <__swbuf_r+0x12>
 8006586:	f7ff fa7b 	bl	8005a80 <__sinit>
 800658a:	69a3      	ldr	r3, [r4, #24]
 800658c:	60a3      	str	r3, [r4, #8]
 800658e:	89a3      	ldrh	r3, [r4, #12]
 8006590:	071a      	lsls	r2, r3, #28
 8006592:	d501      	bpl.n	8006598 <__swbuf_r+0x20>
 8006594:	6923      	ldr	r3, [r4, #16]
 8006596:	b943      	cbnz	r3, 80065aa <__swbuf_r+0x32>
 8006598:	4621      	mov	r1, r4
 800659a:	4628      	mov	r0, r5
 800659c:	f000 f82a 	bl	80065f4 <__swsetup_r>
 80065a0:	b118      	cbz	r0, 80065aa <__swbuf_r+0x32>
 80065a2:	f04f 37ff 	mov.w	r7, #4294967295
 80065a6:	4638      	mov	r0, r7
 80065a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	6922      	ldr	r2, [r4, #16]
 80065ae:	1a98      	subs	r0, r3, r2
 80065b0:	6963      	ldr	r3, [r4, #20]
 80065b2:	b2f6      	uxtb	r6, r6
 80065b4:	4283      	cmp	r3, r0
 80065b6:	4637      	mov	r7, r6
 80065b8:	dc05      	bgt.n	80065c6 <__swbuf_r+0x4e>
 80065ba:	4621      	mov	r1, r4
 80065bc:	4628      	mov	r0, r5
 80065be:	f7ff ffb3 	bl	8006528 <_fflush_r>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d1ed      	bne.n	80065a2 <__swbuf_r+0x2a>
 80065c6:	68a3      	ldr	r3, [r4, #8]
 80065c8:	3b01      	subs	r3, #1
 80065ca:	60a3      	str	r3, [r4, #8]
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	6022      	str	r2, [r4, #0]
 80065d2:	701e      	strb	r6, [r3, #0]
 80065d4:	6962      	ldr	r2, [r4, #20]
 80065d6:	1c43      	adds	r3, r0, #1
 80065d8:	429a      	cmp	r2, r3
 80065da:	d004      	beq.n	80065e6 <__swbuf_r+0x6e>
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	07db      	lsls	r3, r3, #31
 80065e0:	d5e1      	bpl.n	80065a6 <__swbuf_r+0x2e>
 80065e2:	2e0a      	cmp	r6, #10
 80065e4:	d1df      	bne.n	80065a6 <__swbuf_r+0x2e>
 80065e6:	4621      	mov	r1, r4
 80065e8:	4628      	mov	r0, r5
 80065ea:	f7ff ff9d 	bl	8006528 <_fflush_r>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d0d9      	beq.n	80065a6 <__swbuf_r+0x2e>
 80065f2:	e7d6      	b.n	80065a2 <__swbuf_r+0x2a>

080065f4 <__swsetup_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4b29      	ldr	r3, [pc, #164]	@ (800669c <__swsetup_r+0xa8>)
 80065f8:	4605      	mov	r5, r0
 80065fa:	6818      	ldr	r0, [r3, #0]
 80065fc:	460c      	mov	r4, r1
 80065fe:	b118      	cbz	r0, 8006608 <__swsetup_r+0x14>
 8006600:	6a03      	ldr	r3, [r0, #32]
 8006602:	b90b      	cbnz	r3, 8006608 <__swsetup_r+0x14>
 8006604:	f7ff fa3c 	bl	8005a80 <__sinit>
 8006608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800660c:	0719      	lsls	r1, r3, #28
 800660e:	d422      	bmi.n	8006656 <__swsetup_r+0x62>
 8006610:	06da      	lsls	r2, r3, #27
 8006612:	d407      	bmi.n	8006624 <__swsetup_r+0x30>
 8006614:	2209      	movs	r2, #9
 8006616:	602a      	str	r2, [r5, #0]
 8006618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800661c:	81a3      	strh	r3, [r4, #12]
 800661e:	f04f 30ff 	mov.w	r0, #4294967295
 8006622:	e033      	b.n	800668c <__swsetup_r+0x98>
 8006624:	0758      	lsls	r0, r3, #29
 8006626:	d512      	bpl.n	800664e <__swsetup_r+0x5a>
 8006628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800662a:	b141      	cbz	r1, 800663e <__swsetup_r+0x4a>
 800662c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006630:	4299      	cmp	r1, r3
 8006632:	d002      	beq.n	800663a <__swsetup_r+0x46>
 8006634:	4628      	mov	r0, r5
 8006636:	f7ff fb2b 	bl	8005c90 <_free_r>
 800663a:	2300      	movs	r3, #0
 800663c:	6363      	str	r3, [r4, #52]	@ 0x34
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	2300      	movs	r3, #0
 8006648:	6063      	str	r3, [r4, #4]
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	f043 0308 	orr.w	r3, r3, #8
 8006654:	81a3      	strh	r3, [r4, #12]
 8006656:	6923      	ldr	r3, [r4, #16]
 8006658:	b94b      	cbnz	r3, 800666e <__swsetup_r+0x7a>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006660:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006664:	d003      	beq.n	800666e <__swsetup_r+0x7a>
 8006666:	4621      	mov	r1, r4
 8006668:	4628      	mov	r0, r5
 800666a:	f000 f84f 	bl	800670c <__smakebuf_r>
 800666e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006672:	f013 0201 	ands.w	r2, r3, #1
 8006676:	d00a      	beq.n	800668e <__swsetup_r+0x9a>
 8006678:	2200      	movs	r2, #0
 800667a:	60a2      	str	r2, [r4, #8]
 800667c:	6962      	ldr	r2, [r4, #20]
 800667e:	4252      	negs	r2, r2
 8006680:	61a2      	str	r2, [r4, #24]
 8006682:	6922      	ldr	r2, [r4, #16]
 8006684:	b942      	cbnz	r2, 8006698 <__swsetup_r+0xa4>
 8006686:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800668a:	d1c5      	bne.n	8006618 <__swsetup_r+0x24>
 800668c:	bd38      	pop	{r3, r4, r5, pc}
 800668e:	0799      	lsls	r1, r3, #30
 8006690:	bf58      	it	pl
 8006692:	6962      	ldrpl	r2, [r4, #20]
 8006694:	60a2      	str	r2, [r4, #8]
 8006696:	e7f4      	b.n	8006682 <__swsetup_r+0x8e>
 8006698:	2000      	movs	r0, #0
 800669a:	e7f7      	b.n	800668c <__swsetup_r+0x98>
 800669c:	24000038 	.word	0x24000038

080066a0 <_sbrk_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	4d06      	ldr	r5, [pc, #24]	@ (80066bc <_sbrk_r+0x1c>)
 80066a4:	2300      	movs	r3, #0
 80066a6:	4604      	mov	r4, r0
 80066a8:	4608      	mov	r0, r1
 80066aa:	602b      	str	r3, [r5, #0]
 80066ac:	f7fa fe12 	bl	80012d4 <_sbrk>
 80066b0:	1c43      	adds	r3, r0, #1
 80066b2:	d102      	bne.n	80066ba <_sbrk_r+0x1a>
 80066b4:	682b      	ldr	r3, [r5, #0]
 80066b6:	b103      	cbz	r3, 80066ba <_sbrk_r+0x1a>
 80066b8:	6023      	str	r3, [r4, #0]
 80066ba:	bd38      	pop	{r3, r4, r5, pc}
 80066bc:	24000380 	.word	0x24000380

080066c0 <__swhatbuf_r>:
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	460c      	mov	r4, r1
 80066c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c8:	2900      	cmp	r1, #0
 80066ca:	b096      	sub	sp, #88	@ 0x58
 80066cc:	4615      	mov	r5, r2
 80066ce:	461e      	mov	r6, r3
 80066d0:	da0d      	bge.n	80066ee <__swhatbuf_r+0x2e>
 80066d2:	89a3      	ldrh	r3, [r4, #12]
 80066d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80066d8:	f04f 0100 	mov.w	r1, #0
 80066dc:	bf14      	ite	ne
 80066de:	2340      	movne	r3, #64	@ 0x40
 80066e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80066e4:	2000      	movs	r0, #0
 80066e6:	6031      	str	r1, [r6, #0]
 80066e8:	602b      	str	r3, [r5, #0]
 80066ea:	b016      	add	sp, #88	@ 0x58
 80066ec:	bd70      	pop	{r4, r5, r6, pc}
 80066ee:	466a      	mov	r2, sp
 80066f0:	f000 f848 	bl	8006784 <_fstat_r>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	dbec      	blt.n	80066d2 <__swhatbuf_r+0x12>
 80066f8:	9901      	ldr	r1, [sp, #4]
 80066fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80066fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006702:	4259      	negs	r1, r3
 8006704:	4159      	adcs	r1, r3
 8006706:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800670a:	e7eb      	b.n	80066e4 <__swhatbuf_r+0x24>

0800670c <__smakebuf_r>:
 800670c:	898b      	ldrh	r3, [r1, #12]
 800670e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006710:	079d      	lsls	r5, r3, #30
 8006712:	4606      	mov	r6, r0
 8006714:	460c      	mov	r4, r1
 8006716:	d507      	bpl.n	8006728 <__smakebuf_r+0x1c>
 8006718:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	6123      	str	r3, [r4, #16]
 8006720:	2301      	movs	r3, #1
 8006722:	6163      	str	r3, [r4, #20]
 8006724:	b003      	add	sp, #12
 8006726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006728:	ab01      	add	r3, sp, #4
 800672a:	466a      	mov	r2, sp
 800672c:	f7ff ffc8 	bl	80066c0 <__swhatbuf_r>
 8006730:	9f00      	ldr	r7, [sp, #0]
 8006732:	4605      	mov	r5, r0
 8006734:	4639      	mov	r1, r7
 8006736:	4630      	mov	r0, r6
 8006738:	f7ff fb16 	bl	8005d68 <_malloc_r>
 800673c:	b948      	cbnz	r0, 8006752 <__smakebuf_r+0x46>
 800673e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006742:	059a      	lsls	r2, r3, #22
 8006744:	d4ee      	bmi.n	8006724 <__smakebuf_r+0x18>
 8006746:	f023 0303 	bic.w	r3, r3, #3
 800674a:	f043 0302 	orr.w	r3, r3, #2
 800674e:	81a3      	strh	r3, [r4, #12]
 8006750:	e7e2      	b.n	8006718 <__smakebuf_r+0xc>
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	6020      	str	r0, [r4, #0]
 8006756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800675a:	81a3      	strh	r3, [r4, #12]
 800675c:	9b01      	ldr	r3, [sp, #4]
 800675e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006762:	b15b      	cbz	r3, 800677c <__smakebuf_r+0x70>
 8006764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006768:	4630      	mov	r0, r6
 800676a:	f000 f81d 	bl	80067a8 <_isatty_r>
 800676e:	b128      	cbz	r0, 800677c <__smakebuf_r+0x70>
 8006770:	89a3      	ldrh	r3, [r4, #12]
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	f043 0301 	orr.w	r3, r3, #1
 800677a:	81a3      	strh	r3, [r4, #12]
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	431d      	orrs	r5, r3
 8006780:	81a5      	strh	r5, [r4, #12]
 8006782:	e7cf      	b.n	8006724 <__smakebuf_r+0x18>

08006784 <_fstat_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4d07      	ldr	r5, [pc, #28]	@ (80067a4 <_fstat_r+0x20>)
 8006788:	2300      	movs	r3, #0
 800678a:	4604      	mov	r4, r0
 800678c:	4608      	mov	r0, r1
 800678e:	4611      	mov	r1, r2
 8006790:	602b      	str	r3, [r5, #0]
 8006792:	f7fa fd77 	bl	8001284 <_fstat>
 8006796:	1c43      	adds	r3, r0, #1
 8006798:	d102      	bne.n	80067a0 <_fstat_r+0x1c>
 800679a:	682b      	ldr	r3, [r5, #0]
 800679c:	b103      	cbz	r3, 80067a0 <_fstat_r+0x1c>
 800679e:	6023      	str	r3, [r4, #0]
 80067a0:	bd38      	pop	{r3, r4, r5, pc}
 80067a2:	bf00      	nop
 80067a4:	24000380 	.word	0x24000380

080067a8 <_isatty_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4d06      	ldr	r5, [pc, #24]	@ (80067c4 <_isatty_r+0x1c>)
 80067ac:	2300      	movs	r3, #0
 80067ae:	4604      	mov	r4, r0
 80067b0:	4608      	mov	r0, r1
 80067b2:	602b      	str	r3, [r5, #0]
 80067b4:	f7fa fd76 	bl	80012a4 <_isatty>
 80067b8:	1c43      	adds	r3, r0, #1
 80067ba:	d102      	bne.n	80067c2 <_isatty_r+0x1a>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	b103      	cbz	r3, 80067c2 <_isatty_r+0x1a>
 80067c0:	6023      	str	r3, [r4, #0]
 80067c2:	bd38      	pop	{r3, r4, r5, pc}
 80067c4:	24000380 	.word	0x24000380

080067c8 <_init>:
 80067c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ca:	bf00      	nop
 80067cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ce:	bc08      	pop	{r3}
 80067d0:	469e      	mov	lr, r3
 80067d2:	4770      	bx	lr

080067d4 <_fini>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	bf00      	nop
 80067d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067da:	bc08      	pop	{r3}
 80067dc:	469e      	mov	lr, r3
 80067de:	4770      	bx	lr
