
reactionwheel_control_test_rig_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ffc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800729c  0800729c  0000829c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007320  08007320  00009088  2**0
                  CONTENTS
  4 .ARM          00000008  08007320  08007320  00008320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007328  08007328  00009088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007328  08007328  00008328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800732c  0800732c  0000832c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  08007330  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  24000088  080073b8  00009088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240003c4  080073b8  000093c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b03  00000000  00000000  000090b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c8  00000000  00000000  0001fbb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00022588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de9  00000000  00000000  00023768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bc2b  00000000  00000000  00024551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170b2  00000000  00000000  0006017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018a018  00000000  00000000  0007722e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00201246  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052fc  00000000  00000000  0020128c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00206588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007284 	.word	0x08007284

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08007284 	.word	0x08007284

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b49      	ldr	r3, [pc, #292]	@ (800079c <SystemInit+0x12c>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a48      	ldr	r2, [pc, #288]	@ (800079c <SystemInit+0x12c>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b45      	ldr	r3, [pc, #276]	@ (800079c <SystemInit+0x12c>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a44      	ldr	r2, [pc, #272]	@ (800079c <SystemInit+0x12c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <SystemInit+0x130>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <SystemInit+0x130>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a3e      	ldr	r2, [pc, #248]	@ (80007a0 <SystemInit+0x130>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <SystemInit+0x134>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a3c      	ldr	r2, [pc, #240]	@ (80007a4 <SystemInit+0x134>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b3a      	ldr	r3, [pc, #232]	@ (80007a4 <SystemInit+0x134>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b39      	ldr	r3, [pc, #228]	@ (80007a4 <SystemInit+0x134>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4938      	ldr	r1, [pc, #224]	@ (80007a4 <SystemInit+0x134>)
 80006c4:	4b38      	ldr	r3, [pc, #224]	@ (80007a8 <SystemInit+0x138>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b35      	ldr	r3, [pc, #212]	@ (80007a0 <SystemInit+0x130>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <SystemInit+0x130>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a30      	ldr	r2, [pc, #192]	@ (80007a0 <SystemInit+0x130>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <SystemInit+0x134>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <SystemInit+0x134>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <SystemInit+0x134>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <SystemInit+0x134>)
 80006fa:	4a2c      	ldr	r2, [pc, #176]	@ (80007ac <SystemInit+0x13c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <SystemInit+0x134>)
 8000700:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <SystemInit+0x140>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <SystemInit+0x134>)
 8000706:	4a2b      	ldr	r2, [pc, #172]	@ (80007b4 <SystemInit+0x144>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <SystemInit+0x134>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <SystemInit+0x134>)
 8000712:	4a28      	ldr	r2, [pc, #160]	@ (80007b4 <SystemInit+0x144>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <SystemInit+0x134>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <SystemInit+0x134>)
 800071e:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <SystemInit+0x144>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <SystemInit+0x134>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1d      	ldr	r2, [pc, #116]	@ (80007a4 <SystemInit+0x134>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <SystemInit+0x134>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <SystemInit+0x148>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a1e      	ldr	r2, [pc, #120]	@ (80007b8 <SystemInit+0x148>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <SystemInit+0x14c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <SystemInit+0x150>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <SystemInit+0x154>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <SystemInit+0x134>)
 800075c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d113      	bne.n	8000790 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <SystemInit+0x134>)
 800076a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800076e:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <SystemInit+0x134>)
 8000770:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000774:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <SystemInit+0x158>)
 800077a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800077e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <SystemInit+0x134>)
 8000782:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000786:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <SystemInit+0x134>)
 8000788:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800078c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	52002000 	.word	0x52002000
 80007a4:	58024400 	.word	0x58024400
 80007a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007ac:	02020200 	.word	0x02020200
 80007b0:	01ff0000 	.word	0x01ff0000
 80007b4:	01010280 	.word	0x01010280
 80007b8:	580000c0 	.word	0x580000c0
 80007bc:	5c001000 	.word	0x5c001000
 80007c0:	ffff0000 	.word	0xffff0000
 80007c4:	51008108 	.word	0x51008108
 80007c8:	52004000 	.word	0x52004000

080007cc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007d6:	f023 0302 	bic.w	r3, r3, #2
 80007da:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007dc:	bf00      	nop
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f9      	beq.n	80007de <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	58024800 	.word	0x58024800

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000806:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000808:	bf00      	nop
 800080a:	4b6f      	ldr	r3, [pc, #444]	@ (80009c8 <main+0x1cc>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000812:	2b00      	cmp	r3, #0
 8000814:	d004      	beq.n	8000820 <main+0x24>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	dcf4      	bgt.n	800080a <main+0xe>
  if ( timeout < 0 )
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	da01      	bge.n	800082a <main+0x2e>
  {
  Error_Handler();
 8000826:	f000 fc1b 	bl	8001060 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082a:	f001 f89b 	bl	8001964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082e:	f000 f8d7 	bl	80009e0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000832:	4b65      	ldr	r3, [pc, #404]	@ (80009c8 <main+0x1cc>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000838:	4a63      	ldr	r2, [pc, #396]	@ (80009c8 <main+0x1cc>)
 800083a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800083e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000842:	4b61      	ldr	r3, [pc, #388]	@ (80009c8 <main+0x1cc>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000850:	2000      	movs	r0, #0
 8000852:	f001 fca7 	bl	80021a4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000856:	2100      	movs	r1, #0
 8000858:	2000      	movs	r0, #0
 800085a:	f001 fcbd 	bl	80021d8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800085e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000862:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000864:	bf00      	nop
 8000866:	4b58      	ldr	r3, [pc, #352]	@ (80009c8 <main+0x1cc>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800086e:	2b00      	cmp	r3, #0
 8000870:	d104      	bne.n	800087c <main+0x80>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	1e5a      	subs	r2, r3, #1
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	dcf4      	bgt.n	8000866 <main+0x6a>
if ( timeout < 0 )
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	da01      	bge.n	8000886 <main+0x8a>
{
Error_Handler();
 8000882:	f000 fbed 	bl	8001060 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f000 faaf 	bl	8000de8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800088a:	f000 f913 	bl	8000ab4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800088e:	f000 f9a5 	bl	8000bdc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000892:	f000 fa31 	bl	8000cf8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000896:	2000      	movs	r0, #0
 8000898:	f000 fe38 	bl	800150c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800089c:	2001      	movs	r0, #1
 800089e:	f000 fe35 	bl	800150c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008a2:	2002      	movs	r0, #2
 80008a4:	f000 fe32 	bl	800150c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80008a8:	2101      	movs	r1, #1
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fef8 	bl	80016a0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008b0:	4b46      	ldr	r3, [pc, #280]	@ (80009cc <main+0x1d0>)
 80008b2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b6:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008b8:	4b44      	ldr	r3, [pc, #272]	@ (80009cc <main+0x1d0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008be:	4b43      	ldr	r3, [pc, #268]	@ (80009cc <main+0x1d0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80008c4:	4b41      	ldr	r3, [pc, #260]	@ (80009cc <main+0x1d0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80008ca:	4b40      	ldr	r3, [pc, #256]	@ (80009cc <main+0x1d0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80008d0:	493e      	ldr	r1, [pc, #248]	@ (80009cc <main+0x1d0>)
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 ff68 	bl	80017a8 <BSP_COM_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <main+0xe6>
  {
    Error_Handler();
 80008de:	f000 fbbf 	bl	8001060 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80008e2:	483b      	ldr	r0, [pc, #236]	@ (80009d0 <main+0x1d4>)
 80008e4:	f005 fe60 	bl	80065a8 <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 fe85 	bl	80015f8 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f000 fe82 	bl	80015f8 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 80008f4:	2002      	movs	r0, #2
 80008f6:	f000 fe7f 	bl	80015f8 <BSP_LED_On>
//
//  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK) {
//	  BSP_LED_Off(LED_GREEN);
//  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK) {
 80008fa:	210c      	movs	r1, #12
 80008fc:	4835      	ldr	r0, [pc, #212]	@ (80009d4 <main+0x1d8>)
 80008fe:	f003 f835 	bl	800396c <HAL_TIM_PWM_Start>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d002      	beq.n	800090e <main+0x112>
	  BSP_LED_Off(LED_GREEN);
 8000908:	2000      	movs	r0, #0
 800090a:	f000 fe9f 	bl	800164c <BSP_LED_Off>
  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK) {
 800090e:	2104      	movs	r1, #4
 8000910:	4830      	ldr	r0, [pc, #192]	@ (80009d4 <main+0x1d8>)
 8000912:	f003 f82b 	bl	800396c <HAL_TIM_PWM_Start>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d002      	beq.n	8000922 <main+0x126>
	  BSP_LED_Off(LED_GREEN);
 800091c:	2000      	movs	r0, #0
 800091e:	f000 fe95 	bl	800164c <BSP_LED_Off>
  }

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000922:	2100      	movs	r1, #0
 8000924:	482c      	ldr	r0, [pc, #176]	@ (80009d8 <main+0x1dc>)
 8000926:	f003 f991 	bl	8003c4c <HAL_TIM_IC_Start_IT>
//
//      /* ..... Perform your action ..... */
//    }

	  // Motor #1
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2110      	movs	r1, #16
 800092e:	482b      	ldr	r0, [pc, #172]	@ (80009dc <main+0x1e0>)
 8000930:	f001 fc1e 	bl	8002170 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2120      	movs	r1, #32
 8000938:	4828      	ldr	r0, [pc, #160]	@ (80009dc <main+0x1e0>)
 800093a:	f001 fc19 	bl	8002170 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);

	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 800);
 800093e:	4b25      	ldr	r3, [pc, #148]	@ (80009d4 <main+0x1d8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000946:	641a      	str	r2, [r3, #64]	@ 0x40


	  // Motor #2
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	2140      	movs	r1, #64	@ 0x40
 800094c:	4823      	ldr	r0, [pc, #140]	@ (80009dc <main+0x1e0>)
 800094e:	f001 fc0f 	bl	8002170 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000958:	4820      	ldr	r0, [pc, #128]	@ (80009dc <main+0x1e0>)
 800095a:	f001 fc09 	bl	8002170 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);

	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 800);
 800095e:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <main+0x1d8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000966:	639a      	str	r2, [r3, #56]	@ 0x38




	  BSP_LED_On(LED_RED);
 8000968:	2002      	movs	r0, #2
 800096a:	f000 fe45 	bl	80015f8 <BSP_LED_On>
	  HAL_Delay(1000);
 800096e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000972:	f001 f889 	bl	8001a88 <HAL_Delay>

	  // Motor #1

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	2110      	movs	r1, #16
 800097a:	4818      	ldr	r0, [pc, #96]	@ (80009dc <main+0x1e0>)
 800097c:	f001 fbf8 	bl	8002170 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2120      	movs	r1, #32
 8000984:	4815      	ldr	r0, [pc, #84]	@ (80009dc <main+0x1e0>)
 8000986:	f001 fbf3 	bl	8002170 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);

	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1000);
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <main+0x1d8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000992:	641a      	str	r2, [r3, #64]	@ 0x40


	  // Motor #2
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2140      	movs	r1, #64	@ 0x40
 8000998:	4810      	ldr	r0, [pc, #64]	@ (80009dc <main+0x1e0>)
 800099a:	f001 fbe9 	bl	8002170 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009a4:	480d      	ldr	r0, [pc, #52]	@ (80009dc <main+0x1e0>)
 80009a6:	f001 fbe3 	bl	8002170 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);

	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 800);
 80009aa:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <main+0x1d8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80009b2:	639a      	str	r2, [r3, #56]	@ 0x38




	  BSP_LED_Off(LED_RED);
 80009b4:	2002      	movs	r0, #2
 80009b6:	f000 fe49 	bl	800164c <BSP_LED_Off>

	  HAL_Delay(1000);
 80009ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009be:	f001 f863 	bl	8001a88 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80009c2:	bf00      	nop
 80009c4:	e7b1      	b.n	800092a <main+0x12e>
 80009c6:	bf00      	nop
 80009c8:	58024400 	.word	0x58024400
 80009cc:	240000a4 	.word	0x240000a4
 80009d0:	0800729c 	.word	0x0800729c
 80009d4:	24000104 	.word	0x24000104
 80009d8:	240000b8 	.word	0x240000b8
 80009dc:	58020000 	.word	0x58020000

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b09c      	sub	sp, #112	@ 0x70
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ea:	224c      	movs	r2, #76	@ 0x4c
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f005 fe2f 	bl	8006652 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2220      	movs	r2, #32
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f005 fe29 	bl	8006652 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a00:	2004      	movs	r0, #4
 8000a02:	f001 fbfd 	bl	8002200 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b28      	ldr	r3, [pc, #160]	@ (8000aac <SystemClock_Config+0xcc>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0e:	4a27      	ldr	r2, [pc, #156]	@ (8000aac <SystemClock_Config+0xcc>)
 8000a10:	f023 0301 	bic.w	r3, r3, #1
 8000a14:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a16:	4b25      	ldr	r3, [pc, #148]	@ (8000aac <SystemClock_Config+0xcc>)
 8000a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	4b23      	ldr	r3, [pc, #140]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a28:	4a21      	ldr	r2, [pc, #132]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a3c:	bf00      	nop
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a4a:	d1f8      	bne.n	8000a3e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a54:	2340      	movs	r3, #64	@ 0x40
 8000a56:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 fc27 	bl	80022b4 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a6c:	f000 faf8 	bl	8001060 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	233f      	movs	r3, #63	@ 0x3f
 8000a72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2101      	movs	r1, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f002 f867 	bl	8002b68 <HAL_RCC_ClockConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000aa0:	f000 fade 	bl	8001060 <Error_Handler>
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3770      	adds	r7, #112	@ 0x70
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	58000400 	.word	0x58000400
 8000ab0:	58024800 	.word	0x58024800

08000ab4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	@ 0x30
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd8 <MX_TIM2_Init+0x124>)
 8000ae2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 639;
 8000ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8000bd8 <MX_TIM2_Init+0x124>)
 8000aea:	f240 227f 	movw	r2, #639	@ 0x27f
 8000aee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af0:	4b39      	ldr	r3, [pc, #228]	@ (8000bd8 <MX_TIM2_Init+0x124>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000af6:	4b38      	ldr	r3, [pc, #224]	@ (8000bd8 <MX_TIM2_Init+0x124>)
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afe:	4b36      	ldr	r3, [pc, #216]	@ (8000bd8 <MX_TIM2_Init+0x124>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b04:	4b34      	ldr	r3, [pc, #208]	@ (8000bd8 <MX_TIM2_Init+0x124>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b0a:	4833      	ldr	r0, [pc, #204]	@ (8000bd8 <MX_TIM2_Init+0x124>)
 8000b0c:	f002 fe76 	bl	80037fc <HAL_TIM_Base_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b16:	f000 faa3 	bl	8001060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b20:	f107 0320 	add.w	r3, r7, #32
 8000b24:	4619      	mov	r1, r3
 8000b26:	482c      	ldr	r0, [pc, #176]	@ (8000bd8 <MX_TIM2_Init+0x124>)
 8000b28:	f003 fc98 	bl	800445c <HAL_TIM_ConfigClockSource>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000b32:	f000 fa95 	bl	8001060 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000b36:	4828      	ldr	r0, [pc, #160]	@ (8000bd8 <MX_TIM2_Init+0x124>)
 8000b38:	f003 f826 	bl	8003b88 <HAL_TIM_IC_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b42:	f000 fa8d 	bl	8001060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4820      	ldr	r0, [pc, #128]	@ (8000bd8 <MX_TIM2_Init+0x124>)
 8000b56:	f004 fb49 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000b60:	f000 fa7e 	bl	8001060 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8000b70:	230f      	movs	r3, #15
 8000b72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4817      	ldr	r0, [pc, #92]	@ (8000bd8 <MX_TIM2_Init+0x124>)
 8000b7c:	f003 fabd 	bl	80040fa <HAL_TIM_IC_ConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000b86:	f000 fa6b 	bl	8001060 <Error_Handler>
  }
  sConfigIC.ICFilter = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2204      	movs	r2, #4
 8000b92:	4619      	mov	r1, r3
 8000b94:	4810      	ldr	r0, [pc, #64]	@ (8000bd8 <MX_TIM2_Init+0x124>)
 8000b96:	f003 fab0 	bl	80040fa <HAL_TIM_IC_ConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000ba0:	f000 fa5e 	bl	8001060 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2208      	movs	r2, #8
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480b      	ldr	r0, [pc, #44]	@ (8000bd8 <MX_TIM2_Init+0x124>)
 8000bac:	f003 faa5 	bl	80040fa <HAL_TIM_IC_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000bb6:	f000 fa53 	bl	8001060 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	220c      	movs	r2, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <MX_TIM2_Init+0x124>)
 8000bc2:	f003 fa9a 	bl	80040fa <HAL_TIM_IC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000bcc:	f000 fa48 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3730      	adds	r7, #48	@ 0x30
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	240000b8 	.word	0x240000b8

08000bdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	@ 0x38
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	615a      	str	r2, [r3, #20]
 8000c0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c0e:	4b38      	ldr	r3, [pc, #224]	@ (8000cf0 <MX_TIM3_Init+0x114>)
 8000c10:	4a38      	ldr	r2, [pc, #224]	@ (8000cf4 <MX_TIM3_Init+0x118>)
 8000c12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c14:	4b36      	ldr	r3, [pc, #216]	@ (8000cf0 <MX_TIM3_Init+0x114>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b35      	ldr	r3, [pc, #212]	@ (8000cf0 <MX_TIM3_Init+0x114>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 799;
 8000c20:	4b33      	ldr	r3, [pc, #204]	@ (8000cf0 <MX_TIM3_Init+0x114>)
 8000c22:	f240 321f 	movw	r2, #799	@ 0x31f
 8000c26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c28:	4b31      	ldr	r3, [pc, #196]	@ (8000cf0 <MX_TIM3_Init+0x114>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2e:	4b30      	ldr	r3, [pc, #192]	@ (8000cf0 <MX_TIM3_Init+0x114>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c34:	482e      	ldr	r0, [pc, #184]	@ (8000cf0 <MX_TIM3_Init+0x114>)
 8000c36:	f002 fde1 	bl	80037fc <HAL_TIM_Base_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c40:	f000 fa0e 	bl	8001060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4827      	ldr	r0, [pc, #156]	@ (8000cf0 <MX_TIM3_Init+0x114>)
 8000c52:	f003 fc03 	bl	800445c <HAL_TIM_ConfigClockSource>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c5c:	f000 fa00 	bl	8001060 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c60:	4823      	ldr	r0, [pc, #140]	@ (8000cf0 <MX_TIM3_Init+0x114>)
 8000c62:	f002 fe22 	bl	80038aa <HAL_TIM_PWM_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c6c:	f000 f9f8 	bl	8001060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	481c      	ldr	r0, [pc, #112]	@ (8000cf0 <MX_TIM3_Init+0x114>)
 8000c80:	f004 fab4 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c8a:	f000 f9e9 	bl	8001060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c8e:	2360      	movs	r3, #96	@ 0x60
 8000c90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4812      	ldr	r0, [pc, #72]	@ (8000cf0 <MX_TIM3_Init+0x114>)
 8000ca6:	f003 fac5 	bl	8004234 <HAL_TIM_PWM_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000cb0:	f000 f9d6 	bl	8001060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480d      	ldr	r0, [pc, #52]	@ (8000cf0 <MX_TIM3_Init+0x114>)
 8000cbc:	f003 faba 	bl	8004234 <HAL_TIM_PWM_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000cc6:	f000 f9cb 	bl	8001060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cca:	463b      	mov	r3, r7
 8000ccc:	220c      	movs	r2, #12
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4807      	ldr	r0, [pc, #28]	@ (8000cf0 <MX_TIM3_Init+0x114>)
 8000cd2:	f003 faaf 	bl	8004234 <HAL_TIM_PWM_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000cdc:	f000 f9c0 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ce0:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <MX_TIM3_Init+0x114>)
 8000ce2:	f000 fa7d 	bl	80011e0 <HAL_TIM_MspPostInit>

}
 8000ce6:	bf00      	nop
 8000ce8:	3738      	adds	r7, #56	@ 0x38
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	24000104 	.word	0x24000104
 8000cf4:	40000400 	.word	0x40000400

08000cf8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	@ 0x38
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
 8000d26:	615a      	str	r2, [r3, #20]
 8000d28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000de0 <MX_TIM4_Init+0xe8>)
 8000d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8000de4 <MX_TIM4_Init+0xec>)
 8000d2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d30:	4b2b      	ldr	r3, [pc, #172]	@ (8000de0 <MX_TIM4_Init+0xe8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d36:	4b2a      	ldr	r3, [pc, #168]	@ (8000de0 <MX_TIM4_Init+0xe8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d3c:	4b28      	ldr	r3, [pc, #160]	@ (8000de0 <MX_TIM4_Init+0xe8>)
 8000d3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <MX_TIM4_Init+0xe8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b25      	ldr	r3, [pc, #148]	@ (8000de0 <MX_TIM4_Init+0xe8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d50:	4823      	ldr	r0, [pc, #140]	@ (8000de0 <MX_TIM4_Init+0xe8>)
 8000d52:	f002 fd53 	bl	80037fc <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000d5c:	f000 f980 	bl	8001060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	481c      	ldr	r0, [pc, #112]	@ (8000de0 <MX_TIM4_Init+0xe8>)
 8000d6e:	f003 fb75 	bl	800445c <HAL_TIM_ConfigClockSource>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d78:	f000 f972 	bl	8001060 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d7c:	4818      	ldr	r0, [pc, #96]	@ (8000de0 <MX_TIM4_Init+0xe8>)
 8000d7e:	f002 fd94 	bl	80038aa <HAL_TIM_PWM_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d88:	f000 f96a 	bl	8001060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4811      	ldr	r0, [pc, #68]	@ (8000de0 <MX_TIM4_Init+0xe8>)
 8000d9c:	f004 fa26 	bl	80051ec <HAL_TIMEx_MasterConfigSynchronization>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000da6:	f000 f95b 	bl	8001060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000daa:	2360      	movs	r3, #96	@ 0x60
 8000dac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4807      	ldr	r0, [pc, #28]	@ (8000de0 <MX_TIM4_Init+0xe8>)
 8000dc2:	f003 fa37 	bl	8004234 <HAL_TIM_PWM_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000dcc:	f000 f948 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dd0:	4803      	ldr	r0, [pc, #12]	@ (8000de0 <MX_TIM4_Init+0xe8>)
 8000dd2:	f000 fa05 	bl	80011e0 <HAL_TIM_MspPostInit>

}
 8000dd6:	bf00      	nop
 8000dd8:	3738      	adds	r7, #56	@ 0x38
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	24000150 	.word	0x24000150
 8000de4:	40000800 	.word	0x40000800

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	@ 0x28
 8000dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e04:	4a59      	ldr	r2, [pc, #356]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0e:	4b57      	ldr	r3, [pc, #348]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1c:	4b53      	ldr	r3, [pc, #332]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e22:	4a52      	ldr	r2, [pc, #328]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e2c:	4b4f      	ldr	r3, [pc, #316]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e40:	4a4a      	ldr	r2, [pc, #296]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e4a:	4b48      	ldr	r3, [pc, #288]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e58:	4b44      	ldr	r3, [pc, #272]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5e:	4a43      	ldr	r2, [pc, #268]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e68:	4b40      	ldr	r3, [pc, #256]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6e:	f003 0308 	and.w	r3, r3, #8
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e76:	4b3d      	ldr	r3, [pc, #244]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7c:	4a3b      	ldr	r2, [pc, #236]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e86:	4b39      	ldr	r3, [pc, #228]	@ (8000f6c <MX_GPIO_Init+0x184>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8000e9a:	4835      	ldr	r0, [pc, #212]	@ (8000f70 <MX_GPIO_Init+0x188>)
 8000e9c:	f001 f968 	bl	8002170 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ea0:	2332      	movs	r3, #50	@ 0x32
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb0:	230b      	movs	r3, #11
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	482e      	ldr	r0, [pc, #184]	@ (8000f74 <MX_GPIO_Init+0x18c>)
 8000ebc:	f000 ffa8 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ec0:	2386      	movs	r3, #134	@ 0x86
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed0:	230b      	movs	r3, #11
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4825      	ldr	r0, [pc, #148]	@ (8000f70 <MX_GPIO_Init+0x188>)
 8000edc:	f000 ff98 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
 8000ee0:	f44f 638e 	mov.w	r3, #1136	@ 0x470
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481d      	ldr	r0, [pc, #116]	@ (8000f70 <MX_GPIO_Init+0x188>)
 8000efa:	f000 ff89 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000efe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f10:	230b      	movs	r3, #11
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4817      	ldr	r0, [pc, #92]	@ (8000f78 <MX_GPIO_Init+0x190>)
 8000f1c:	f000 ff78 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f20:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f32:	230a      	movs	r3, #10
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <MX_GPIO_Init+0x188>)
 8000f3e:	f000 ff67 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f42:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f54:	230b      	movs	r3, #11
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <MX_GPIO_Init+0x194>)
 8000f60:	f000 ff56 	bl	8001e10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	@ 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	58024400 	.word	0x58024400
 8000f70:	58020000 	.word	0x58020000
 8000f74:	58020800 	.word	0x58020800
 8000f78:	58020400 	.word	0x58020400
 8000f7c:	58021800 	.word	0x58021800

08000f80 <HAL_TIM_IC_CaptureCallback>:

uint32_t capture[4] = {0};
double RPM[4] = {0};

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d13d      	bne.n	8001012 <HAL_TIM_IC_CaptureCallback+0x92>
    {
    	if (capture[0] == 0)
 8000f96:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10e      	bne.n	8000fbc <HAL_TIM_IC_CaptureCallback+0x3c>
    	{
    		capture[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f003 fb53 	bl	800464c <HAL_TIM_ReadCapturedValue>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a21      	ldr	r2, [pc, #132]	@ (8001030 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000faa:	6013      	str	r3, [r2, #0]
    		RPM[0] = 0;
 8000fac:	4921      	ldr	r1, [pc, #132]	@ (8001034 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	e9c1 2300 	strd	r2, r3, [r1]
    		capture[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
    		RPM[0] = (double)(capture[0] - prev_capture)*0.00001;
    		RPM[0] = 1.0 / (6.0 * RPM[0]) * 60.0;
    	}
    }
}
 8000fba:	e02a      	b.n	8001012 <HAL_TIM_IC_CaptureCallback+0x92>
    		uint32_t prev_capture = capture[0];
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
    		capture[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f003 fb41 	bl	800464c <HAL_TIM_ReadCapturedValue>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a18      	ldr	r2, [pc, #96]	@ (8001030 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000fce:	6013      	str	r3, [r2, #0]
    		RPM[0] = (double)(capture[0] - prev_capture)*0.00001;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000fe0:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8001020 <HAL_TIM_IC_CaptureCallback+0xa0>
 8000fe4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000fea:	ed83 7b00 	vstr	d7, [r3]
    		RPM[0] = 1.0 / (6.0 * RPM[0]) * 60.0;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000ff0:	ed93 7b00 	vldr	d7, [r3]
 8000ff4:	eeb1 6b08 	vmov.f64	d6, #24	@ 0x40c00000  6.0
 8000ff8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ffc:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8001000:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001004:	ed9f 6b08 	vldr	d6, [pc, #32]	@ 8001028 <HAL_TIM_IC_CaptureCallback+0xa8>
 8001008:	ee27 7b06 	vmul.f64	d7, d7, d6
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800100e:	ed83 7b00 	vstr	d7, [r3]
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	f3af 8000 	nop.w
 8001020:	88e368f1 	.word	0x88e368f1
 8001024:	3ee4f8b5 	.word	0x3ee4f8b5
 8001028:	00000000 	.word	0x00000000
 800102c:	404e0000 	.word	0x404e0000
 8001030:	2400019c 	.word	0x2400019c
 8001034:	240001b0 	.word	0x240001b0

08001038 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8001048:	4b04      	ldr	r3, [pc, #16]	@ (800105c <BSP_PB_Callback+0x24>)
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	240000b4 	.word	0x240000b4

08001060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
}
 8001066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <Error_Handler+0x8>

0800106c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <HAL_MspInit+0x30>)
 8001074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001078:	4a08      	ldr	r2, [pc, #32]	@ (800109c <HAL_MspInit+0x30>)
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_MspInit+0x30>)
 8001084:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	58024400 	.word	0x58024400

080010a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	@ 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010c0:	d156      	bne.n	8001170 <HAL_TIM_Base_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010c2:	4b42      	ldr	r3, [pc, #264]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 80010c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010c8:	4a40      	ldr	r2, [pc, #256]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010d2:	4b3e      	ldr	r3, [pc, #248]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 80010d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	4b3a      	ldr	r3, [pc, #232]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e6:	4a39      	ldr	r2, [pc, #228]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f0:	4b36      	ldr	r3, [pc, #216]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b33      	ldr	r3, [pc, #204]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001104:	4a31      	ldr	r2, [pc, #196]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110e:	4b2f      	ldr	r3, [pc, #188]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800111c:	2309      	movs	r3, #9
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800112c:	2301      	movs	r3, #1
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4826      	ldr	r0, [pc, #152]	@ (80011d0 <HAL_TIM_Base_MspInit+0x130>)
 8001138:	f000 fe6a 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800113c:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800114e:	2301      	movs	r3, #1
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	481e      	ldr	r0, [pc, #120]	@ (80011d4 <HAL_TIM_Base_MspInit+0x134>)
 800115a:	f000 fe59 	bl	8001e10 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	201c      	movs	r0, #28
 8001164:	f000 fd9b 	bl	8001c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001168:	201c      	movs	r0, #28
 800116a:	f000 fdb2 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800116e:	e028      	b.n	80011c2 <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM3)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a18      	ldr	r2, [pc, #96]	@ (80011d8 <HAL_TIM_Base_MspInit+0x138>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d10f      	bne.n	800119a <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800117a:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 800117c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001180:	4a12      	ldr	r2, [pc, #72]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 8001182:	f043 0302 	orr.w	r3, r3, #2
 8001186:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 800118c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	e013      	b.n	80011c2 <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM4)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <HAL_TIM_Base_MspInit+0x13c>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d10e      	bne.n	80011c2 <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011a4:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 80011a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011aa:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <HAL_TIM_Base_MspInit+0x12c>)
 80011b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
}
 80011c2:	bf00      	nop
 80011c4:	3730      	adds	r7, #48	@ 0x30
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58020000 	.word	0x58020000
 80011d4:	58020400 	.word	0x58020400
 80011d8:	40000400 	.word	0x40000400
 80011dc:	40000800 	.word	0x40000800

080011e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a35      	ldr	r2, [pc, #212]	@ (80012d4 <HAL_TIM_MspPostInit+0xf4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d13f      	bne.n	8001282 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b35      	ldr	r3, [pc, #212]	@ (80012d8 <HAL_TIM_MspPostInit+0xf8>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001208:	4a33      	ldr	r2, [pc, #204]	@ (80012d8 <HAL_TIM_MspPostInit+0xf8>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001212:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <HAL_TIM_MspPostInit+0xf8>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001220:	4b2d      	ldr	r3, [pc, #180]	@ (80012d8 <HAL_TIM_MspPostInit+0xf8>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001226:	4a2c      	ldr	r2, [pc, #176]	@ (80012d8 <HAL_TIM_MspPostInit+0xf8>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001230:	4b29      	ldr	r3, [pc, #164]	@ (80012d8 <HAL_TIM_MspPostInit+0xf8>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800123e:	2302      	movs	r3, #2
 8001240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800124e:	2302      	movs	r3, #2
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4820      	ldr	r0, [pc, #128]	@ (80012dc <HAL_TIM_MspPostInit+0xfc>)
 800125a:	f000 fdd9 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800125e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001270:	2302      	movs	r3, #2
 8001272:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4819      	ldr	r0, [pc, #100]	@ (80012e0 <HAL_TIM_MspPostInit+0x100>)
 800127c:	f000 fdc8 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001280:	e024      	b.n	80012cc <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM4)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a17      	ldr	r2, [pc, #92]	@ (80012e4 <HAL_TIM_MspPostInit+0x104>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d11f      	bne.n	80012cc <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <HAL_TIM_MspPostInit+0xf8>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	4a11      	ldr	r2, [pc, #68]	@ (80012d8 <HAL_TIM_MspPostInit+0xf8>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800129c:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <HAL_TIM_MspPostInit+0xf8>)
 800129e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012bc:	2302      	movs	r3, #2
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4808      	ldr	r0, [pc, #32]	@ (80012e8 <HAL_TIM_MspPostInit+0x108>)
 80012c8:	f000 fda2 	bl	8001e10 <HAL_GPIO_Init>
}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	@ 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40000400 	.word	0x40000400
 80012d8:	58024400 	.word	0x58024400
 80012dc:	58020400 	.word	0x58020400
 80012e0:	58020800 	.word	0x58020800
 80012e4:	40000800 	.word	0x40000800
 80012e8:	58020c00 	.word	0x58020c00

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <NMI_Handler+0x4>

080012f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <MemManage_Handler+0x4>

08001304 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <UsageFault_Handler+0x4>

08001314 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001342:	f000 fb81 	bl	8001a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <TIM2_IRQHandler+0x10>)
 8001352:	f002 fdcb 	bl	8003eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	240000b8 	.word	0x240000b8

08001360 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001364:	2000      	movs	r0, #0
 8001366:	f000 fa0d 	bl	8001784 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}

0800136e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e00a      	b.n	8001396 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001380:	f3af 8000 	nop.w
 8001384:	4601      	mov	r1, r0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	1c5a      	adds	r2, r3, #1
 800138a:	60ba      	str	r2, [r7, #8]
 800138c:	b2ca      	uxtb	r2, r1
 800138e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	429a      	cmp	r2, r3
 800139c:	dbf0      	blt.n	8001380 <_read+0x12>
  }

  return len;
 800139e:	687b      	ldr	r3, [r7, #4]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e009      	b.n	80013ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	60ba      	str	r2, [r7, #8]
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fa52 	bl	800186c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3301      	adds	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dbf1      	blt.n	80013ba <_write+0x12>
  }
  return len;
 80013d6:	687b      	ldr	r3, [r7, #4]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_close>:

int _close(int file)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001408:	605a      	str	r2, [r3, #4]
  return 0;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_isatty>:

int _isatty(int file)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001420:	2301      	movs	r3, #1
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800142e:	b480      	push	{r7}
 8001430:	b085      	sub	sp, #20
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001450:	4a14      	ldr	r2, [pc, #80]	@ (80014a4 <_sbrk+0x5c>)
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <_sbrk+0x60>)
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800145c:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001464:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <_sbrk+0x64>)
 8001466:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <_sbrk+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	429a      	cmp	r2, r3
 8001476:	d207      	bcs.n	8001488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001478:	f005 f93a 	bl	80066f0 <__errno>
 800147c:	4603      	mov	r3, r0
 800147e:	220c      	movs	r2, #12
 8001480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
 8001486:	e009      	b.n	800149c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148e:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	4a05      	ldr	r2, [pc, #20]	@ (80014ac <_sbrk+0x64>)
 8001498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	24080000 	.word	0x24080000
 80014a8:	00000400 	.word	0x00000400
 80014ac:	240001d0 	.word	0x240001d0
 80014b0:	240003c8 	.word	0x240003c8

080014b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014b4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80014f0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80014b8:	f7ff f988 	bl	80007cc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014bc:	f7ff f8d8 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c0:	480c      	ldr	r0, [pc, #48]	@ (80014f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014c2:	490d      	ldr	r1, [pc, #52]	@ (80014f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c4:	4a0d      	ldr	r2, [pc, #52]	@ (80014fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001504 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e6:	f005 f909 	bl	80066fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ea:	f7ff f987 	bl	80007fc <main>
  bx  lr
 80014ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014f8:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80014fc:	08007330 	.word	0x08007330
  ldr r2, =_sbss
 8001500:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001504:	240003c4 	.word	0x240003c4

08001508 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC3_IRQHandler>
	...

0800150c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	@ 0x30
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d009      	beq.n	8001534 <BSP_LED_Init+0x28>
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d006      	beq.n	8001534 <BSP_LED_Init+0x28>
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d003      	beq.n	8001534 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800152c:	f06f 0301 	mvn.w	r3, #1
 8001530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001532:	e055      	b.n	80015e0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10f      	bne.n	800155a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800153a:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <BSP_LED_Init+0xe0>)
 800153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001540:	4a2a      	ldr	r2, [pc, #168]	@ (80015ec <BSP_LED_Init+0xe0>)
 8001542:	f043 0302 	orr.w	r3, r3, #2
 8001546:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800154a:	4b28      	ldr	r3, [pc, #160]	@ (80015ec <BSP_LED_Init+0xe0>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	e021      	b.n	800159e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d10f      	bne.n	8001580 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001560:	4b22      	ldr	r3, [pc, #136]	@ (80015ec <BSP_LED_Init+0xe0>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001566:	4a21      	ldr	r2, [pc, #132]	@ (80015ec <BSP_LED_Init+0xe0>)
 8001568:	f043 0310 	orr.w	r3, r3, #16
 800156c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001570:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <BSP_LED_Init+0xe0>)
 8001572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	e00e      	b.n	800159e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001580:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <BSP_LED_Init+0xe0>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001586:	4a19      	ldr	r2, [pc, #100]	@ (80015ec <BSP_LED_Init+0xe0>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001590:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <BSP_LED_Init+0xe0>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4a13      	ldr	r2, [pc, #76]	@ (80015f0 <BSP_LED_Init+0xe4>)
 80015a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015a6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	4a0f      	ldr	r2, [pc, #60]	@ (80015f4 <BSP_LED_Init+0xe8>)
 80015b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015bc:	f107 0218 	add.w	r2, r7, #24
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fc24 	bl	8001e10 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <BSP_LED_Init+0xe8>)
 80015cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	4a07      	ldr	r2, [pc, #28]	@ (80015f0 <BSP_LED_Init+0xe4>)
 80015d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015d8:	2200      	movs	r2, #0
 80015da:	4619      	mov	r1, r3
 80015dc:	f000 fdc8 	bl	8002170 <HAL_GPIO_WritePin>
  }

  return ret;
 80015e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3730      	adds	r7, #48	@ 0x30
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	58024400 	.word	0x58024400
 80015f0:	080072c8 	.word	0x080072c8
 80015f4:	2400000c 	.word	0x2400000c

080015f8 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d009      	beq.n	8001620 <BSP_LED_On+0x28>
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d006      	beq.n	8001620 <BSP_LED_On+0x28>
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d003      	beq.n	8001620 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001618:	f06f 0301 	mvn.w	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	e00b      	b.n	8001638 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	4a08      	ldr	r2, [pc, #32]	@ (8001644 <BSP_LED_On+0x4c>)
 8001624:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	4a07      	ldr	r2, [pc, #28]	@ (8001648 <BSP_LED_On+0x50>)
 800162c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001630:	2201      	movs	r2, #1
 8001632:	4619      	mov	r1, r3
 8001634:	f000 fd9c 	bl	8002170 <HAL_GPIO_WritePin>
  }

  return ret;
 8001638:	68fb      	ldr	r3, [r7, #12]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2400000c 	.word	0x2400000c
 8001648:	080072c8 	.word	0x080072c8

0800164c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d009      	beq.n	8001674 <BSP_LED_Off+0x28>
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d006      	beq.n	8001674 <BSP_LED_Off+0x28>
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d003      	beq.n	8001674 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800166c:	f06f 0301 	mvn.w	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	e00b      	b.n	800168c <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	4a08      	ldr	r2, [pc, #32]	@ (8001698 <BSP_LED_Off+0x4c>)
 8001678:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	4a07      	ldr	r2, [pc, #28]	@ (800169c <BSP_LED_Off+0x50>)
 8001680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	f000 fd72 	bl	8002170 <HAL_GPIO_WritePin>
  }

  return ret;
 800168c:	68fb      	ldr	r3, [r7, #12]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2400000c 	.word	0x2400000c
 800169c:	080072c8 	.word	0x080072c8

080016a0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	460a      	mov	r2, r1
 80016aa:	71fb      	strb	r3, [r7, #7]
 80016ac:	4613      	mov	r3, r2
 80016ae:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80016b0:	4b2e      	ldr	r3, [pc, #184]	@ (800176c <BSP_PB_Init+0xcc>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b6:	4a2d      	ldr	r2, [pc, #180]	@ (800176c <BSP_PB_Init+0xcc>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c0:	4b2a      	ldr	r3, [pc, #168]	@ (800176c <BSP_PB_Init+0xcc>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80016ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016d2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80016d4:	2302      	movs	r3, #2
 80016d6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10c      	bne.n	80016fc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	4a21      	ldr	r2, [pc, #132]	@ (8001770 <BSP_PB_Init+0xd0>)
 80016ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ee:	f107 020c 	add.w	r2, r7, #12
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fb8b 	bl	8001e10 <HAL_GPIO_Init>
 80016fa:	e031      	b.n	8001760 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80016fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001700:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	4a1a      	ldr	r2, [pc, #104]	@ (8001770 <BSP_PB_Init+0xd0>)
 8001706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170a:	f107 020c 	add.w	r2, r7, #12
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fb7d 	bl	8001e10 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4a16      	ldr	r2, [pc, #88]	@ (8001774 <BSP_PB_Init+0xd4>)
 800171c:	441a      	add	r2, r3
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	4915      	ldr	r1, [pc, #84]	@ (8001778 <BSP_PB_Init+0xd8>)
 8001722:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001726:	4619      	mov	r1, r3
 8001728:	4610      	mov	r0, r2
 800172a:	f000 fb20 	bl	8001d6e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4a10      	ldr	r2, [pc, #64]	@ (8001774 <BSP_PB_Init+0xd4>)
 8001734:	1898      	adds	r0, r3, r2
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	4a10      	ldr	r2, [pc, #64]	@ (800177c <BSP_PB_Init+0xdc>)
 800173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173e:	461a      	mov	r2, r3
 8001740:	2100      	movs	r1, #0
 8001742:	f000 faf5 	bl	8001d30 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001746:	2028      	movs	r0, #40	@ 0x28
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <BSP_PB_Init+0xe0>)
 800174c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001750:	2200      	movs	r2, #0
 8001752:	4619      	mov	r1, r3
 8001754:	f000 faa3 	bl	8001c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001758:	2328      	movs	r3, #40	@ 0x28
 800175a:	4618      	mov	r0, r3
 800175c:	f000 fab9 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	58024400 	.word	0x58024400
 8001770:	24000018 	.word	0x24000018
 8001774:	240001d4 	.word	0x240001d4
 8001778:	080072d0 	.word	0x080072d0
 800177c:	2400001c 	.word	0x2400001c
 8001780:	24000020 	.word	0x24000020

08001784 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <BSP_PB_IRQHandler+0x20>)
 8001794:	4413      	add	r3, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f000 fafe 	bl	8001d98 <HAL_EXTI_IRQHandler>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	240001d4 	.word	0x240001d4

080017a8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017be:	f06f 0301 	mvn.w	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e018      	b.n	80017f8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2294      	movs	r2, #148	@ 0x94
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001804 <BSP_COM_Init+0x5c>)
 80017d0:	4413      	add	r3, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f86e 	bl	80018b4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	2294      	movs	r2, #148	@ 0x94
 80017dc:	fb02 f303 	mul.w	r3, r2, r3
 80017e0:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <BSP_COM_Init+0x5c>)
 80017e2:	4413      	add	r3, r2
 80017e4:	6839      	ldr	r1, [r7, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f80e 	bl	8001808 <MX_USART3_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80017f2:	f06f 0303 	mvn.w	r3, #3
 80017f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80017f8:	68fb      	ldr	r3, [r7, #12]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	240001dc 	.word	0x240001dc

08001808 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <MX_USART3_Init+0x60>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	220c      	movs	r2, #12
 8001826:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	895b      	ldrh	r3, [r3, #10]
 800182c:	461a      	mov	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	891b      	ldrh	r3, [r3, #8]
 800183e:	461a      	mov	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	899b      	ldrh	r3, [r3, #12]
 8001848:	461a      	mov	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001854:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f003 fd74 	bl	8005344 <HAL_UART_Init>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	24000008 	.word	0x24000008

0800186c <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <__io_putchar+0x30>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	2394      	movs	r3, #148	@ 0x94
 800187c:	fb02 f303 	mul.w	r3, r2, r3
 8001880:	4a07      	ldr	r2, [pc, #28]	@ (80018a0 <__io_putchar+0x34>)
 8001882:	1898      	adds	r0, r3, r2
 8001884:	1d39      	adds	r1, r7, #4
 8001886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800188a:	2201      	movs	r2, #1
 800188c:	f003 fdb4 	bl	80053f8 <HAL_UART_Transmit>
  return ch;
 8001890:	687b      	ldr	r3, [r7, #4]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	24000270 	.word	0x24000270
 80018a0:	240001dc 	.word	0x240001dc

080018a4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f7ff fbc5 	bl	8001038 <BSP_PB_Callback>
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	@ 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80018bc:	4b27      	ldr	r3, [pc, #156]	@ (800195c <COM1_MspInit+0xa8>)
 80018be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c2:	4a26      	ldr	r2, [pc, #152]	@ (800195c <COM1_MspInit+0xa8>)
 80018c4:	f043 0308 	orr.w	r3, r3, #8
 80018c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018cc:	4b23      	ldr	r3, [pc, #140]	@ (800195c <COM1_MspInit+0xa8>)
 80018ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80018da:	4b20      	ldr	r3, [pc, #128]	@ (800195c <COM1_MspInit+0xa8>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e0:	4a1e      	ldr	r2, [pc, #120]	@ (800195c <COM1_MspInit+0xa8>)
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ea:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <COM1_MspInit+0xa8>)
 80018ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80018f8:	4b18      	ldr	r3, [pc, #96]	@ (800195c <COM1_MspInit+0xa8>)
 80018fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018fe:	4a17      	ldr	r2, [pc, #92]	@ (800195c <COM1_MspInit+0xa8>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001904:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001908:	4b14      	ldr	r3, [pc, #80]	@ (800195c <COM1_MspInit+0xa8>)
 800190a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800190e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001916:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800191a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001920:	2302      	movs	r3, #2
 8001922:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001924:	2301      	movs	r3, #1
 8001926:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001928:	2307      	movs	r3, #7
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	480b      	ldr	r0, [pc, #44]	@ (8001960 <COM1_MspInit+0xac>)
 8001934:	f000 fa6c 	bl	8001e10 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001938:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800193c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001942:	2307      	movs	r3, #7
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4804      	ldr	r0, [pc, #16]	@ (8001960 <COM1_MspInit+0xac>)
 800194e:	f000 fa5f 	bl	8001e10 <HAL_GPIO_Init>
}
 8001952:	bf00      	nop
 8001954:	3728      	adds	r7, #40	@ 0x28
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	58024400 	.word	0x58024400
 8001960:	58020c00 	.word	0x58020c00

08001964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800196a:	2003      	movs	r0, #3
 800196c:	f000 f98c 	bl	8001c88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001970:	f001 fab0 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8001974:	4602      	mov	r2, r0
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <HAL_Init+0x68>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	f003 030f 	and.w	r3, r3, #15
 8001980:	4913      	ldr	r1, [pc, #76]	@ (80019d0 <HAL_Init+0x6c>)
 8001982:	5ccb      	ldrb	r3, [r1, r3]
 8001984:	f003 031f 	and.w	r3, r3, #31
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
 800198c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800198e:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <HAL_Init+0x68>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	4a0e      	ldr	r2, [pc, #56]	@ (80019d0 <HAL_Init+0x6c>)
 8001998:	5cd3      	ldrb	r3, [r2, r3]
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	fa22 f303 	lsr.w	r3, r2, r3
 80019a4:	4a0b      	ldr	r2, [pc, #44]	@ (80019d4 <HAL_Init+0x70>)
 80019a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019a8:	4a0b      	ldr	r2, [pc, #44]	@ (80019d8 <HAL_Init+0x74>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ae:	2000      	movs	r0, #0
 80019b0:	f000 f814 	bl	80019dc <HAL_InitTick>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e002      	b.n	80019c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019be:	f7ff fb55 	bl	800106c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	58024400 	.word	0x58024400
 80019d0:	080072b8 	.word	0x080072b8
 80019d4:	24000004 	.word	0x24000004
 80019d8:	24000000 	.word	0x24000000

080019dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019e4:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <HAL_InitTick+0x60>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e021      	b.n	8001a34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <HAL_InitTick+0x64>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_InitTick+0x60>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f971 	bl	8001cee <HAL_SYSTICK_Config>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00e      	b.n	8001a34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b0f      	cmp	r3, #15
 8001a1a:	d80a      	bhi.n	8001a32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f000 f93b 	bl	8001c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a28:	4a06      	ldr	r2, [pc, #24]	@ (8001a44 <HAL_InitTick+0x68>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e000      	b.n	8001a34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	24000028 	.word	0x24000028
 8001a40:	24000000 	.word	0x24000000
 8001a44:	24000024 	.word	0x24000024

08001a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_IncTick+0x20>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_IncTick+0x24>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <HAL_IncTick+0x24>)
 8001a5a:	6013      	str	r3, [r2, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	24000028 	.word	0x24000028
 8001a6c:	24000274 	.word	0x24000274

08001a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return uwTick;
 8001a74:	4b03      	ldr	r3, [pc, #12]	@ (8001a84 <HAL_GetTick+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	24000274 	.word	0x24000274

08001a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff ffee 	bl	8001a70 <HAL_GetTick>
 8001a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa0:	d005      	beq.n	8001aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <HAL_Delay+0x44>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4413      	add	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aae:	bf00      	nop
 8001ab0:	f7ff ffde 	bl	8001a70 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d8f7      	bhi.n	8001ab0 <HAL_Delay+0x28>
  {
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	24000028 	.word	0x24000028

08001ad0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ad4:	4b03      	ldr	r3, [pc, #12]	@ (8001ae4 <HAL_GetREVID+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0c1b      	lsrs	r3, r3, #16
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	5c001000 	.word	0x5c001000

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x40>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x40>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00
 8001b2c:	05fa0000 	.word	0x05fa0000

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0b      	blt.n	8001b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4907      	ldr	r1, [pc, #28]	@ (8001b84 <__NVIC_EnableIRQ+0x38>)
 8001b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	@ (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	@ (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	@ 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c54:	d301      	bcc.n	8001c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00f      	b.n	8001c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c84 <SysTick_Config+0x40>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c62:	210f      	movs	r1, #15
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f7ff ff8e 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <SysTick_Config+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c72:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <SysTick_Config+0x40>)
 8001c74:	2207      	movs	r2, #7
 8001c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	e000e010 	.word	0xe000e010

08001c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff29 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff40 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff90 	bl	8001bdc <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5f 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff33 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa4 	bl	8001c44 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001d0c:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <HAL_GetCurrentCPUID+0x24>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	2b07      	cmp	r3, #7
 8001d18:	d101      	bne.n	8001d1e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e000      	b.n	8001d20 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001d1e:	2301      	movs	r3, #1
  }
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e00a      	b.n	8001d62 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001d4c:	7afb      	ldrb	r3, [r7, #11]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d103      	bne.n	8001d5a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	605a      	str	r2, [r3, #4]
      break;
 8001d58:	e002      	b.n	8001d60 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8001d5e:	bf00      	nop
  }

  return status;
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	371c      	adds	r7, #28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e003      	b.n	8001d8a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001d88:	2300      	movs	r3, #0
  }
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 031f 	and.w	r3, r3, #31
 8001db4:	2201      	movs	r2, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001dbc:	f7ff ffa4 	bl	8001d08 <HAL_GetCurrentCPUID>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d105      	bne.n	8001dd2 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	011a      	lsls	r2, r3, #4
 8001dca:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <HAL_EXTI_IRQHandler+0x70>)
 8001dcc:	4413      	add	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	e004      	b.n	8001ddc <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	011a      	lsls	r2, r3, #4
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <HAL_EXTI_IRQHandler+0x74>)
 8001dd8:	4413      	add	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4013      	ands	r3, r2
 8001de4:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d009      	beq.n	8001e00 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	4798      	blx	r3
    }
  }
}
 8001e00:	bf00      	nop
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	58000088 	.word	0x58000088
 8001e0c:	580000c8 	.word	0x580000c8

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	@ 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e1e:	4b89      	ldr	r3, [pc, #548]	@ (8002044 <HAL_GPIO_Init+0x234>)
 8001e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e22:	e194      	b.n	800214e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8186 	beq.w	8002148 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d005      	beq.n	8001e54 <HAL_GPIO_Init+0x44>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d130      	bne.n	8001eb6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 0201 	and.w	r2, r3, #1
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d017      	beq.n	8001ef2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d123      	bne.n	8001f46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	69b9      	ldr	r1, [r7, #24]
 8001f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0203 	and.w	r2, r3, #3
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80e0 	beq.w	8002148 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f88:	4b2f      	ldr	r3, [pc, #188]	@ (8002048 <HAL_GPIO_Init+0x238>)
 8001f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8002048 <HAL_GPIO_Init+0x238>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f98:	4b2b      	ldr	r3, [pc, #172]	@ (8002048 <HAL_GPIO_Init+0x238>)
 8001f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fa6:	4a29      	ldr	r2, [pc, #164]	@ (800204c <HAL_GPIO_Init+0x23c>)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	3302      	adds	r3, #2
 8001fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a20      	ldr	r2, [pc, #128]	@ (8002050 <HAL_GPIO_Init+0x240>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d052      	beq.n	8002078 <HAL_GPIO_Init+0x268>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002054 <HAL_GPIO_Init+0x244>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d031      	beq.n	800203e <HAL_GPIO_Init+0x22e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8002058 <HAL_GPIO_Init+0x248>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d02b      	beq.n	800203a <HAL_GPIO_Init+0x22a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800205c <HAL_GPIO_Init+0x24c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d025      	beq.n	8002036 <HAL_GPIO_Init+0x226>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1c      	ldr	r2, [pc, #112]	@ (8002060 <HAL_GPIO_Init+0x250>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01f      	beq.n	8002032 <HAL_GPIO_Init+0x222>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8002064 <HAL_GPIO_Init+0x254>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x21e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8002068 <HAL_GPIO_Init+0x258>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x21a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a19      	ldr	r2, [pc, #100]	@ (800206c <HAL_GPIO_Init+0x25c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x216>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <HAL_GPIO_Init+0x260>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x212>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a17      	ldr	r2, [pc, #92]	@ (8002074 <HAL_GPIO_Init+0x264>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x20e>
 800201a:	2309      	movs	r3, #9
 800201c:	e02d      	b.n	800207a <HAL_GPIO_Init+0x26a>
 800201e:	230a      	movs	r3, #10
 8002020:	e02b      	b.n	800207a <HAL_GPIO_Init+0x26a>
 8002022:	2308      	movs	r3, #8
 8002024:	e029      	b.n	800207a <HAL_GPIO_Init+0x26a>
 8002026:	2307      	movs	r3, #7
 8002028:	e027      	b.n	800207a <HAL_GPIO_Init+0x26a>
 800202a:	2306      	movs	r3, #6
 800202c:	e025      	b.n	800207a <HAL_GPIO_Init+0x26a>
 800202e:	2305      	movs	r3, #5
 8002030:	e023      	b.n	800207a <HAL_GPIO_Init+0x26a>
 8002032:	2304      	movs	r3, #4
 8002034:	e021      	b.n	800207a <HAL_GPIO_Init+0x26a>
 8002036:	2303      	movs	r3, #3
 8002038:	e01f      	b.n	800207a <HAL_GPIO_Init+0x26a>
 800203a:	2302      	movs	r3, #2
 800203c:	e01d      	b.n	800207a <HAL_GPIO_Init+0x26a>
 800203e:	2301      	movs	r3, #1
 8002040:	e01b      	b.n	800207a <HAL_GPIO_Init+0x26a>
 8002042:	bf00      	nop
 8002044:	58000080 	.word	0x58000080
 8002048:	58024400 	.word	0x58024400
 800204c:	58000400 	.word	0x58000400
 8002050:	58020000 	.word	0x58020000
 8002054:	58020400 	.word	0x58020400
 8002058:	58020800 	.word	0x58020800
 800205c:	58020c00 	.word	0x58020c00
 8002060:	58021000 	.word	0x58021000
 8002064:	58021400 	.word	0x58021400
 8002068:	58021800 	.word	0x58021800
 800206c:	58021c00 	.word	0x58021c00
 8002070:	58022000 	.word	0x58022000
 8002074:	58022400 	.word	0x58022400
 8002078:	2300      	movs	r3, #0
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	f002 0203 	and.w	r2, r2, #3
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	4093      	lsls	r3, r2
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208a:	4938      	ldr	r1, [pc, #224]	@ (800216c <HAL_GPIO_Init+0x35c>)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	3301      	adds	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	f47f ae63 	bne.w	8001e24 <HAL_GPIO_Init+0x14>
  }
}
 800215e:	bf00      	nop
 8002160:	bf00      	nop
 8002162:	3724      	adds	r7, #36	@ 0x24
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	58000400 	.word	0x58000400

08002170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	807b      	strh	r3, [r7, #2]
 800217c:	4613      	mov	r3, r2
 800217e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002180:	787b      	ldrb	r3, [r7, #1]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800218c:	e003      	b.n	8002196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	041a      	lsls	r2, r3, #16
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	619a      	str	r2, [r3, #24]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80021ac:	4a08      	ldr	r2, [pc, #32]	@ (80021d0 <HAL_HSEM_FastTake+0x2c>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3320      	adds	r3, #32
 80021b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b6:	4a07      	ldr	r2, [pc, #28]	@ (80021d4 <HAL_HSEM_FastTake+0x30>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d101      	bne.n	80021c0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	e000      	b.n	80021c2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	58026400 	.word	0x58026400
 80021d4:	80000300 	.word	0x80000300

080021d8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80021e2:	4906      	ldr	r1, [pc, #24]	@ (80021fc <HAL_HSEM_Release+0x24>)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	58026400 	.word	0x58026400

08002200 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002208:	4b29      	ldr	r3, [pc, #164]	@ (80022b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	2b06      	cmp	r3, #6
 8002212:	d00a      	beq.n	800222a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002214:	4b26      	ldr	r3, [pc, #152]	@ (80022b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	429a      	cmp	r2, r3
 8002220:	d001      	beq.n	8002226 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e040      	b.n	80022a8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e03e      	b.n	80022a8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800222a:	4b21      	ldr	r3, [pc, #132]	@ (80022b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002232:	491f      	ldr	r1, [pc, #124]	@ (80022b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4313      	orrs	r3, r2
 8002238:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800223a:	f7ff fc19 	bl	8001a70 <HAL_GetTick>
 800223e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002240:	e009      	b.n	8002256 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002242:	f7ff fc15 	bl	8001a70 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002250:	d901      	bls.n	8002256 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e028      	b.n	80022a8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002256:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800225e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002262:	d1ee      	bne.n	8002242 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b1e      	cmp	r3, #30
 8002268:	d008      	beq.n	800227c <HAL_PWREx_ConfigSupply+0x7c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b2e      	cmp	r3, #46	@ 0x2e
 800226e:	d005      	beq.n	800227c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b1d      	cmp	r3, #29
 8002274:	d002      	beq.n	800227c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b2d      	cmp	r3, #45	@ 0x2d
 800227a:	d114      	bne.n	80022a6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800227c:	f7ff fbf8 	bl	8001a70 <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002282:	e009      	b.n	8002298 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002284:	f7ff fbf4 	bl	8001a70 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002292:	d901      	bls.n	8002298 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e007      	b.n	80022a8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a4:	d1ee      	bne.n	8002284 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	58024800 	.word	0x58024800

080022b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08c      	sub	sp, #48	@ 0x30
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d102      	bne.n	80022c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	f000 bc48 	b.w	8002b58 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8088 	beq.w	80023e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d6:	4b99      	ldr	r3, [pc, #612]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022e0:	4b96      	ldr	r3, [pc, #600]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e8:	2b10      	cmp	r3, #16
 80022ea:	d007      	beq.n	80022fc <HAL_RCC_OscConfig+0x48>
 80022ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ee:	2b18      	cmp	r3, #24
 80022f0:	d111      	bne.n	8002316 <HAL_RCC_OscConfig+0x62>
 80022f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d10c      	bne.n	8002316 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fc:	4b8f      	ldr	r3, [pc, #572]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d06d      	beq.n	80023e4 <HAL_RCC_OscConfig+0x130>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d169      	bne.n	80023e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	f000 bc21 	b.w	8002b58 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800231e:	d106      	bne.n	800232e <HAL_RCC_OscConfig+0x7a>
 8002320:	4b86      	ldr	r3, [pc, #536]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a85      	ldr	r2, [pc, #532]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	e02e      	b.n	800238c <HAL_RCC_OscConfig+0xd8>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0x9c>
 8002336:	4b81      	ldr	r3, [pc, #516]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a80      	ldr	r2, [pc, #512]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 800233c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b7e      	ldr	r3, [pc, #504]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a7d      	ldr	r2, [pc, #500]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002348:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e01d      	b.n	800238c <HAL_RCC_OscConfig+0xd8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0xc0>
 800235a:	4b78      	ldr	r3, [pc, #480]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a77      	ldr	r2, [pc, #476]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	4b75      	ldr	r3, [pc, #468]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a74      	ldr	r2, [pc, #464]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e00b      	b.n	800238c <HAL_RCC_OscConfig+0xd8>
 8002374:	4b71      	ldr	r3, [pc, #452]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a70      	ldr	r2, [pc, #448]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 800237a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b6e      	ldr	r3, [pc, #440]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a6d      	ldr	r2, [pc, #436]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800238a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d013      	beq.n	80023bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7ff fb6c 	bl	8001a70 <HAL_GetTick>
 8002398:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800239c:	f7ff fb68 	bl	8001a70 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	@ 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e3d4      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023ae:	4b63      	ldr	r3, [pc, #396]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0xe8>
 80023ba:	e014      	b.n	80023e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7ff fb58 	bl	8001a70 <HAL_GetTick>
 80023c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c4:	f7ff fb54 	bl	8001a70 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	@ 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e3c0      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023d6:	4b59      	ldr	r3, [pc, #356]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x110>
 80023e2:	e000      	b.n	80023e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80ca 	beq.w	8002588 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f4:	4b51      	ldr	r3, [pc, #324]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023fe:	4b4f      	ldr	r3, [pc, #316]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002402:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d007      	beq.n	800241a <HAL_RCC_OscConfig+0x166>
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	2b18      	cmp	r3, #24
 800240e:	d156      	bne.n	80024be <HAL_RCC_OscConfig+0x20a>
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d151      	bne.n	80024be <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800241a:	4b48      	ldr	r3, [pc, #288]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_RCC_OscConfig+0x17e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e392      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002432:	4b42      	ldr	r3, [pc, #264]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 0219 	bic.w	r2, r3, #25
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	493f      	ldr	r1, [pc, #252]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002444:	f7ff fb14 	bl	8001a70 <HAL_GetTick>
 8002448:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244c:	f7ff fb10 	bl	8001a70 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e37c      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800245e:	4b37      	ldr	r3, [pc, #220]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246a:	f7ff fb31 	bl	8001ad0 <HAL_GetREVID>
 800246e:	4603      	mov	r3, r0
 8002470:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002474:	4293      	cmp	r3, r2
 8002476:	d817      	bhi.n	80024a8 <HAL_RCC_OscConfig+0x1f4>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2b40      	cmp	r3, #64	@ 0x40
 800247e:	d108      	bne.n	8002492 <HAL_RCC_OscConfig+0x1de>
 8002480:	4b2e      	ldr	r3, [pc, #184]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002488:	4a2c      	ldr	r2, [pc, #176]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 800248a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800248e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002490:	e07a      	b.n	8002588 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	031b      	lsls	r3, r3, #12
 80024a0:	4926      	ldr	r1, [pc, #152]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a6:	e06f      	b.n	8002588 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a8:	4b24      	ldr	r3, [pc, #144]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	061b      	lsls	r3, r3, #24
 80024b6:	4921      	ldr	r1, [pc, #132]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024bc:	e064      	b.n	8002588 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d047      	beq.n	8002556 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024c6:	4b1d      	ldr	r3, [pc, #116]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 0219 	bic.w	r2, r3, #25
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	491a      	ldr	r1, [pc, #104]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7ff faca 	bl	8001a70 <HAL_GetTick>
 80024dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e0:	f7ff fac6 	bl	8001a70 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e332      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f2:	4b12      	ldr	r3, [pc, #72]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fe:	f7ff fae7 	bl	8001ad0 <HAL_GetREVID>
 8002502:	4603      	mov	r3, r0
 8002504:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002508:	4293      	cmp	r3, r2
 800250a:	d819      	bhi.n	8002540 <HAL_RCC_OscConfig+0x28c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b40      	cmp	r3, #64	@ 0x40
 8002512:	d108      	bne.n	8002526 <HAL_RCC_OscConfig+0x272>
 8002514:	4b09      	ldr	r3, [pc, #36]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800251c:	4a07      	ldr	r2, [pc, #28]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 800251e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002522:	6053      	str	r3, [r2, #4]
 8002524:	e030      	b.n	8002588 <HAL_RCC_OscConfig+0x2d4>
 8002526:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	031b      	lsls	r3, r3, #12
 8002534:	4901      	ldr	r1, [pc, #4]	@ (800253c <HAL_RCC_OscConfig+0x288>)
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
 800253a:	e025      	b.n	8002588 <HAL_RCC_OscConfig+0x2d4>
 800253c:	58024400 	.word	0x58024400
 8002540:	4b9a      	ldr	r3, [pc, #616]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	061b      	lsls	r3, r3, #24
 800254e:	4997      	ldr	r1, [pc, #604]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
 8002554:	e018      	b.n	8002588 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002556:	4b95      	ldr	r3, [pc, #596]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a94      	ldr	r2, [pc, #592]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7ff fa85 	bl	8001a70 <HAL_GetTick>
 8002566:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256a:	f7ff fa81 	bl	8001a70 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e2ed      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800257c:	4b8b      	ldr	r3, [pc, #556]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f0      	bne.n	800256a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a9 	beq.w	80026e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002596:	4b85      	ldr	r3, [pc, #532]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800259e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025a0:	4b82      	ldr	r3, [pc, #520]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d007      	beq.n	80025bc <HAL_RCC_OscConfig+0x308>
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2b18      	cmp	r3, #24
 80025b0:	d13a      	bne.n	8002628 <HAL_RCC_OscConfig+0x374>
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d135      	bne.n	8002628 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025bc:	4b7b      	ldr	r3, [pc, #492]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_OscConfig+0x320>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b80      	cmp	r3, #128	@ 0x80
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e2c1      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025d4:	f7ff fa7c 	bl	8001ad0 <HAL_GetREVID>
 80025d8:	4603      	mov	r3, r0
 80025da:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025de:	4293      	cmp	r3, r2
 80025e0:	d817      	bhi.n	8002612 <HAL_RCC_OscConfig+0x35e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d108      	bne.n	80025fc <HAL_RCC_OscConfig+0x348>
 80025ea:	4b70      	ldr	r3, [pc, #448]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80025f2:	4a6e      	ldr	r2, [pc, #440]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 80025f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80025f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025fa:	e075      	b.n	80026e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025fc:	4b6b      	ldr	r3, [pc, #428]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	069b      	lsls	r3, r3, #26
 800260a:	4968      	ldr	r1, [pc, #416]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002610:	e06a      	b.n	80026e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002612:	4b66      	ldr	r3, [pc, #408]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	061b      	lsls	r3, r3, #24
 8002620:	4962      	ldr	r1, [pc, #392]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002626:	e05f      	b.n	80026e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d042      	beq.n	80026b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002630:	4b5e      	ldr	r3, [pc, #376]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a5d      	ldr	r2, [pc, #372]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800263a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7ff fa18 	bl	8001a70 <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002644:	f7ff fa14 	bl	8001a70 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e280      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002656:	4b55      	ldr	r3, [pc, #340]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002662:	f7ff fa35 	bl	8001ad0 <HAL_GetREVID>
 8002666:	4603      	mov	r3, r0
 8002668:	f241 0203 	movw	r2, #4099	@ 0x1003
 800266c:	4293      	cmp	r3, r2
 800266e:	d817      	bhi.n	80026a0 <HAL_RCC_OscConfig+0x3ec>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	2b20      	cmp	r3, #32
 8002676:	d108      	bne.n	800268a <HAL_RCC_OscConfig+0x3d6>
 8002678:	4b4c      	ldr	r3, [pc, #304]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002680:	4a4a      	ldr	r2, [pc, #296]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002682:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002686:	6053      	str	r3, [r2, #4]
 8002688:	e02e      	b.n	80026e8 <HAL_RCC_OscConfig+0x434>
 800268a:	4b48      	ldr	r3, [pc, #288]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	069b      	lsls	r3, r3, #26
 8002698:	4944      	ldr	r1, [pc, #272]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
 800269e:	e023      	b.n	80026e8 <HAL_RCC_OscConfig+0x434>
 80026a0:	4b42      	ldr	r3, [pc, #264]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	493f      	ldr	r1, [pc, #252]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60cb      	str	r3, [r1, #12]
 80026b4:	e018      	b.n	80026e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026b6:	4b3d      	ldr	r3, [pc, #244]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a3c      	ldr	r2, [pc, #240]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 80026bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7ff f9d5 	bl	8001a70 <HAL_GetTick>
 80026c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026ca:	f7ff f9d1 	bl	8001a70 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e23d      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026dc:	4b33      	ldr	r3, [pc, #204]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f0      	bne.n	80026ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d036      	beq.n	8002762 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d019      	beq.n	8002730 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fc:	4b2b      	ldr	r3, [pc, #172]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 80026fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002700:	4a2a      	ldr	r2, [pc, #168]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7ff f9b2 	bl	8001a70 <HAL_GetTick>
 800270c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002710:	f7ff f9ae 	bl	8001a70 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e21a      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002722:	4b22      	ldr	r3, [pc, #136]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x45c>
 800272e:	e018      	b.n	8002762 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002730:	4b1e      	ldr	r3, [pc, #120]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002734:	4a1d      	ldr	r2, [pc, #116]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002736:	f023 0301 	bic.w	r3, r3, #1
 800273a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7ff f998 	bl	8001a70 <HAL_GetTick>
 8002740:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002744:	f7ff f994 	bl	8001a70 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e200      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002756:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d039      	beq.n	80027e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d01c      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002776:	4b0d      	ldr	r3, [pc, #52]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a0c      	ldr	r2, [pc, #48]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 800277c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002780:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002782:	f7ff f975 	bl	8001a70 <HAL_GetTick>
 8002786:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800278a:	f7ff f971 	bl	8001a70 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e1dd      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800279c:	4b03      	ldr	r3, [pc, #12]	@ (80027ac <HAL_RCC_OscConfig+0x4f8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x4d6>
 80027a8:	e01b      	b.n	80027e2 <HAL_RCC_OscConfig+0x52e>
 80027aa:	bf00      	nop
 80027ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027b0:	4b9b      	ldr	r3, [pc, #620]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a9a      	ldr	r2, [pc, #616]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80027b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027bc:	f7ff f958 	bl	8001a70 <HAL_GetTick>
 80027c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027c4:	f7ff f954 	bl	8001a70 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1c0      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027d6:	4b92      	ldr	r3, [pc, #584]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 8081 	beq.w	80028f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002a24 <HAL_RCC_OscConfig+0x770>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a8b      	ldr	r2, [pc, #556]	@ (8002a24 <HAL_RCC_OscConfig+0x770>)
 80027f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027fc:	f7ff f938 	bl	8001a70 <HAL_GetTick>
 8002800:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002804:	f7ff f934 	bl	8001a70 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	@ 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e1a0      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002816:	4b83      	ldr	r3, [pc, #524]	@ (8002a24 <HAL_RCC_OscConfig+0x770>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d106      	bne.n	8002838 <HAL_RCC_OscConfig+0x584>
 800282a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6713      	str	r3, [r2, #112]	@ 0x70
 8002836:	e02d      	b.n	8002894 <HAL_RCC_OscConfig+0x5e0>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10c      	bne.n	800285a <HAL_RCC_OscConfig+0x5a6>
 8002840:	4b77      	ldr	r3, [pc, #476]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002844:	4a76      	ldr	r2, [pc, #472]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002846:	f023 0301 	bic.w	r3, r3, #1
 800284a:	6713      	str	r3, [r2, #112]	@ 0x70
 800284c:	4b74      	ldr	r3, [pc, #464]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002850:	4a73      	ldr	r2, [pc, #460]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002852:	f023 0304 	bic.w	r3, r3, #4
 8002856:	6713      	str	r3, [r2, #112]	@ 0x70
 8002858:	e01c      	b.n	8002894 <HAL_RCC_OscConfig+0x5e0>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b05      	cmp	r3, #5
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x5c8>
 8002862:	4b6f      	ldr	r3, [pc, #444]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002866:	4a6e      	ldr	r2, [pc, #440]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	6713      	str	r3, [r2, #112]	@ 0x70
 800286e:	4b6c      	ldr	r3, [pc, #432]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002872:	4a6b      	ldr	r2, [pc, #428]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6713      	str	r3, [r2, #112]	@ 0x70
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0x5e0>
 800287c:	4b68      	ldr	r3, [pc, #416]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002880:	4a67      	ldr	r2, [pc, #412]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	6713      	str	r3, [r2, #112]	@ 0x70
 8002888:	4b65      	ldr	r3, [pc, #404]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288c:	4a64      	ldr	r2, [pc, #400]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 800288e:	f023 0304 	bic.w	r3, r3, #4
 8002892:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d015      	beq.n	80028c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800289c:	f7ff f8e8 	bl	8001a70 <HAL_GetTick>
 80028a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7ff f8e4 	bl	8001a70 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e14e      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028ba:	4b59      	ldr	r3, [pc, #356]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0ee      	beq.n	80028a4 <HAL_RCC_OscConfig+0x5f0>
 80028c6:	e014      	b.n	80028f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7ff f8d2 	bl	8001a70 <HAL_GetTick>
 80028cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7ff f8ce 	bl	8001a70 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e138      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1ee      	bne.n	80028d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 812d 	beq.w	8002b56 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028fc:	4b48      	ldr	r3, [pc, #288]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002904:	2b18      	cmp	r3, #24
 8002906:	f000 80bd 	beq.w	8002a84 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	2b02      	cmp	r3, #2
 8002910:	f040 809e 	bne.w	8002a50 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002914:	4b42      	ldr	r3, [pc, #264]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a41      	ldr	r2, [pc, #260]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 800291a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800291e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7ff f8a6 	bl	8001a70 <HAL_GetTick>
 8002924:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7ff f8a2 	bl	8001a70 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e10e      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800293a:	4b39      	ldr	r3, [pc, #228]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002946:	4b36      	ldr	r3, [pc, #216]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002948:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800294a:	4b37      	ldr	r3, [pc, #220]	@ (8002a28 <HAL_RCC_OscConfig+0x774>)
 800294c:	4013      	ands	r3, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	430a      	orrs	r2, r1
 800295a:	4931      	ldr	r1, [pc, #196]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 800295c:	4313      	orrs	r3, r2
 800295e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002964:	3b01      	subs	r3, #1
 8002966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296e:	3b01      	subs	r3, #1
 8002970:	025b      	lsls	r3, r3, #9
 8002972:	b29b      	uxth	r3, r3
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297a:	3b01      	subs	r3, #1
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002988:	3b01      	subs	r3, #1
 800298a:	061b      	lsls	r3, r3, #24
 800298c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002990:	4923      	ldr	r1, [pc, #140]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002992:	4313      	orrs	r3, r2
 8002994:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002996:	4b22      	ldr	r3, [pc, #136]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299a:	4a21      	ldr	r2, [pc, #132]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80029a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029a6:	4b21      	ldr	r3, [pc, #132]	@ (8002a2c <HAL_RCC_OscConfig+0x778>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029ae:	00d2      	lsls	r2, r2, #3
 80029b0:	491b      	ldr	r1, [pc, #108]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80029b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ba:	f023 020c 	bic.w	r2, r3, #12
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	4917      	ldr	r1, [pc, #92]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80029c8:	4b15      	ldr	r3, [pc, #84]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80029ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029cc:	f023 0202 	bic.w	r2, r3, #2
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d4:	4912      	ldr	r1, [pc, #72]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80029da:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80029dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029de:	4a10      	ldr	r2, [pc, #64]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80029e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80029ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80029f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029fe:	4b08      	ldr	r3, [pc, #32]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a02:	4a07      	ldr	r2, [pc, #28]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a0a:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a04      	ldr	r2, [pc, #16]	@ (8002a20 <HAL_RCC_OscConfig+0x76c>)
 8002a10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a16:	f7ff f82b 	bl	8001a70 <HAL_GetTick>
 8002a1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a1c:	e011      	b.n	8002a42 <HAL_RCC_OscConfig+0x78e>
 8002a1e:	bf00      	nop
 8002a20:	58024400 	.word	0x58024400
 8002a24:	58024800 	.word	0x58024800
 8002a28:	fffffc0c 	.word	0xfffffc0c
 8002a2c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a30:	f7ff f81e 	bl	8001a70 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e08a      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a42:	4b47      	ldr	r3, [pc, #284]	@ (8002b60 <HAL_RCC_OscConfig+0x8ac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x77c>
 8002a4e:	e082      	b.n	8002b56 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a50:	4b43      	ldr	r3, [pc, #268]	@ (8002b60 <HAL_RCC_OscConfig+0x8ac>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a42      	ldr	r2, [pc, #264]	@ (8002b60 <HAL_RCC_OscConfig+0x8ac>)
 8002a56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5c:	f7ff f808 	bl	8001a70 <HAL_GetTick>
 8002a60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7ff f804 	bl	8001a70 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e070      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a76:	4b3a      	ldr	r3, [pc, #232]	@ (8002b60 <HAL_RCC_OscConfig+0x8ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x7b0>
 8002a82:	e068      	b.n	8002b56 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a84:	4b36      	ldr	r3, [pc, #216]	@ (8002b60 <HAL_RCC_OscConfig+0x8ac>)
 8002a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a8a:	4b35      	ldr	r3, [pc, #212]	@ (8002b60 <HAL_RCC_OscConfig+0x8ac>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d031      	beq.n	8002afc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f003 0203 	and.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d12a      	bne.n	8002afc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d122      	bne.n	8002afc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d11a      	bne.n	8002afc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	0a5b      	lsrs	r3, r3, #9
 8002aca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d111      	bne.n	8002afc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	0c1b      	lsrs	r3, r3, #16
 8002adc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d108      	bne.n	8002afc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	0e1b      	lsrs	r3, r3, #24
 8002aee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e02b      	b.n	8002b58 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b00:	4b17      	ldr	r3, [pc, #92]	@ (8002b60 <HAL_RCC_OscConfig+0x8ac>)
 8002b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b04:	08db      	lsrs	r3, r3, #3
 8002b06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b0a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d01f      	beq.n	8002b56 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b16:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <HAL_RCC_OscConfig+0x8ac>)
 8002b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1a:	4a11      	ldr	r2, [pc, #68]	@ (8002b60 <HAL_RCC_OscConfig+0x8ac>)
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b22:	f7fe ffa5 	bl	8001a70 <HAL_GetTick>
 8002b26:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b28:	bf00      	nop
 8002b2a:	f7fe ffa1 	bl	8001a70 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d0f9      	beq.n	8002b2a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b36:	4b0a      	ldr	r3, [pc, #40]	@ (8002b60 <HAL_RCC_OscConfig+0x8ac>)
 8002b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <HAL_RCC_OscConfig+0x8b0>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b42:	00d2      	lsls	r2, r2, #3
 8002b44:	4906      	ldr	r1, [pc, #24]	@ (8002b60 <HAL_RCC_OscConfig+0x8ac>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b4a:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <HAL_RCC_OscConfig+0x8ac>)
 8002b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4e:	4a04      	ldr	r2, [pc, #16]	@ (8002b60 <HAL_RCC_OscConfig+0x8ac>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3730      	adds	r7, #48	@ 0x30
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	58024400 	.word	0x58024400
 8002b64:	ffff0007 	.word	0xffff0007

08002b68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e19c      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b7c:	4b8a      	ldr	r3, [pc, #552]	@ (8002da8 <HAL_RCC_ClockConfig+0x240>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d910      	bls.n	8002bac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8a:	4b87      	ldr	r3, [pc, #540]	@ (8002da8 <HAL_RCC_ClockConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 020f 	bic.w	r2, r3, #15
 8002b92:	4985      	ldr	r1, [pc, #532]	@ (8002da8 <HAL_RCC_ClockConfig+0x240>)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b83      	ldr	r3, [pc, #524]	@ (8002da8 <HAL_RCC_ClockConfig+0x240>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e184      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d010      	beq.n	8002bda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	4b7b      	ldr	r3, [pc, #492]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d908      	bls.n	8002bda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bc8:	4b78      	ldr	r3, [pc, #480]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	4975      	ldr	r1, [pc, #468]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d010      	beq.n	8002c08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	4b70      	ldr	r3, [pc, #448]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d908      	bls.n	8002c08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bf6:	4b6d      	ldr	r3, [pc, #436]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	496a      	ldr	r1, [pc, #424]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d010      	beq.n	8002c36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	4b64      	ldr	r3, [pc, #400]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d908      	bls.n	8002c36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c24:	4b61      	ldr	r3, [pc, #388]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	495e      	ldr	r1, [pc, #376]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d010      	beq.n	8002c64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69da      	ldr	r2, [r3, #28]
 8002c46:	4b59      	ldr	r3, [pc, #356]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d908      	bls.n	8002c64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c52:	4b56      	ldr	r3, [pc, #344]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	4953      	ldr	r1, [pc, #332]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d010      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	4b4d      	ldr	r3, [pc, #308]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d908      	bls.n	8002c92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c80:	4b4a      	ldr	r3, [pc, #296]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f023 020f 	bic.w	r2, r3, #15
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4947      	ldr	r1, [pc, #284]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d055      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c9e:	4b43      	ldr	r3, [pc, #268]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	4940      	ldr	r1, [pc, #256]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cb8:	4b3c      	ldr	r3, [pc, #240]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d121      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0f6      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cd0:	4b36      	ldr	r3, [pc, #216]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d115      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0ea      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d107      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ce8:	4b30      	ldr	r3, [pc, #192]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0de      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cf8:	4b2c      	ldr	r3, [pc, #176]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e0d6      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d08:	4b28      	ldr	r3, [pc, #160]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f023 0207 	bic.w	r2, r3, #7
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4925      	ldr	r1, [pc, #148]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d1a:	f7fe fea9 	bl	8001a70 <HAL_GetTick>
 8002d1e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d20:	e00a      	b.n	8002d38 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d22:	f7fe fea5 	bl	8001a70 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e0be      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d38:	4b1c      	ldr	r3, [pc, #112]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d1eb      	bne.n	8002d22 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d010      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	4b14      	ldr	r3, [pc, #80]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d208      	bcs.n	8002d78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d66:	4b11      	ldr	r3, [pc, #68]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f023 020f 	bic.w	r2, r3, #15
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	490e      	ldr	r1, [pc, #56]	@ (8002dac <HAL_RCC_ClockConfig+0x244>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d78:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <HAL_RCC_ClockConfig+0x240>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d214      	bcs.n	8002db0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b08      	ldr	r3, [pc, #32]	@ (8002da8 <HAL_RCC_ClockConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 020f 	bic.w	r2, r3, #15
 8002d8e:	4906      	ldr	r1, [pc, #24]	@ (8002da8 <HAL_RCC_ClockConfig+0x240>)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b04      	ldr	r3, [pc, #16]	@ (8002da8 <HAL_RCC_ClockConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e086      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x34e>
 8002da8:	52002000 	.word	0x52002000
 8002dac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec0 <HAL_RCC_ClockConfig+0x358>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d208      	bcs.n	8002dde <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec0 <HAL_RCC_ClockConfig+0x358>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	4939      	ldr	r1, [pc, #228]	@ (8002ec0 <HAL_RCC_ClockConfig+0x358>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d010      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	4b34      	ldr	r3, [pc, #208]	@ (8002ec0 <HAL_RCC_ClockConfig+0x358>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d208      	bcs.n	8002e0c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dfa:	4b31      	ldr	r3, [pc, #196]	@ (8002ec0 <HAL_RCC_ClockConfig+0x358>)
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	492e      	ldr	r1, [pc, #184]	@ (8002ec0 <HAL_RCC_ClockConfig+0x358>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d010      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699a      	ldr	r2, [r3, #24]
 8002e1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ec0 <HAL_RCC_ClockConfig+0x358>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d208      	bcs.n	8002e3a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e28:	4b25      	ldr	r3, [pc, #148]	@ (8002ec0 <HAL_RCC_ClockConfig+0x358>)
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	4922      	ldr	r1, [pc, #136]	@ (8002ec0 <HAL_RCC_ClockConfig+0x358>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d010      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69da      	ldr	r2, [r3, #28]
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ec0 <HAL_RCC_ClockConfig+0x358>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d208      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e56:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec0 <HAL_RCC_ClockConfig+0x358>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	4917      	ldr	r1, [pc, #92]	@ (8002ec0 <HAL_RCC_ClockConfig+0x358>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e68:	f000 f834 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b14      	ldr	r3, [pc, #80]	@ (8002ec0 <HAL_RCC_ClockConfig+0x358>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	0a1b      	lsrs	r3, r3, #8
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	4912      	ldr	r1, [pc, #72]	@ (8002ec4 <HAL_RCC_ClockConfig+0x35c>)
 8002e7a:	5ccb      	ldrb	r3, [r1, r3]
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
 8002e84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <HAL_RCC_ClockConfig+0x358>)
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec4 <HAL_RCC_ClockConfig+0x35c>)
 8002e90:	5cd3      	ldrb	r3, [r2, r3]
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <HAL_RCC_ClockConfig+0x360>)
 8002e9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ecc <HAL_RCC_ClockConfig+0x364>)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <HAL_RCC_ClockConfig+0x368>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe fd96 	bl	80019dc <HAL_InitTick>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	58024400 	.word	0x58024400
 8002ec4:	080072b8 	.word	0x080072b8
 8002ec8:	24000004 	.word	0x24000004
 8002ecc:	24000000 	.word	0x24000000
 8002ed0:	24000024 	.word	0x24000024

08002ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b089      	sub	sp, #36	@ 0x24
 8002ed8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eda:	4bb3      	ldr	r3, [pc, #716]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ee2:	2b18      	cmp	r3, #24
 8002ee4:	f200 8155 	bhi.w	8003192 <HAL_RCC_GetSysClockFreq+0x2be>
 8002ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eee:	bf00      	nop
 8002ef0:	08002f55 	.word	0x08002f55
 8002ef4:	08003193 	.word	0x08003193
 8002ef8:	08003193 	.word	0x08003193
 8002efc:	08003193 	.word	0x08003193
 8002f00:	08003193 	.word	0x08003193
 8002f04:	08003193 	.word	0x08003193
 8002f08:	08003193 	.word	0x08003193
 8002f0c:	08003193 	.word	0x08003193
 8002f10:	08002f7b 	.word	0x08002f7b
 8002f14:	08003193 	.word	0x08003193
 8002f18:	08003193 	.word	0x08003193
 8002f1c:	08003193 	.word	0x08003193
 8002f20:	08003193 	.word	0x08003193
 8002f24:	08003193 	.word	0x08003193
 8002f28:	08003193 	.word	0x08003193
 8002f2c:	08003193 	.word	0x08003193
 8002f30:	08002f81 	.word	0x08002f81
 8002f34:	08003193 	.word	0x08003193
 8002f38:	08003193 	.word	0x08003193
 8002f3c:	08003193 	.word	0x08003193
 8002f40:	08003193 	.word	0x08003193
 8002f44:	08003193 	.word	0x08003193
 8002f48:	08003193 	.word	0x08003193
 8002f4c:	08003193 	.word	0x08003193
 8002f50:	08002f87 	.word	0x08002f87
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f54:	4b94      	ldr	r3, [pc, #592]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d009      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f60:	4b91      	ldr	r3, [pc, #580]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	08db      	lsrs	r3, r3, #3
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	4a90      	ldr	r2, [pc, #576]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f72:	e111      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f74:	4b8d      	ldr	r3, [pc, #564]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f76:	61bb      	str	r3, [r7, #24]
      break;
 8002f78:	e10e      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f7a:	4b8d      	ldr	r3, [pc, #564]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f7c:	61bb      	str	r3, [r7, #24]
      break;
 8002f7e:	e10b      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f80:	4b8c      	ldr	r3, [pc, #560]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f82:	61bb      	str	r3, [r7, #24]
      break;
 8002f84:	e108      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f86:	4b88      	ldr	r3, [pc, #544]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f90:	4b85      	ldr	r3, [pc, #532]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f9a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f9c:	4b82      	ldr	r3, [pc, #520]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002fa6:	4b80      	ldr	r3, [pc, #512]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002faa:	08db      	lsrs	r3, r3, #3
 8002fac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	fb02 f303 	mul.w	r3, r2, r3
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fbe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80e1 	beq.w	800318c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	f000 8083 	beq.w	80030d8 <HAL_RCC_GetSysClockFreq+0x204>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	f200 80a1 	bhi.w	800311c <HAL_RCC_GetSysClockFreq+0x248>
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x114>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d056      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002fe6:	e099      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fe8:	4b6f      	ldr	r3, [pc, #444]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d02d      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ff4:	4b6c      	ldr	r3, [pc, #432]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	08db      	lsrs	r3, r3, #3
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	4a6b      	ldr	r2, [pc, #428]	@ (80031ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
 8003004:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	ee07 3a90 	vmov	s15, r3
 800300c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800301e:	4b62      	ldr	r3, [pc, #392]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800302e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003032:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80031b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800303a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800303e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800304e:	e087      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	ee07 3a90 	vmov	s15, r3
 8003056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800305e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003062:	4b51      	ldr	r3, [pc, #324]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306a:	ee07 3a90 	vmov	s15, r3
 800306e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003072:	ed97 6a02 	vldr	s12, [r7, #8]
 8003076:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80031b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800307a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800307e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800308a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003092:	e065      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800309e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80031c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030a6:	4b40      	ldr	r3, [pc, #256]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ae:	ee07 3a90 	vmov	s15, r3
 80030b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80031b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030d6:	e043      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80030e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ea:	4b2f      	ldr	r3, [pc, #188]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f2:	ee07 3a90 	vmov	s15, r3
 80030f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80030fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80031b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800310a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800310e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003116:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800311a:	e021      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003126:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80031c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800312a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800312e:	4b1e      	ldr	r3, [pc, #120]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800313e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003142:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80031b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800314a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800314e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800315e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003160:	4b11      	ldr	r3, [pc, #68]	@ (80031a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003164:	0a5b      	lsrs	r3, r3, #9
 8003166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800316a:	3301      	adds	r3, #1
 800316c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	ee07 3a90 	vmov	s15, r3
 8003174:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003178:	edd7 6a07 	vldr	s13, [r7, #28]
 800317c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003184:	ee17 3a90 	vmov	r3, s15
 8003188:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800318a:	e005      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	61bb      	str	r3, [r7, #24]
      break;
 8003190:	e002      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003192:	4b07      	ldr	r3, [pc, #28]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003194:	61bb      	str	r3, [r7, #24]
      break;
 8003196:	bf00      	nop
  }

  return sysclockfreq;
 8003198:	69bb      	ldr	r3, [r7, #24]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3724      	adds	r7, #36	@ 0x24
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	58024400 	.word	0x58024400
 80031ac:	03d09000 	.word	0x03d09000
 80031b0:	003d0900 	.word	0x003d0900
 80031b4:	017d7840 	.word	0x017d7840
 80031b8:	46000000 	.word	0x46000000
 80031bc:	4c742400 	.word	0x4c742400
 80031c0:	4a742400 	.word	0x4a742400
 80031c4:	4bbebc20 	.word	0x4bbebc20

080031c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80031ce:	f7ff fe81 	bl	8002ed4 <HAL_RCC_GetSysClockFreq>
 80031d2:	4602      	mov	r2, r0
 80031d4:	4b10      	ldr	r3, [pc, #64]	@ (8003218 <HAL_RCC_GetHCLKFreq+0x50>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	490f      	ldr	r1, [pc, #60]	@ (800321c <HAL_RCC_GetHCLKFreq+0x54>)
 80031e0:	5ccb      	ldrb	r3, [r1, r3]
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003218 <HAL_RCC_GetHCLKFreq+0x50>)
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	4a09      	ldr	r2, [pc, #36]	@ (800321c <HAL_RCC_GetHCLKFreq+0x54>)
 80031f6:	5cd3      	ldrb	r3, [r2, r3]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003202:	4a07      	ldr	r2, [pc, #28]	@ (8003220 <HAL_RCC_GetHCLKFreq+0x58>)
 8003204:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003206:	4a07      	ldr	r2, [pc, #28]	@ (8003224 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800320c:	4b04      	ldr	r3, [pc, #16]	@ (8003220 <HAL_RCC_GetHCLKFreq+0x58>)
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	58024400 	.word	0x58024400
 800321c:	080072b8 	.word	0x080072b8
 8003220:	24000004 	.word	0x24000004
 8003224:	24000000 	.word	0x24000000

08003228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800322c:	f7ff ffcc 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b06      	ldr	r3, [pc, #24]	@ (800324c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4904      	ldr	r1, [pc, #16]	@ (8003250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	58024400 	.word	0x58024400
 8003250:	080072b8 	.word	0x080072b8

08003254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003258:	f7ff ffb6 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	0a1b      	lsrs	r3, r3, #8
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4904      	ldr	r1, [pc, #16]	@ (800327c <HAL_RCC_GetPCLK2Freq+0x28>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	58024400 	.word	0x58024400
 800327c:	080072b8 	.word	0x080072b8

08003280 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003284:	f7ff ffa0 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4904      	ldr	r1, [pc, #16]	@ (80032a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	58024400 	.word	0x58024400
 80032a8:	080072b8 	.word	0x080072b8

080032ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	@ 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032b4:	4ba1      	ldr	r3, [pc, #644]	@ (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80032be:	4b9f      	ldr	r3, [pc, #636]	@ (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c2:	0b1b      	lsrs	r3, r3, #12
 80032c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80032ca:	4b9c      	ldr	r3, [pc, #624]	@ (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80032d6:	4b99      	ldr	r3, [pc, #612]	@ (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032da:	08db      	lsrs	r3, r3, #3
 80032dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8111 	beq.w	800351c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	f000 8083 	beq.w	8003408 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b02      	cmp	r3, #2
 8003306:	f200 80a1 	bhi.w	800344c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d056      	beq.n	80033c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003316:	e099      	b.n	800344c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003318:	4b88      	ldr	r3, [pc, #544]	@ (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d02d      	beq.n	8003380 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003324:	4b85      	ldr	r3, [pc, #532]	@ (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	08db      	lsrs	r3, r3, #3
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	4a84      	ldr	r2, [pc, #528]	@ (8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
 8003334:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	ee07 3a90 	vmov	s15, r3
 800333c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334e:	4b7b      	ldr	r3, [pc, #492]	@ (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003362:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800336a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800337e:	e087      	b.n	8003490 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003548 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800338e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003392:	4b6a      	ldr	r3, [pc, #424]	@ (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80033a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80033aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033c2:	e065      	b.n	8003490 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800354c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80033d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033d6:	4b59      	ldr	r3, [pc, #356]	@ (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80033ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80033ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003402:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003406:	e043      	b.n	8003490 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003412:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800341a:	4b48      	ldr	r3, [pc, #288]	@ (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800342a:	ed97 6a03 	vldr	s12, [r7, #12]
 800342e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800343a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800343e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800344a:	e021      	b.n	8003490 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003456:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800354c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800345a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800345e:	4b37      	ldr	r3, [pc, #220]	@ (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800346e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003472:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003544 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800347a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800347e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800348a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800348e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003490:	4b2a      	ldr	r3, [pc, #168]	@ (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003494:	0a5b      	lsrs	r3, r3, #9
 8003496:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80034a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80034ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034b6:	ee17 2a90 	vmov	r2, s15
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80034be:	4b1f      	ldr	r3, [pc, #124]	@ (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034c8:	ee07 3a90 	vmov	s15, r3
 80034cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80034d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80034dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e4:	ee17 2a90 	vmov	r2, s15
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80034ec:	4b13      	ldr	r3, [pc, #76]	@ (800353c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f0:	0e1b      	lsrs	r3, r3, #24
 80034f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003502:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003506:	edd7 6a07 	vldr	s13, [r7, #28]
 800350a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800350e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003512:	ee17 2a90 	vmov	r2, s15
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800351a:	e008      	b.n	800352e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
}
 800352e:	bf00      	nop
 8003530:	3724      	adds	r7, #36	@ 0x24
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	58024400 	.word	0x58024400
 8003540:	03d09000 	.word	0x03d09000
 8003544:	46000000 	.word	0x46000000
 8003548:	4c742400 	.word	0x4c742400
 800354c:	4a742400 	.word	0x4a742400
 8003550:	4bbebc20 	.word	0x4bbebc20

08003554 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	@ 0x24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800355c:	4ba1      	ldr	r3, [pc, #644]	@ (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003566:	4b9f      	ldr	r3, [pc, #636]	@ (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356a:	0d1b      	lsrs	r3, r3, #20
 800356c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003570:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003572:	4b9c      	ldr	r3, [pc, #624]	@ (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800357e:	4b99      	ldr	r3, [pc, #612]	@ (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003582:	08db      	lsrs	r3, r3, #3
 8003584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	ee07 3a90 	vmov	s15, r3
 8003592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003596:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8111 	beq.w	80037c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	f000 8083 	beq.w	80036b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	f200 80a1 	bhi.w	80036f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d056      	beq.n	800366c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80035be:	e099      	b.n	80036f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035c0:	4b88      	ldr	r3, [pc, #544]	@ (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d02d      	beq.n	8003628 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035cc:	4b85      	ldr	r3, [pc, #532]	@ (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	08db      	lsrs	r3, r3, #3
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	4a84      	ldr	r2, [pc, #528]	@ (80037e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80035d8:	fa22 f303 	lsr.w	r3, r2, r3
 80035dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f6:	4b7b      	ldr	r3, [pc, #492]	@ (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003606:	ed97 6a03 	vldr	s12, [r7, #12]
 800360a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800360e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003616:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800361a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800361e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003622:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003626:	e087      	b.n	8003738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003632:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80037f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800363a:	4b6a      	ldr	r3, [pc, #424]	@ (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800364a:	ed97 6a03 	vldr	s12, [r7, #12]
 800364e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800365a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800365e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003666:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800366a:	e065      	b.n	8003738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	ee07 3a90 	vmov	s15, r3
 8003672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003676:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80037f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800367a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800367e:	4b59      	ldr	r3, [pc, #356]	@ (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003692:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800369a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800369e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036ae:	e043      	b.n	8003738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80036be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c2:	4b48      	ldr	r3, [pc, #288]	@ (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80036d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80036da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036f2:	e021      	b.n	8003738 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80037f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003706:	4b37      	ldr	r3, [pc, #220]	@ (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003716:	ed97 6a03 	vldr	s12, [r7, #12]
 800371a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80037ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800371e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800372a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800372e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003736:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003738:	4b2a      	ldr	r3, [pc, #168]	@ (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	0a5b      	lsrs	r3, r3, #9
 800373e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800374e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003752:	edd7 6a07 	vldr	s13, [r7, #28]
 8003756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800375a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800375e:	ee17 2a90 	vmov	r2, s15
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003766:	4b1f      	ldr	r3, [pc, #124]	@ (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	0c1b      	lsrs	r3, r3, #16
 800376c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003770:	ee07 3a90 	vmov	s15, r3
 8003774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003778:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800377c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003780:	edd7 6a07 	vldr	s13, [r7, #28]
 8003784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800378c:	ee17 2a90 	vmov	r2, s15
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003794:	4b13      	ldr	r3, [pc, #76]	@ (80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	0e1b      	lsrs	r3, r3, #24
 800379a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80037aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80037b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ba:	ee17 2a90 	vmov	r2, s15
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80037c2:	e008      	b.n	80037d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
}
 80037d6:	bf00      	nop
 80037d8:	3724      	adds	r7, #36	@ 0x24
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	58024400 	.word	0x58024400
 80037e8:	03d09000 	.word	0x03d09000
 80037ec:	46000000 	.word	0x46000000
 80037f0:	4c742400 	.word	0x4c742400
 80037f4:	4a742400 	.word	0x4a742400
 80037f8:	4bbebc20 	.word	0x4bbebc20

080037fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e049      	b.n	80038a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fd fc3c 	bl	80010a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3304      	adds	r3, #4
 8003838:	4619      	mov	r1, r3
 800383a:	4610      	mov	r0, r2
 800383c:	f000 ff72 	bl	8004724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e049      	b.n	8003950 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f841 	bl	8003958 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f000 ff1b 	bl	8004724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d109      	bne.n	8003990 <HAL_TIM_PWM_Start+0x24>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e03c      	b.n	8003a0a <HAL_TIM_PWM_Start+0x9e>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b04      	cmp	r3, #4
 8003994:	d109      	bne.n	80039aa <HAL_TIM_PWM_Start+0x3e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	e02f      	b.n	8003a0a <HAL_TIM_PWM_Start+0x9e>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d109      	bne.n	80039c4 <HAL_TIM_PWM_Start+0x58>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e022      	b.n	8003a0a <HAL_TIM_PWM_Start+0x9e>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d109      	bne.n	80039de <HAL_TIM_PWM_Start+0x72>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	bf14      	ite	ne
 80039d6:	2301      	movne	r3, #1
 80039d8:	2300      	moveq	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	e015      	b.n	8003a0a <HAL_TIM_PWM_Start+0x9e>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b10      	cmp	r3, #16
 80039e2:	d109      	bne.n	80039f8 <HAL_TIM_PWM_Start+0x8c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	e008      	b.n	8003a0a <HAL_TIM_PWM_Start+0x9e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e0a1      	b.n	8003b56 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d104      	bne.n	8003a22 <HAL_TIM_PWM_Start+0xb6>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a20:	e023      	b.n	8003a6a <HAL_TIM_PWM_Start+0xfe>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d104      	bne.n	8003a32 <HAL_TIM_PWM_Start+0xc6>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a30:	e01b      	b.n	8003a6a <HAL_TIM_PWM_Start+0xfe>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d104      	bne.n	8003a42 <HAL_TIM_PWM_Start+0xd6>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a40:	e013      	b.n	8003a6a <HAL_TIM_PWM_Start+0xfe>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b0c      	cmp	r3, #12
 8003a46:	d104      	bne.n	8003a52 <HAL_TIM_PWM_Start+0xe6>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a50:	e00b      	b.n	8003a6a <HAL_TIM_PWM_Start+0xfe>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d104      	bne.n	8003a62 <HAL_TIM_PWM_Start+0xf6>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a60:	e003      	b.n	8003a6a <HAL_TIM_PWM_Start+0xfe>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	6839      	ldr	r1, [r7, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 fb94 	bl	80051a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a38      	ldr	r2, [pc, #224]	@ (8003b60 <HAL_TIM_PWM_Start+0x1f4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_TIM_PWM_Start+0x13e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a37      	ldr	r2, [pc, #220]	@ (8003b64 <HAL_TIM_PWM_Start+0x1f8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_TIM_PWM_Start+0x13e>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a35      	ldr	r2, [pc, #212]	@ (8003b68 <HAL_TIM_PWM_Start+0x1fc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_TIM_PWM_Start+0x13e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a34      	ldr	r2, [pc, #208]	@ (8003b6c <HAL_TIM_PWM_Start+0x200>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_TIM_PWM_Start+0x13e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a32      	ldr	r2, [pc, #200]	@ (8003b70 <HAL_TIM_PWM_Start+0x204>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <HAL_TIM_PWM_Start+0x142>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <HAL_TIM_PWM_Start+0x144>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a25      	ldr	r2, [pc, #148]	@ (8003b60 <HAL_TIM_PWM_Start+0x1f4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d022      	beq.n	8003b14 <HAL_TIM_PWM_Start+0x1a8>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad6:	d01d      	beq.n	8003b14 <HAL_TIM_PWM_Start+0x1a8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a25      	ldr	r2, [pc, #148]	@ (8003b74 <HAL_TIM_PWM_Start+0x208>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d018      	beq.n	8003b14 <HAL_TIM_PWM_Start+0x1a8>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a24      	ldr	r2, [pc, #144]	@ (8003b78 <HAL_TIM_PWM_Start+0x20c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d013      	beq.n	8003b14 <HAL_TIM_PWM_Start+0x1a8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a22      	ldr	r2, [pc, #136]	@ (8003b7c <HAL_TIM_PWM_Start+0x210>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00e      	beq.n	8003b14 <HAL_TIM_PWM_Start+0x1a8>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1a      	ldr	r2, [pc, #104]	@ (8003b64 <HAL_TIM_PWM_Start+0x1f8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d009      	beq.n	8003b14 <HAL_TIM_PWM_Start+0x1a8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1e      	ldr	r2, [pc, #120]	@ (8003b80 <HAL_TIM_PWM_Start+0x214>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_TIM_PWM_Start+0x1a8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a16      	ldr	r2, [pc, #88]	@ (8003b68 <HAL_TIM_PWM_Start+0x1fc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d115      	bne.n	8003b40 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b84 <HAL_TIM_PWM_Start+0x218>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b06      	cmp	r3, #6
 8003b24:	d015      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x1e6>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b2c:	d011      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f042 0201 	orr.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3e:	e008      	b.n	8003b52 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e000      	b.n	8003b54 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40010000 	.word	0x40010000
 8003b64:	40010400 	.word	0x40010400
 8003b68:	40014000 	.word	0x40014000
 8003b6c:	40014400 	.word	0x40014400
 8003b70:	40014800 	.word	0x40014800
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40000800 	.word	0x40000800
 8003b7c:	40000c00 	.word	0x40000c00
 8003b80:	40001800 	.word	0x40001800
 8003b84:	00010007 	.word	0x00010007

08003b88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e049      	b.n	8003c2e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f841 	bl	8003c36 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f000 fdac 	bl	8004724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
	...

08003c4c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d104      	bne.n	8003c6a <HAL_TIM_IC_Start_IT+0x1e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	e023      	b.n	8003cb2 <HAL_TIM_IC_Start_IT+0x66>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d104      	bne.n	8003c7a <HAL_TIM_IC_Start_IT+0x2e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	e01b      	b.n	8003cb2 <HAL_TIM_IC_Start_IT+0x66>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d104      	bne.n	8003c8a <HAL_TIM_IC_Start_IT+0x3e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	e013      	b.n	8003cb2 <HAL_TIM_IC_Start_IT+0x66>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b0c      	cmp	r3, #12
 8003c8e:	d104      	bne.n	8003c9a <HAL_TIM_IC_Start_IT+0x4e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	e00b      	b.n	8003cb2 <HAL_TIM_IC_Start_IT+0x66>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b10      	cmp	r3, #16
 8003c9e:	d104      	bne.n	8003caa <HAL_TIM_IC_Start_IT+0x5e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	e003      	b.n	8003cb2 <HAL_TIM_IC_Start_IT+0x66>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d104      	bne.n	8003cc4 <HAL_TIM_IC_Start_IT+0x78>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e013      	b.n	8003cec <HAL_TIM_IC_Start_IT+0xa0>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d104      	bne.n	8003cd4 <HAL_TIM_IC_Start_IT+0x88>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e00b      	b.n	8003cec <HAL_TIM_IC_Start_IT+0xa0>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d104      	bne.n	8003ce4 <HAL_TIM_IC_Start_IT+0x98>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	e003      	b.n	8003cec <HAL_TIM_IC_Start_IT+0xa0>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cee:	7bbb      	ldrb	r3, [r7, #14]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d102      	bne.n	8003cfa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cf4:	7b7b      	ldrb	r3, [r7, #13]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d001      	beq.n	8003cfe <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e0e2      	b.n	8003ec4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_IC_Start_IT+0xc2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d0c:	e023      	b.n	8003d56 <HAL_TIM_IC_Start_IT+0x10a>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_IC_Start_IT+0xd2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d1c:	e01b      	b.n	8003d56 <HAL_TIM_IC_Start_IT+0x10a>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_IC_Start_IT+0xe2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d2c:	e013      	b.n	8003d56 <HAL_TIM_IC_Start_IT+0x10a>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b0c      	cmp	r3, #12
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_IC_Start_IT+0xf2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d3c:	e00b      	b.n	8003d56 <HAL_TIM_IC_Start_IT+0x10a>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_IC_Start_IT+0x102>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d4c:	e003      	b.n	8003d56 <HAL_TIM_IC_Start_IT+0x10a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIM_IC_Start_IT+0x11a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d64:	e013      	b.n	8003d8e <HAL_TIM_IC_Start_IT+0x142>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d104      	bne.n	8003d76 <HAL_TIM_IC_Start_IT+0x12a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d74:	e00b      	b.n	8003d8e <HAL_TIM_IC_Start_IT+0x142>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d104      	bne.n	8003d86 <HAL_TIM_IC_Start_IT+0x13a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d84:	e003      	b.n	8003d8e <HAL_TIM_IC_Start_IT+0x142>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b0c      	cmp	r3, #12
 8003d92:	d841      	bhi.n	8003e18 <HAL_TIM_IC_Start_IT+0x1cc>
 8003d94:	a201      	add	r2, pc, #4	@ (adr r2, 8003d9c <HAL_TIM_IC_Start_IT+0x150>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003dd1 	.word	0x08003dd1
 8003da0:	08003e19 	.word	0x08003e19
 8003da4:	08003e19 	.word	0x08003e19
 8003da8:	08003e19 	.word	0x08003e19
 8003dac:	08003de3 	.word	0x08003de3
 8003db0:	08003e19 	.word	0x08003e19
 8003db4:	08003e19 	.word	0x08003e19
 8003db8:	08003e19 	.word	0x08003e19
 8003dbc:	08003df5 	.word	0x08003df5
 8003dc0:	08003e19 	.word	0x08003e19
 8003dc4:	08003e19 	.word	0x08003e19
 8003dc8:	08003e19 	.word	0x08003e19
 8003dcc:	08003e07 	.word	0x08003e07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0202 	orr.w	r2, r2, #2
 8003dde:	60da      	str	r2, [r3, #12]
      break;
 8003de0:	e01d      	b.n	8003e1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0204 	orr.w	r2, r2, #4
 8003df0:	60da      	str	r2, [r3, #12]
      break;
 8003df2:	e014      	b.n	8003e1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f042 0208 	orr.w	r2, r2, #8
 8003e02:	60da      	str	r2, [r3, #12]
      break;
 8003e04:	e00b      	b.n	8003e1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0210 	orr.w	r2, r2, #16
 8003e14:	60da      	str	r2, [r3, #12]
      break;
 8003e16:	e002      	b.n	8003e1e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d14e      	bne.n	8003ec2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	6839      	ldr	r1, [r7, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f001 f9b7 	bl	80051a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a25      	ldr	r2, [pc, #148]	@ (8003ecc <HAL_TIM_IC_Start_IT+0x280>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d022      	beq.n	8003e82 <HAL_TIM_IC_Start_IT+0x236>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e44:	d01d      	beq.n	8003e82 <HAL_TIM_IC_Start_IT+0x236>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a21      	ldr	r2, [pc, #132]	@ (8003ed0 <HAL_TIM_IC_Start_IT+0x284>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d018      	beq.n	8003e82 <HAL_TIM_IC_Start_IT+0x236>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed4 <HAL_TIM_IC_Start_IT+0x288>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d013      	beq.n	8003e82 <HAL_TIM_IC_Start_IT+0x236>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed8 <HAL_TIM_IC_Start_IT+0x28c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00e      	beq.n	8003e82 <HAL_TIM_IC_Start_IT+0x236>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1c      	ldr	r2, [pc, #112]	@ (8003edc <HAL_TIM_IC_Start_IT+0x290>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d009      	beq.n	8003e82 <HAL_TIM_IC_Start_IT+0x236>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee0 <HAL_TIM_IC_Start_IT+0x294>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_TIM_IC_Start_IT+0x236>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a19      	ldr	r2, [pc, #100]	@ (8003ee4 <HAL_TIM_IC_Start_IT+0x298>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d115      	bne.n	8003eae <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	4b17      	ldr	r3, [pc, #92]	@ (8003ee8 <HAL_TIM_IC_Start_IT+0x29c>)
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b06      	cmp	r3, #6
 8003e92:	d015      	beq.n	8003ec0 <HAL_TIM_IC_Start_IT+0x274>
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e9a:	d011      	beq.n	8003ec0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eac:	e008      	b.n	8003ec0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e000      	b.n	8003ec2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40000800 	.word	0x40000800
 8003ed8:	40000c00 	.word	0x40000c00
 8003edc:	40010400 	.word	0x40010400
 8003ee0:	40001800 	.word	0x40001800
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	00010007 	.word	0x00010007

08003eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d020      	beq.n	8003f50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01b      	beq.n	8003f50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0202 	mvn.w	r2, #2
 8003f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd f822 	bl	8000f80 <HAL_TIM_IC_CaptureCallback>
 8003f3c:	e005      	b.n	8003f4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fbd2 	bl	80046e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fbd9 	bl	80046fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d020      	beq.n	8003f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01b      	beq.n	8003f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0204 	mvn.w	r2, #4
 8003f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fc fffc 	bl	8000f80 <HAL_TIM_IC_CaptureCallback>
 8003f88:	e005      	b.n	8003f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fbac 	bl	80046e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fbb3 	bl	80046fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d020      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01b      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0208 	mvn.w	r2, #8
 8003fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fc ffd6 	bl	8000f80 <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e005      	b.n	8003fe2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fb86 	bl	80046e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fb8d 	bl	80046fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d020      	beq.n	8004034 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01b      	beq.n	8004034 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0210 	mvn.w	r2, #16
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2208      	movs	r2, #8
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fc ffb0 	bl	8000f80 <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fb60 	bl	80046e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fb67 	bl	80046fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00c      	beq.n	8004058 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0201 	mvn.w	r2, #1
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fb3e 	bl	80046d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405e:	2b00      	cmp	r3, #0
 8004060:	d104      	bne.n	800406c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00c      	beq.n	8004086 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800407e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f001 f94b 	bl	800531c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00c      	beq.n	80040aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80040a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f001 f943 	bl	8005330 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00c      	beq.n	80040ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fb21 	bl	8004710 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00c      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f06f 0220 	mvn.w	r2, #32
 80040ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f001 f90b 	bl	8005308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b086      	sub	sp, #24
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004114:	2302      	movs	r3, #2
 8004116:	e088      	b.n	800422a <HAL_TIM_IC_ConfigChannel+0x130>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d11b      	bne.n	800415e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004136:	f000 fe6b 	bl	8004e10 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699a      	ldr	r2, [r3, #24]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 020c 	bic.w	r2, r2, #12
 8004148:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6999      	ldr	r1, [r3, #24]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	619a      	str	r2, [r3, #24]
 800415c:	e060      	b.n	8004220 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b04      	cmp	r3, #4
 8004162:	d11c      	bne.n	800419e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004174:	f000 feef 	bl	8004f56 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004186:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6999      	ldr	r1, [r3, #24]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	021a      	lsls	r2, r3, #8
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	619a      	str	r2, [r3, #24]
 800419c:	e040      	b.n	8004220 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d11b      	bne.n	80041dc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80041b4:	f000 ff3c 	bl	8005030 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 020c 	bic.w	r2, r2, #12
 80041c6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69d9      	ldr	r1, [r3, #28]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	61da      	str	r2, [r3, #28]
 80041da:	e021      	b.n	8004220 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b0c      	cmp	r3, #12
 80041e0:	d11c      	bne.n	800421c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80041f2:	f000 ff59 	bl	80050a8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004204:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69d9      	ldr	r1, [r3, #28]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	021a      	lsls	r2, r3, #8
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	61da      	str	r2, [r3, #28]
 800421a:	e001      	b.n	8004220 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004228:	7dfb      	ldrb	r3, [r7, #23]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800424e:	2302      	movs	r3, #2
 8004250:	e0ff      	b.n	8004452 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b14      	cmp	r3, #20
 800425e:	f200 80f0 	bhi.w	8004442 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004262:	a201      	add	r2, pc, #4	@ (adr r2, 8004268 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004268:	080042bd 	.word	0x080042bd
 800426c:	08004443 	.word	0x08004443
 8004270:	08004443 	.word	0x08004443
 8004274:	08004443 	.word	0x08004443
 8004278:	080042fd 	.word	0x080042fd
 800427c:	08004443 	.word	0x08004443
 8004280:	08004443 	.word	0x08004443
 8004284:	08004443 	.word	0x08004443
 8004288:	0800433f 	.word	0x0800433f
 800428c:	08004443 	.word	0x08004443
 8004290:	08004443 	.word	0x08004443
 8004294:	08004443 	.word	0x08004443
 8004298:	0800437f 	.word	0x0800437f
 800429c:	08004443 	.word	0x08004443
 80042a0:	08004443 	.word	0x08004443
 80042a4:	08004443 	.word	0x08004443
 80042a8:	080043c1 	.word	0x080043c1
 80042ac:	08004443 	.word	0x08004443
 80042b0:	08004443 	.word	0x08004443
 80042b4:	08004443 	.word	0x08004443
 80042b8:	08004401 	.word	0x08004401
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 face 	bl	8004864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0208 	orr.w	r2, r2, #8
 80042d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0204 	bic.w	r2, r2, #4
 80042e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6999      	ldr	r1, [r3, #24]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	619a      	str	r2, [r3, #24]
      break;
 80042fa:	e0a5      	b.n	8004448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fb3e 	bl	8004984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6999      	ldr	r1, [r3, #24]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	021a      	lsls	r2, r3, #8
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	619a      	str	r2, [r3, #24]
      break;
 800433c:	e084      	b.n	8004448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	4618      	mov	r0, r3
 8004346:	f000 fba7 	bl	8004a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0208 	orr.w	r2, r2, #8
 8004358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0204 	bic.w	r2, r2, #4
 8004368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69d9      	ldr	r1, [r3, #28]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	61da      	str	r2, [r3, #28]
      break;
 800437c:	e064      	b.n	8004448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fc0f 	bl	8004ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69d9      	ldr	r1, [r3, #28]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	021a      	lsls	r2, r3, #8
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	61da      	str	r2, [r3, #28]
      break;
 80043be:	e043      	b.n	8004448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fc58 	bl	8004c7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0208 	orr.w	r2, r2, #8
 80043da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0204 	bic.w	r2, r2, #4
 80043ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043fe:	e023      	b.n	8004448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fc9c 	bl	8004d44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800441a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800442a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	021a      	lsls	r2, r3, #8
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004440:	e002      	b.n	8004448 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	75fb      	strb	r3, [r7, #23]
      break;
 8004446:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004450:	7dfb      	ldrb	r3, [r7, #23]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop

0800445c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_TIM_ConfigClockSource+0x1c>
 8004474:	2302      	movs	r3, #2
 8004476:	e0dc      	b.n	8004632 <HAL_TIM_ConfigClockSource+0x1d6>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	4b6a      	ldr	r3, [pc, #424]	@ (800463c <HAL_TIM_ConfigClockSource+0x1e0>)
 8004494:	4013      	ands	r3, r2
 8004496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800449e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a64      	ldr	r2, [pc, #400]	@ (8004640 <HAL_TIM_ConfigClockSource+0x1e4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	f000 80a9 	beq.w	8004606 <HAL_TIM_ConfigClockSource+0x1aa>
 80044b4:	4a62      	ldr	r2, [pc, #392]	@ (8004640 <HAL_TIM_ConfigClockSource+0x1e4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	f200 80ae 	bhi.w	8004618 <HAL_TIM_ConfigClockSource+0x1bc>
 80044bc:	4a61      	ldr	r2, [pc, #388]	@ (8004644 <HAL_TIM_ConfigClockSource+0x1e8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	f000 80a1 	beq.w	8004606 <HAL_TIM_ConfigClockSource+0x1aa>
 80044c4:	4a5f      	ldr	r2, [pc, #380]	@ (8004644 <HAL_TIM_ConfigClockSource+0x1e8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	f200 80a6 	bhi.w	8004618 <HAL_TIM_ConfigClockSource+0x1bc>
 80044cc:	4a5e      	ldr	r2, [pc, #376]	@ (8004648 <HAL_TIM_ConfigClockSource+0x1ec>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	f000 8099 	beq.w	8004606 <HAL_TIM_ConfigClockSource+0x1aa>
 80044d4:	4a5c      	ldr	r2, [pc, #368]	@ (8004648 <HAL_TIM_ConfigClockSource+0x1ec>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	f200 809e 	bhi.w	8004618 <HAL_TIM_ConfigClockSource+0x1bc>
 80044dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80044e0:	f000 8091 	beq.w	8004606 <HAL_TIM_ConfigClockSource+0x1aa>
 80044e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80044e8:	f200 8096 	bhi.w	8004618 <HAL_TIM_ConfigClockSource+0x1bc>
 80044ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044f0:	f000 8089 	beq.w	8004606 <HAL_TIM_ConfigClockSource+0x1aa>
 80044f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044f8:	f200 808e 	bhi.w	8004618 <HAL_TIM_ConfigClockSource+0x1bc>
 80044fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004500:	d03e      	beq.n	8004580 <HAL_TIM_ConfigClockSource+0x124>
 8004502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004506:	f200 8087 	bhi.w	8004618 <HAL_TIM_ConfigClockSource+0x1bc>
 800450a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800450e:	f000 8086 	beq.w	800461e <HAL_TIM_ConfigClockSource+0x1c2>
 8004512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004516:	d87f      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x1bc>
 8004518:	2b70      	cmp	r3, #112	@ 0x70
 800451a:	d01a      	beq.n	8004552 <HAL_TIM_ConfigClockSource+0xf6>
 800451c:	2b70      	cmp	r3, #112	@ 0x70
 800451e:	d87b      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x1bc>
 8004520:	2b60      	cmp	r3, #96	@ 0x60
 8004522:	d050      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0x16a>
 8004524:	2b60      	cmp	r3, #96	@ 0x60
 8004526:	d877      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x1bc>
 8004528:	2b50      	cmp	r3, #80	@ 0x50
 800452a:	d03c      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0x14a>
 800452c:	2b50      	cmp	r3, #80	@ 0x50
 800452e:	d873      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x1bc>
 8004530:	2b40      	cmp	r3, #64	@ 0x40
 8004532:	d058      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0x18a>
 8004534:	2b40      	cmp	r3, #64	@ 0x40
 8004536:	d86f      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x1bc>
 8004538:	2b30      	cmp	r3, #48	@ 0x30
 800453a:	d064      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x1aa>
 800453c:	2b30      	cmp	r3, #48	@ 0x30
 800453e:	d86b      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x1bc>
 8004540:	2b20      	cmp	r3, #32
 8004542:	d060      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x1aa>
 8004544:	2b20      	cmp	r3, #32
 8004546:	d867      	bhi.n	8004618 <HAL_TIM_ConfigClockSource+0x1bc>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d05c      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x1aa>
 800454c:	2b10      	cmp	r3, #16
 800454e:	d05a      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0x1aa>
 8004550:	e062      	b.n	8004618 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004562:	f000 fdfd 	bl	8005160 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	609a      	str	r2, [r3, #8]
      break;
 800457e:	e04f      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004590:	f000 fde6 	bl	8005160 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045a2:	609a      	str	r2, [r3, #8]
      break;
 80045a4:	e03c      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b2:	461a      	mov	r2, r3
 80045b4:	f000 fca0 	bl	8004ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2150      	movs	r1, #80	@ 0x50
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fdb0 	bl	8005124 <TIM_ITRx_SetConfig>
      break;
 80045c4:	e02c      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045d2:	461a      	mov	r2, r3
 80045d4:	f000 fcfc 	bl	8004fd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2160      	movs	r1, #96	@ 0x60
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fda0 	bl	8005124 <TIM_ITRx_SetConfig>
      break;
 80045e4:	e01c      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f2:	461a      	mov	r2, r3
 80045f4:	f000 fc80 	bl	8004ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2140      	movs	r1, #64	@ 0x40
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fd90 	bl	8005124 <TIM_ITRx_SetConfig>
      break;
 8004604:	e00c      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f000 fd87 	bl	8005124 <TIM_ITRx_SetConfig>
      break;
 8004616:	e003      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      break;
 800461c:	e000      	b.n	8004620 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800461e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004630:	7bfb      	ldrb	r3, [r7, #15]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	ffceff88 	.word	0xffceff88
 8004640:	00100040 	.word	0x00100040
 8004644:	00100030 	.word	0x00100030
 8004648:	00100020 	.word	0x00100020

0800464c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b0c      	cmp	r3, #12
 800465e:	d831      	bhi.n	80046c4 <HAL_TIM_ReadCapturedValue+0x78>
 8004660:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004666:	bf00      	nop
 8004668:	0800469d 	.word	0x0800469d
 800466c:	080046c5 	.word	0x080046c5
 8004670:	080046c5 	.word	0x080046c5
 8004674:	080046c5 	.word	0x080046c5
 8004678:	080046a7 	.word	0x080046a7
 800467c:	080046c5 	.word	0x080046c5
 8004680:	080046c5 	.word	0x080046c5
 8004684:	080046c5 	.word	0x080046c5
 8004688:	080046b1 	.word	0x080046b1
 800468c:	080046c5 	.word	0x080046c5
 8004690:	080046c5 	.word	0x080046c5
 8004694:	080046c5 	.word	0x080046c5
 8004698:	080046bb 	.word	0x080046bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a2:	60fb      	str	r3, [r7, #12]

      break;
 80046a4:	e00f      	b.n	80046c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ac:	60fb      	str	r3, [r7, #12]

      break;
 80046ae:	e00a      	b.n	80046c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b6:	60fb      	str	r3, [r7, #12]

      break;
 80046b8:	e005      	b.n	80046c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	60fb      	str	r3, [r7, #12]

      break;
 80046c2:	e000      	b.n	80046c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80046c4:	bf00      	nop
  }

  return tmpreg;
 80046c6:	68fb      	ldr	r3, [r7, #12]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a43      	ldr	r2, [pc, #268]	@ (8004844 <TIM_Base_SetConfig+0x120>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004742:	d00f      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a40      	ldr	r2, [pc, #256]	@ (8004848 <TIM_Base_SetConfig+0x124>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00b      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a3f      	ldr	r2, [pc, #252]	@ (800484c <TIM_Base_SetConfig+0x128>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d007      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a3e      	ldr	r2, [pc, #248]	@ (8004850 <TIM_Base_SetConfig+0x12c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_Base_SetConfig+0x40>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a3d      	ldr	r2, [pc, #244]	@ (8004854 <TIM_Base_SetConfig+0x130>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d108      	bne.n	8004776 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a32      	ldr	r2, [pc, #200]	@ (8004844 <TIM_Base_SetConfig+0x120>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d01f      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004784:	d01b      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a2f      	ldr	r2, [pc, #188]	@ (8004848 <TIM_Base_SetConfig+0x124>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d017      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2e      	ldr	r2, [pc, #184]	@ (800484c <TIM_Base_SetConfig+0x128>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a2d      	ldr	r2, [pc, #180]	@ (8004850 <TIM_Base_SetConfig+0x12c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00f      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004854 <TIM_Base_SetConfig+0x130>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00b      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004858 <TIM_Base_SetConfig+0x134>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d007      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a2a      	ldr	r2, [pc, #168]	@ (800485c <TIM_Base_SetConfig+0x138>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d003      	beq.n	80047be <TIM_Base_SetConfig+0x9a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a29      	ldr	r2, [pc, #164]	@ (8004860 <TIM_Base_SetConfig+0x13c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d108      	bne.n	80047d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a14      	ldr	r2, [pc, #80]	@ (8004844 <TIM_Base_SetConfig+0x120>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00f      	beq.n	8004816 <TIM_Base_SetConfig+0xf2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a16      	ldr	r2, [pc, #88]	@ (8004854 <TIM_Base_SetConfig+0x130>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00b      	beq.n	8004816 <TIM_Base_SetConfig+0xf2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a15      	ldr	r2, [pc, #84]	@ (8004858 <TIM_Base_SetConfig+0x134>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d007      	beq.n	8004816 <TIM_Base_SetConfig+0xf2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a14      	ldr	r2, [pc, #80]	@ (800485c <TIM_Base_SetConfig+0x138>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d003      	beq.n	8004816 <TIM_Base_SetConfig+0xf2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a13      	ldr	r2, [pc, #76]	@ (8004860 <TIM_Base_SetConfig+0x13c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d103      	bne.n	800481e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f043 0204 	orr.w	r2, r3, #4
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	601a      	str	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40010000 	.word	0x40010000
 8004848:	40000400 	.word	0x40000400
 800484c:	40000800 	.word	0x40000800
 8004850:	40000c00 	.word	0x40000c00
 8004854:	40010400 	.word	0x40010400
 8004858:	40014000 	.word	0x40014000
 800485c:	40014400 	.word	0x40014400
 8004860:	40014800 	.word	0x40014800

08004864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	f023 0201 	bic.w	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4b37      	ldr	r3, [pc, #220]	@ (800496c <TIM_OC1_SetConfig+0x108>)
 8004890:	4013      	ands	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0303 	bic.w	r3, r3, #3
 800489a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f023 0302 	bic.w	r3, r3, #2
 80048ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004970 <TIM_OC1_SetConfig+0x10c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00f      	beq.n	80048e0 <TIM_OC1_SetConfig+0x7c>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004974 <TIM_OC1_SetConfig+0x110>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <TIM_OC1_SetConfig+0x7c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004978 <TIM_OC1_SetConfig+0x114>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d007      	beq.n	80048e0 <TIM_OC1_SetConfig+0x7c>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a2a      	ldr	r2, [pc, #168]	@ (800497c <TIM_OC1_SetConfig+0x118>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_OC1_SetConfig+0x7c>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a29      	ldr	r2, [pc, #164]	@ (8004980 <TIM_OC1_SetConfig+0x11c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d10c      	bne.n	80048fa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f023 0308 	bic.w	r3, r3, #8
 80048e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f023 0304 	bic.w	r3, r3, #4
 80048f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004970 <TIM_OC1_SetConfig+0x10c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00f      	beq.n	8004922 <TIM_OC1_SetConfig+0xbe>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1b      	ldr	r2, [pc, #108]	@ (8004974 <TIM_OC1_SetConfig+0x110>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00b      	beq.n	8004922 <TIM_OC1_SetConfig+0xbe>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a1a      	ldr	r2, [pc, #104]	@ (8004978 <TIM_OC1_SetConfig+0x114>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d007      	beq.n	8004922 <TIM_OC1_SetConfig+0xbe>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a19      	ldr	r2, [pc, #100]	@ (800497c <TIM_OC1_SetConfig+0x118>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d003      	beq.n	8004922 <TIM_OC1_SetConfig+0xbe>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a18      	ldr	r2, [pc, #96]	@ (8004980 <TIM_OC1_SetConfig+0x11c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d111      	bne.n	8004946 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	621a      	str	r2, [r3, #32]
}
 8004960:	bf00      	nop
 8004962:	371c      	adds	r7, #28
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	fffeff8f 	.word	0xfffeff8f
 8004970:	40010000 	.word	0x40010000
 8004974:	40010400 	.word	0x40010400
 8004978:	40014000 	.word	0x40014000
 800497c:	40014400 	.word	0x40014400
 8004980:	40014800 	.word	0x40014800

08004984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	f023 0210 	bic.w	r2, r3, #16
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4b34      	ldr	r3, [pc, #208]	@ (8004a80 <TIM_OC2_SetConfig+0xfc>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0320 	bic.w	r3, r3, #32
 80049ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a29      	ldr	r2, [pc, #164]	@ (8004a84 <TIM_OC2_SetConfig+0x100>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d003      	beq.n	80049ec <TIM_OC2_SetConfig+0x68>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a28      	ldr	r2, [pc, #160]	@ (8004a88 <TIM_OC2_SetConfig+0x104>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d10d      	bne.n	8004a08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004a84 <TIM_OC2_SetConfig+0x100>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00f      	beq.n	8004a30 <TIM_OC2_SetConfig+0xac>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a1d      	ldr	r2, [pc, #116]	@ (8004a88 <TIM_OC2_SetConfig+0x104>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00b      	beq.n	8004a30 <TIM_OC2_SetConfig+0xac>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a8c <TIM_OC2_SetConfig+0x108>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d007      	beq.n	8004a30 <TIM_OC2_SetConfig+0xac>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a1b      	ldr	r2, [pc, #108]	@ (8004a90 <TIM_OC2_SetConfig+0x10c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d003      	beq.n	8004a30 <TIM_OC2_SetConfig+0xac>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004a94 <TIM_OC2_SetConfig+0x110>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d113      	bne.n	8004a58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	695b      	ldr	r3, [r3, #20]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	621a      	str	r2, [r3, #32]
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	feff8fff 	.word	0xfeff8fff
 8004a84:	40010000 	.word	0x40010000
 8004a88:	40010400 	.word	0x40010400
 8004a8c:	40014000 	.word	0x40014000
 8004a90:	40014400 	.word	0x40014400
 8004a94:	40014800 	.word	0x40014800

08004a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4b33      	ldr	r3, [pc, #204]	@ (8004b90 <TIM_OC3_SetConfig+0xf8>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0303 	bic.w	r3, r3, #3
 8004ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	021b      	lsls	r3, r3, #8
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a28      	ldr	r2, [pc, #160]	@ (8004b94 <TIM_OC3_SetConfig+0xfc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d003      	beq.n	8004afe <TIM_OC3_SetConfig+0x66>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a27      	ldr	r2, [pc, #156]	@ (8004b98 <TIM_OC3_SetConfig+0x100>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d10d      	bne.n	8004b1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	021b      	lsls	r3, r3, #8
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b94 <TIM_OC3_SetConfig+0xfc>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00f      	beq.n	8004b42 <TIM_OC3_SetConfig+0xaa>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a1c      	ldr	r2, [pc, #112]	@ (8004b98 <TIM_OC3_SetConfig+0x100>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00b      	beq.n	8004b42 <TIM_OC3_SetConfig+0xaa>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004b9c <TIM_OC3_SetConfig+0x104>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d007      	beq.n	8004b42 <TIM_OC3_SetConfig+0xaa>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a1a      	ldr	r2, [pc, #104]	@ (8004ba0 <TIM_OC3_SetConfig+0x108>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d003      	beq.n	8004b42 <TIM_OC3_SetConfig+0xaa>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a19      	ldr	r2, [pc, #100]	@ (8004ba4 <TIM_OC3_SetConfig+0x10c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d113      	bne.n	8004b6a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	621a      	str	r2, [r3, #32]
}
 8004b84:	bf00      	nop
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	fffeff8f 	.word	0xfffeff8f
 8004b94:	40010000 	.word	0x40010000
 8004b98:	40010400 	.word	0x40010400
 8004b9c:	40014000 	.word	0x40014000
 8004ba0:	40014400 	.word	0x40014400
 8004ba4:	40014800 	.word	0x40014800

08004ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4b24      	ldr	r3, [pc, #144]	@ (8004c64 <TIM_OC4_SetConfig+0xbc>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	031b      	lsls	r3, r3, #12
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a19      	ldr	r2, [pc, #100]	@ (8004c68 <TIM_OC4_SetConfig+0xc0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00f      	beq.n	8004c28 <TIM_OC4_SetConfig+0x80>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <TIM_OC4_SetConfig+0xc4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00b      	beq.n	8004c28 <TIM_OC4_SetConfig+0x80>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a17      	ldr	r2, [pc, #92]	@ (8004c70 <TIM_OC4_SetConfig+0xc8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d007      	beq.n	8004c28 <TIM_OC4_SetConfig+0x80>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a16      	ldr	r2, [pc, #88]	@ (8004c74 <TIM_OC4_SetConfig+0xcc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d003      	beq.n	8004c28 <TIM_OC4_SetConfig+0x80>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a15      	ldr	r2, [pc, #84]	@ (8004c78 <TIM_OC4_SetConfig+0xd0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d109      	bne.n	8004c3c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	019b      	lsls	r3, r3, #6
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	621a      	str	r2, [r3, #32]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	feff8fff 	.word	0xfeff8fff
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40010400 	.word	0x40010400
 8004c70:	40014000 	.word	0x40014000
 8004c74:	40014400 	.word	0x40014400
 8004c78:	40014800 	.word	0x40014800

08004c7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4b21      	ldr	r3, [pc, #132]	@ (8004d2c <TIM_OC5_SetConfig+0xb0>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004cbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	041b      	lsls	r3, r3, #16
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a18      	ldr	r2, [pc, #96]	@ (8004d30 <TIM_OC5_SetConfig+0xb4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00f      	beq.n	8004cf2 <TIM_OC5_SetConfig+0x76>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a17      	ldr	r2, [pc, #92]	@ (8004d34 <TIM_OC5_SetConfig+0xb8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <TIM_OC5_SetConfig+0x76>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a16      	ldr	r2, [pc, #88]	@ (8004d38 <TIM_OC5_SetConfig+0xbc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <TIM_OC5_SetConfig+0x76>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a15      	ldr	r2, [pc, #84]	@ (8004d3c <TIM_OC5_SetConfig+0xc0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_OC5_SetConfig+0x76>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a14      	ldr	r2, [pc, #80]	@ (8004d40 <TIM_OC5_SetConfig+0xc4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d109      	bne.n	8004d06 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	021b      	lsls	r3, r3, #8
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	621a      	str	r2, [r3, #32]
}
 8004d20:	bf00      	nop
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	fffeff8f 	.word	0xfffeff8f
 8004d30:	40010000 	.word	0x40010000
 8004d34:	40010400 	.word	0x40010400
 8004d38:	40014000 	.word	0x40014000
 8004d3c:	40014400 	.word	0x40014400
 8004d40:	40014800 	.word	0x40014800

08004d44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4b22      	ldr	r3, [pc, #136]	@ (8004df8 <TIM_OC6_SetConfig+0xb4>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	051b      	lsls	r3, r3, #20
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a19      	ldr	r2, [pc, #100]	@ (8004dfc <TIM_OC6_SetConfig+0xb8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00f      	beq.n	8004dbc <TIM_OC6_SetConfig+0x78>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a18      	ldr	r2, [pc, #96]	@ (8004e00 <TIM_OC6_SetConfig+0xbc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00b      	beq.n	8004dbc <TIM_OC6_SetConfig+0x78>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a17      	ldr	r2, [pc, #92]	@ (8004e04 <TIM_OC6_SetConfig+0xc0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d007      	beq.n	8004dbc <TIM_OC6_SetConfig+0x78>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a16      	ldr	r2, [pc, #88]	@ (8004e08 <TIM_OC6_SetConfig+0xc4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d003      	beq.n	8004dbc <TIM_OC6_SetConfig+0x78>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a15      	ldr	r2, [pc, #84]	@ (8004e0c <TIM_OC6_SetConfig+0xc8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d109      	bne.n	8004dd0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	029b      	lsls	r3, r3, #10
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	feff8fff 	.word	0xfeff8fff
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40010400 	.word	0x40010400
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800

08004e10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f023 0201 	bic.w	r2, r3, #1
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4a28      	ldr	r2, [pc, #160]	@ (8004edc <TIM_TI1_SetConfig+0xcc>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d01b      	beq.n	8004e76 <TIM_TI1_SetConfig+0x66>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e44:	d017      	beq.n	8004e76 <TIM_TI1_SetConfig+0x66>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4a25      	ldr	r2, [pc, #148]	@ (8004ee0 <TIM_TI1_SetConfig+0xd0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d013      	beq.n	8004e76 <TIM_TI1_SetConfig+0x66>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4a24      	ldr	r2, [pc, #144]	@ (8004ee4 <TIM_TI1_SetConfig+0xd4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00f      	beq.n	8004e76 <TIM_TI1_SetConfig+0x66>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4a23      	ldr	r2, [pc, #140]	@ (8004ee8 <TIM_TI1_SetConfig+0xd8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00b      	beq.n	8004e76 <TIM_TI1_SetConfig+0x66>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a22      	ldr	r2, [pc, #136]	@ (8004eec <TIM_TI1_SetConfig+0xdc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d007      	beq.n	8004e76 <TIM_TI1_SetConfig+0x66>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4a21      	ldr	r2, [pc, #132]	@ (8004ef0 <TIM_TI1_SetConfig+0xe0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_TI1_SetConfig+0x66>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4a20      	ldr	r2, [pc, #128]	@ (8004ef4 <TIM_TI1_SetConfig+0xe4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d101      	bne.n	8004e7a <TIM_TI1_SetConfig+0x6a>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <TIM_TI1_SetConfig+0x6c>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e003      	b.n	8004e9a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f043 0301 	orr.w	r3, r3, #1
 8004e98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ea0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f023 030a 	bic.w	r3, r3, #10
 8004eb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f003 030a 	and.w	r3, r3, #10
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	621a      	str	r2, [r3, #32]
}
 8004ece:	bf00      	nop
 8004ed0:	371c      	adds	r7, #28
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800
 8004ee8:	40000c00 	.word	0x40000c00
 8004eec:	40010400 	.word	0x40010400
 8004ef0:	40001800 	.word	0x40001800
 8004ef4:	40014000 	.word	0x40014000

08004ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f023 0201 	bic.w	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f023 030a 	bic.w	r3, r3, #10
 8004f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	621a      	str	r2, [r3, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b087      	sub	sp, #28
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f023 0210 	bic.w	r2, r3, #16
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	031b      	lsls	r3, r3, #12
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	621a      	str	r2, [r3, #32]
}
 8004fc4:	bf00      	nop
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f023 0210 	bic.w	r2, r3, #16
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	031b      	lsls	r3, r3, #12
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800500c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	621a      	str	r2, [r3, #32]
}
 8005024:	bf00      	nop
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f023 0303 	bic.w	r3, r3, #3
 800505c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800506c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	b2db      	uxtb	r3, r3
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005080:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	021b      	lsls	r3, r3, #8
 8005086:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	621a      	str	r2, [r3, #32]
}
 800509c:	bf00      	nop
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b087      	sub	sp, #28
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	031b      	lsls	r3, r3, #12
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80050fa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	031b      	lsls	r3, r3, #12
 8005100:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	4313      	orrs	r3, r2
 8005108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4b09      	ldr	r3, [pc, #36]	@ (800515c <TIM_ITRx_SetConfig+0x38>)
 8005138:	4013      	ands	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	f043 0307 	orr.w	r3, r3, #7
 8005146:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	609a      	str	r2, [r3, #8]
}
 800514e:	bf00      	nop
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	ffcfff8f 	.word	0xffcfff8f

08005160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800517a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	021a      	lsls	r2, r3, #8
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	431a      	orrs	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4313      	orrs	r3, r2
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4313      	orrs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	609a      	str	r2, [r3, #8]
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	2201      	movs	r2, #1
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a1a      	ldr	r2, [r3, #32]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	43db      	mvns	r3, r3
 80051c2:	401a      	ands	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a1a      	ldr	r2, [r3, #32]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f003 031f 	and.w	r3, r3, #31
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	fa01 f303 	lsl.w	r3, r1, r3
 80051d8:	431a      	orrs	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	621a      	str	r2, [r3, #32]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005200:	2302      	movs	r3, #2
 8005202:	e06d      	b.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a30      	ldr	r2, [pc, #192]	@ (80052ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d004      	beq.n	8005238 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2f      	ldr	r2, [pc, #188]	@ (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d108      	bne.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800523e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005250:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a20      	ldr	r2, [pc, #128]	@ (80052ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d022      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005276:	d01d      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1d      	ldr	r2, [pc, #116]	@ (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d018      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1c      	ldr	r2, [pc, #112]	@ (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d013      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1a      	ldr	r2, [pc, #104]	@ (80052fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00e      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a15      	ldr	r2, [pc, #84]	@ (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d009      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a16      	ldr	r2, [pc, #88]	@ (8005300 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d004      	beq.n	80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a15      	ldr	r2, [pc, #84]	@ (8005304 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d10c      	bne.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	40010000 	.word	0x40010000
 80052f0:	40010400 	.word	0x40010400
 80052f4:	40000400 	.word	0x40000400
 80052f8:	40000800 	.word	0x40000800
 80052fc:	40000c00 	.word	0x40000c00
 8005300:	40001800 	.word	0x40001800
 8005304:	40014000 	.word	0x40014000

08005308 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e042      	b.n	80053dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f83b 	bl	80053e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2224      	movs	r2, #36	@ 0x24
 8005372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0201 	bic.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fe28 	bl	8005fe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f8bd 	bl	8005514 <UART_SetConfig>
 800539a:	4603      	mov	r3, r0
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e01b      	b.n	80053dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fea7 	bl	8006128 <UART_CheckIdleState>
 80053da:	4603      	mov	r3, r0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	@ 0x28
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	4613      	mov	r3, r2
 8005406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540e:	2b20      	cmp	r3, #32
 8005410:	d17b      	bne.n	800550a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <HAL_UART_Transmit+0x26>
 8005418:	88fb      	ldrh	r3, [r7, #6]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e074      	b.n	800550c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2221      	movs	r2, #33	@ 0x21
 800542e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005432:	f7fc fb1d 	bl	8001a70 <HAL_GetTick>
 8005436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	88fa      	ldrh	r2, [r7, #6]
 800543c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	88fa      	ldrh	r2, [r7, #6]
 8005444:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005450:	d108      	bne.n	8005464 <HAL_UART_Transmit+0x6c>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d104      	bne.n	8005464 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800545a:	2300      	movs	r3, #0
 800545c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	e003      	b.n	800546c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005468:	2300      	movs	r3, #0
 800546a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800546c:	e030      	b.n	80054d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2200      	movs	r2, #0
 8005476:	2180      	movs	r1, #128	@ 0x80
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 feff 	bl	800627c <UART_WaitOnFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e03d      	b.n	800550c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10b      	bne.n	80054ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	3302      	adds	r3, #2
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	e007      	b.n	80054be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	3301      	adds	r3, #1
 80054bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1c8      	bne.n	800546e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2200      	movs	r2, #0
 80054e4:	2140      	movs	r1, #64	@ 0x40
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 fec8 	bl	800627c <UART_WaitOnFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e006      	b.n	800550c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2220      	movs	r2, #32
 8005502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	e000      	b.n	800550c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800550a:	2302      	movs	r3, #2
  }
}
 800550c:	4618      	mov	r0, r3
 800550e:	3720      	adds	r7, #32
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005518:	b092      	sub	sp, #72	@ 0x48
 800551a:	af00      	add	r7, sp, #0
 800551c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	431a      	orrs	r2, r3
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	431a      	orrs	r2, r3
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	4313      	orrs	r3, r2
 800553a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4bbe      	ldr	r3, [pc, #760]	@ (800583c <UART_SetConfig+0x328>)
 8005544:	4013      	ands	r3, r2
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	6812      	ldr	r2, [r2, #0]
 800554a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800554c:	430b      	orrs	r3, r1
 800554e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4ab3      	ldr	r2, [pc, #716]	@ (8005840 <UART_SetConfig+0x32c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d004      	beq.n	8005580 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800557c:	4313      	orrs	r3, r2
 800557e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	4baf      	ldr	r3, [pc, #700]	@ (8005844 <UART_SetConfig+0x330>)
 8005588:	4013      	ands	r3, r2
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005590:	430b      	orrs	r3, r1
 8005592:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559a:	f023 010f 	bic.w	r1, r3, #15
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4aa6      	ldr	r2, [pc, #664]	@ (8005848 <UART_SetConfig+0x334>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d177      	bne.n	80056a4 <UART_SetConfig+0x190>
 80055b4:	4ba5      	ldr	r3, [pc, #660]	@ (800584c <UART_SetConfig+0x338>)
 80055b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055bc:	2b28      	cmp	r3, #40	@ 0x28
 80055be:	d86d      	bhi.n	800569c <UART_SetConfig+0x188>
 80055c0:	a201      	add	r2, pc, #4	@ (adr r2, 80055c8 <UART_SetConfig+0xb4>)
 80055c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c6:	bf00      	nop
 80055c8:	0800566d 	.word	0x0800566d
 80055cc:	0800569d 	.word	0x0800569d
 80055d0:	0800569d 	.word	0x0800569d
 80055d4:	0800569d 	.word	0x0800569d
 80055d8:	0800569d 	.word	0x0800569d
 80055dc:	0800569d 	.word	0x0800569d
 80055e0:	0800569d 	.word	0x0800569d
 80055e4:	0800569d 	.word	0x0800569d
 80055e8:	08005675 	.word	0x08005675
 80055ec:	0800569d 	.word	0x0800569d
 80055f0:	0800569d 	.word	0x0800569d
 80055f4:	0800569d 	.word	0x0800569d
 80055f8:	0800569d 	.word	0x0800569d
 80055fc:	0800569d 	.word	0x0800569d
 8005600:	0800569d 	.word	0x0800569d
 8005604:	0800569d 	.word	0x0800569d
 8005608:	0800567d 	.word	0x0800567d
 800560c:	0800569d 	.word	0x0800569d
 8005610:	0800569d 	.word	0x0800569d
 8005614:	0800569d 	.word	0x0800569d
 8005618:	0800569d 	.word	0x0800569d
 800561c:	0800569d 	.word	0x0800569d
 8005620:	0800569d 	.word	0x0800569d
 8005624:	0800569d 	.word	0x0800569d
 8005628:	08005685 	.word	0x08005685
 800562c:	0800569d 	.word	0x0800569d
 8005630:	0800569d 	.word	0x0800569d
 8005634:	0800569d 	.word	0x0800569d
 8005638:	0800569d 	.word	0x0800569d
 800563c:	0800569d 	.word	0x0800569d
 8005640:	0800569d 	.word	0x0800569d
 8005644:	0800569d 	.word	0x0800569d
 8005648:	0800568d 	.word	0x0800568d
 800564c:	0800569d 	.word	0x0800569d
 8005650:	0800569d 	.word	0x0800569d
 8005654:	0800569d 	.word	0x0800569d
 8005658:	0800569d 	.word	0x0800569d
 800565c:	0800569d 	.word	0x0800569d
 8005660:	0800569d 	.word	0x0800569d
 8005664:	0800569d 	.word	0x0800569d
 8005668:	08005695 	.word	0x08005695
 800566c:	2301      	movs	r3, #1
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005672:	e222      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005674:	2304      	movs	r3, #4
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567a:	e21e      	b.n	8005aba <UART_SetConfig+0x5a6>
 800567c:	2308      	movs	r3, #8
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005682:	e21a      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005684:	2310      	movs	r3, #16
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568a:	e216      	b.n	8005aba <UART_SetConfig+0x5a6>
 800568c:	2320      	movs	r3, #32
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005692:	e212      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005694:	2340      	movs	r3, #64	@ 0x40
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569a:	e20e      	b.n	8005aba <UART_SetConfig+0x5a6>
 800569c:	2380      	movs	r3, #128	@ 0x80
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a2:	e20a      	b.n	8005aba <UART_SetConfig+0x5a6>
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a69      	ldr	r2, [pc, #420]	@ (8005850 <UART_SetConfig+0x33c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d130      	bne.n	8005710 <UART_SetConfig+0x1fc>
 80056ae:	4b67      	ldr	r3, [pc, #412]	@ (800584c <UART_SetConfig+0x338>)
 80056b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	2b05      	cmp	r3, #5
 80056b8:	d826      	bhi.n	8005708 <UART_SetConfig+0x1f4>
 80056ba:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <UART_SetConfig+0x1ac>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056d9 	.word	0x080056d9
 80056c4:	080056e1 	.word	0x080056e1
 80056c8:	080056e9 	.word	0x080056e9
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	080056f9 	.word	0x080056f9
 80056d4:	08005701 	.word	0x08005701
 80056d8:	2300      	movs	r3, #0
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056de:	e1ec      	b.n	8005aba <UART_SetConfig+0x5a6>
 80056e0:	2304      	movs	r3, #4
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e6:	e1e8      	b.n	8005aba <UART_SetConfig+0x5a6>
 80056e8:	2308      	movs	r3, #8
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ee:	e1e4      	b.n	8005aba <UART_SetConfig+0x5a6>
 80056f0:	2310      	movs	r3, #16
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f6:	e1e0      	b.n	8005aba <UART_SetConfig+0x5a6>
 80056f8:	2320      	movs	r3, #32
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fe:	e1dc      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005700:	2340      	movs	r3, #64	@ 0x40
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005706:	e1d8      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005708:	2380      	movs	r3, #128	@ 0x80
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570e:	e1d4      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a4f      	ldr	r2, [pc, #316]	@ (8005854 <UART_SetConfig+0x340>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d130      	bne.n	800577c <UART_SetConfig+0x268>
 800571a:	4b4c      	ldr	r3, [pc, #304]	@ (800584c <UART_SetConfig+0x338>)
 800571c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	2b05      	cmp	r3, #5
 8005724:	d826      	bhi.n	8005774 <UART_SetConfig+0x260>
 8005726:	a201      	add	r2, pc, #4	@ (adr r2, 800572c <UART_SetConfig+0x218>)
 8005728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572c:	08005745 	.word	0x08005745
 8005730:	0800574d 	.word	0x0800574d
 8005734:	08005755 	.word	0x08005755
 8005738:	0800575d 	.word	0x0800575d
 800573c:	08005765 	.word	0x08005765
 8005740:	0800576d 	.word	0x0800576d
 8005744:	2300      	movs	r3, #0
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574a:	e1b6      	b.n	8005aba <UART_SetConfig+0x5a6>
 800574c:	2304      	movs	r3, #4
 800574e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005752:	e1b2      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005754:	2308      	movs	r3, #8
 8005756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800575a:	e1ae      	b.n	8005aba <UART_SetConfig+0x5a6>
 800575c:	2310      	movs	r3, #16
 800575e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005762:	e1aa      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005764:	2320      	movs	r3, #32
 8005766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576a:	e1a6      	b.n	8005aba <UART_SetConfig+0x5a6>
 800576c:	2340      	movs	r3, #64	@ 0x40
 800576e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005772:	e1a2      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005774:	2380      	movs	r3, #128	@ 0x80
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577a:	e19e      	b.n	8005aba <UART_SetConfig+0x5a6>
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a35      	ldr	r2, [pc, #212]	@ (8005858 <UART_SetConfig+0x344>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d130      	bne.n	80057e8 <UART_SetConfig+0x2d4>
 8005786:	4b31      	ldr	r3, [pc, #196]	@ (800584c <UART_SetConfig+0x338>)
 8005788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	2b05      	cmp	r3, #5
 8005790:	d826      	bhi.n	80057e0 <UART_SetConfig+0x2cc>
 8005792:	a201      	add	r2, pc, #4	@ (adr r2, 8005798 <UART_SetConfig+0x284>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057b1 	.word	0x080057b1
 800579c:	080057b9 	.word	0x080057b9
 80057a0:	080057c1 	.word	0x080057c1
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	080057d1 	.word	0x080057d1
 80057ac:	080057d9 	.word	0x080057d9
 80057b0:	2300      	movs	r3, #0
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b6:	e180      	b.n	8005aba <UART_SetConfig+0x5a6>
 80057b8:	2304      	movs	r3, #4
 80057ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057be:	e17c      	b.n	8005aba <UART_SetConfig+0x5a6>
 80057c0:	2308      	movs	r3, #8
 80057c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057c6:	e178      	b.n	8005aba <UART_SetConfig+0x5a6>
 80057c8:	2310      	movs	r3, #16
 80057ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ce:	e174      	b.n	8005aba <UART_SetConfig+0x5a6>
 80057d0:	2320      	movs	r3, #32
 80057d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d6:	e170      	b.n	8005aba <UART_SetConfig+0x5a6>
 80057d8:	2340      	movs	r3, #64	@ 0x40
 80057da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057de:	e16c      	b.n	8005aba <UART_SetConfig+0x5a6>
 80057e0:	2380      	movs	r3, #128	@ 0x80
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e6:	e168      	b.n	8005aba <UART_SetConfig+0x5a6>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a1b      	ldr	r2, [pc, #108]	@ (800585c <UART_SetConfig+0x348>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d142      	bne.n	8005878 <UART_SetConfig+0x364>
 80057f2:	4b16      	ldr	r3, [pc, #88]	@ (800584c <UART_SetConfig+0x338>)
 80057f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b05      	cmp	r3, #5
 80057fc:	d838      	bhi.n	8005870 <UART_SetConfig+0x35c>
 80057fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005804 <UART_SetConfig+0x2f0>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	0800581d 	.word	0x0800581d
 8005808:	08005825 	.word	0x08005825
 800580c:	0800582d 	.word	0x0800582d
 8005810:	08005835 	.word	0x08005835
 8005814:	08005861 	.word	0x08005861
 8005818:	08005869 	.word	0x08005869
 800581c:	2300      	movs	r3, #0
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005822:	e14a      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005824:	2304      	movs	r3, #4
 8005826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800582a:	e146      	b.n	8005aba <UART_SetConfig+0x5a6>
 800582c:	2308      	movs	r3, #8
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005832:	e142      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005834:	2310      	movs	r3, #16
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800583a:	e13e      	b.n	8005aba <UART_SetConfig+0x5a6>
 800583c:	cfff69f3 	.word	0xcfff69f3
 8005840:	58000c00 	.word	0x58000c00
 8005844:	11fff4ff 	.word	0x11fff4ff
 8005848:	40011000 	.word	0x40011000
 800584c:	58024400 	.word	0x58024400
 8005850:	40004400 	.word	0x40004400
 8005854:	40004800 	.word	0x40004800
 8005858:	40004c00 	.word	0x40004c00
 800585c:	40005000 	.word	0x40005000
 8005860:	2320      	movs	r3, #32
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005866:	e128      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005868:	2340      	movs	r3, #64	@ 0x40
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586e:	e124      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005870:	2380      	movs	r3, #128	@ 0x80
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005876:	e120      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4acb      	ldr	r2, [pc, #812]	@ (8005bac <UART_SetConfig+0x698>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d176      	bne.n	8005970 <UART_SetConfig+0x45c>
 8005882:	4bcb      	ldr	r3, [pc, #812]	@ (8005bb0 <UART_SetConfig+0x69c>)
 8005884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800588a:	2b28      	cmp	r3, #40	@ 0x28
 800588c:	d86c      	bhi.n	8005968 <UART_SetConfig+0x454>
 800588e:	a201      	add	r2, pc, #4	@ (adr r2, 8005894 <UART_SetConfig+0x380>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	08005939 	.word	0x08005939
 8005898:	08005969 	.word	0x08005969
 800589c:	08005969 	.word	0x08005969
 80058a0:	08005969 	.word	0x08005969
 80058a4:	08005969 	.word	0x08005969
 80058a8:	08005969 	.word	0x08005969
 80058ac:	08005969 	.word	0x08005969
 80058b0:	08005969 	.word	0x08005969
 80058b4:	08005941 	.word	0x08005941
 80058b8:	08005969 	.word	0x08005969
 80058bc:	08005969 	.word	0x08005969
 80058c0:	08005969 	.word	0x08005969
 80058c4:	08005969 	.word	0x08005969
 80058c8:	08005969 	.word	0x08005969
 80058cc:	08005969 	.word	0x08005969
 80058d0:	08005969 	.word	0x08005969
 80058d4:	08005949 	.word	0x08005949
 80058d8:	08005969 	.word	0x08005969
 80058dc:	08005969 	.word	0x08005969
 80058e0:	08005969 	.word	0x08005969
 80058e4:	08005969 	.word	0x08005969
 80058e8:	08005969 	.word	0x08005969
 80058ec:	08005969 	.word	0x08005969
 80058f0:	08005969 	.word	0x08005969
 80058f4:	08005951 	.word	0x08005951
 80058f8:	08005969 	.word	0x08005969
 80058fc:	08005969 	.word	0x08005969
 8005900:	08005969 	.word	0x08005969
 8005904:	08005969 	.word	0x08005969
 8005908:	08005969 	.word	0x08005969
 800590c:	08005969 	.word	0x08005969
 8005910:	08005969 	.word	0x08005969
 8005914:	08005959 	.word	0x08005959
 8005918:	08005969 	.word	0x08005969
 800591c:	08005969 	.word	0x08005969
 8005920:	08005969 	.word	0x08005969
 8005924:	08005969 	.word	0x08005969
 8005928:	08005969 	.word	0x08005969
 800592c:	08005969 	.word	0x08005969
 8005930:	08005969 	.word	0x08005969
 8005934:	08005961 	.word	0x08005961
 8005938:	2301      	movs	r3, #1
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593e:	e0bc      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005940:	2304      	movs	r3, #4
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005946:	e0b8      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005948:	2308      	movs	r3, #8
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594e:	e0b4      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005950:	2310      	movs	r3, #16
 8005952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005956:	e0b0      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005958:	2320      	movs	r3, #32
 800595a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595e:	e0ac      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005960:	2340      	movs	r3, #64	@ 0x40
 8005962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005966:	e0a8      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005968:	2380      	movs	r3, #128	@ 0x80
 800596a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596e:	e0a4      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a8f      	ldr	r2, [pc, #572]	@ (8005bb4 <UART_SetConfig+0x6a0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d130      	bne.n	80059dc <UART_SetConfig+0x4c8>
 800597a:	4b8d      	ldr	r3, [pc, #564]	@ (8005bb0 <UART_SetConfig+0x69c>)
 800597c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	2b05      	cmp	r3, #5
 8005984:	d826      	bhi.n	80059d4 <UART_SetConfig+0x4c0>
 8005986:	a201      	add	r2, pc, #4	@ (adr r2, 800598c <UART_SetConfig+0x478>)
 8005988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598c:	080059a5 	.word	0x080059a5
 8005990:	080059ad 	.word	0x080059ad
 8005994:	080059b5 	.word	0x080059b5
 8005998:	080059bd 	.word	0x080059bd
 800599c:	080059c5 	.word	0x080059c5
 80059a0:	080059cd 	.word	0x080059cd
 80059a4:	2300      	movs	r3, #0
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059aa:	e086      	b.n	8005aba <UART_SetConfig+0x5a6>
 80059ac:	2304      	movs	r3, #4
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b2:	e082      	b.n	8005aba <UART_SetConfig+0x5a6>
 80059b4:	2308      	movs	r3, #8
 80059b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ba:	e07e      	b.n	8005aba <UART_SetConfig+0x5a6>
 80059bc:	2310      	movs	r3, #16
 80059be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c2:	e07a      	b.n	8005aba <UART_SetConfig+0x5a6>
 80059c4:	2320      	movs	r3, #32
 80059c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ca:	e076      	b.n	8005aba <UART_SetConfig+0x5a6>
 80059cc:	2340      	movs	r3, #64	@ 0x40
 80059ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d2:	e072      	b.n	8005aba <UART_SetConfig+0x5a6>
 80059d4:	2380      	movs	r3, #128	@ 0x80
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059da:	e06e      	b.n	8005aba <UART_SetConfig+0x5a6>
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a75      	ldr	r2, [pc, #468]	@ (8005bb8 <UART_SetConfig+0x6a4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d130      	bne.n	8005a48 <UART_SetConfig+0x534>
 80059e6:	4b72      	ldr	r3, [pc, #456]	@ (8005bb0 <UART_SetConfig+0x69c>)
 80059e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	2b05      	cmp	r3, #5
 80059f0:	d826      	bhi.n	8005a40 <UART_SetConfig+0x52c>
 80059f2:	a201      	add	r2, pc, #4	@ (adr r2, 80059f8 <UART_SetConfig+0x4e4>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a11 	.word	0x08005a11
 80059fc:	08005a19 	.word	0x08005a19
 8005a00:	08005a21 	.word	0x08005a21
 8005a04:	08005a29 	.word	0x08005a29
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a39 	.word	0x08005a39
 8005a10:	2300      	movs	r3, #0
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a16:	e050      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1e:	e04c      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a20:	2308      	movs	r3, #8
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a26:	e048      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a28:	2310      	movs	r3, #16
 8005a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a2e:	e044      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a30:	2320      	movs	r3, #32
 8005a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a36:	e040      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a38:	2340      	movs	r3, #64	@ 0x40
 8005a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3e:	e03c      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a40:	2380      	movs	r3, #128	@ 0x80
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a46:	e038      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a5b      	ldr	r2, [pc, #364]	@ (8005bbc <UART_SetConfig+0x6a8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d130      	bne.n	8005ab4 <UART_SetConfig+0x5a0>
 8005a52:	4b57      	ldr	r3, [pc, #348]	@ (8005bb0 <UART_SetConfig+0x69c>)
 8005a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	2b05      	cmp	r3, #5
 8005a5c:	d826      	bhi.n	8005aac <UART_SetConfig+0x598>
 8005a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a64 <UART_SetConfig+0x550>)
 8005a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a64:	08005a7d 	.word	0x08005a7d
 8005a68:	08005a85 	.word	0x08005a85
 8005a6c:	08005a8d 	.word	0x08005a8d
 8005a70:	08005a95 	.word	0x08005a95
 8005a74:	08005a9d 	.word	0x08005a9d
 8005a78:	08005aa5 	.word	0x08005aa5
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a82:	e01a      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a84:	2304      	movs	r3, #4
 8005a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a8a:	e016      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a8c:	2308      	movs	r3, #8
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a92:	e012      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a94:	2310      	movs	r3, #16
 8005a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9a:	e00e      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005a9c:	2320      	movs	r3, #32
 8005a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa2:	e00a      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005aa4:	2340      	movs	r3, #64	@ 0x40
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aaa:	e006      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005aac:	2380      	movs	r3, #128	@ 0x80
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab2:	e002      	b.n	8005aba <UART_SetConfig+0x5a6>
 8005ab4:	2380      	movs	r3, #128	@ 0x80
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a3f      	ldr	r2, [pc, #252]	@ (8005bbc <UART_SetConfig+0x6a8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	f040 80f8 	bne.w	8005cb6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ac6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	dc46      	bgt.n	8005b5c <UART_SetConfig+0x648>
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	f2c0 8082 	blt.w	8005bd8 <UART_SetConfig+0x6c4>
 8005ad4:	3b02      	subs	r3, #2
 8005ad6:	2b1e      	cmp	r3, #30
 8005ad8:	d87e      	bhi.n	8005bd8 <UART_SetConfig+0x6c4>
 8005ada:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae0 <UART_SetConfig+0x5cc>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005b63 	.word	0x08005b63
 8005ae4:	08005bd9 	.word	0x08005bd9
 8005ae8:	08005b6b 	.word	0x08005b6b
 8005aec:	08005bd9 	.word	0x08005bd9
 8005af0:	08005bd9 	.word	0x08005bd9
 8005af4:	08005bd9 	.word	0x08005bd9
 8005af8:	08005b7b 	.word	0x08005b7b
 8005afc:	08005bd9 	.word	0x08005bd9
 8005b00:	08005bd9 	.word	0x08005bd9
 8005b04:	08005bd9 	.word	0x08005bd9
 8005b08:	08005bd9 	.word	0x08005bd9
 8005b0c:	08005bd9 	.word	0x08005bd9
 8005b10:	08005bd9 	.word	0x08005bd9
 8005b14:	08005bd9 	.word	0x08005bd9
 8005b18:	08005b8b 	.word	0x08005b8b
 8005b1c:	08005bd9 	.word	0x08005bd9
 8005b20:	08005bd9 	.word	0x08005bd9
 8005b24:	08005bd9 	.word	0x08005bd9
 8005b28:	08005bd9 	.word	0x08005bd9
 8005b2c:	08005bd9 	.word	0x08005bd9
 8005b30:	08005bd9 	.word	0x08005bd9
 8005b34:	08005bd9 	.word	0x08005bd9
 8005b38:	08005bd9 	.word	0x08005bd9
 8005b3c:	08005bd9 	.word	0x08005bd9
 8005b40:	08005bd9 	.word	0x08005bd9
 8005b44:	08005bd9 	.word	0x08005bd9
 8005b48:	08005bd9 	.word	0x08005bd9
 8005b4c:	08005bd9 	.word	0x08005bd9
 8005b50:	08005bd9 	.word	0x08005bd9
 8005b54:	08005bd9 	.word	0x08005bd9
 8005b58:	08005bcb 	.word	0x08005bcb
 8005b5c:	2b40      	cmp	r3, #64	@ 0x40
 8005b5e:	d037      	beq.n	8005bd0 <UART_SetConfig+0x6bc>
 8005b60:	e03a      	b.n	8005bd8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005b62:	f7fd fb8d 	bl	8003280 <HAL_RCCEx_GetD3PCLK1Freq>
 8005b66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b68:	e03c      	b.n	8005be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fd fb9c 	bl	80032ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b78:	e034      	b.n	8005be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b7a:	f107 0318 	add.w	r3, r7, #24
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fd fce8 	bl	8003554 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b88:	e02c      	b.n	8005be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b8a:	4b09      	ldr	r3, [pc, #36]	@ (8005bb0 <UART_SetConfig+0x69c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d016      	beq.n	8005bc4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b96:	4b06      	ldr	r3, [pc, #24]	@ (8005bb0 <UART_SetConfig+0x69c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	08db      	lsrs	r3, r3, #3
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	4a07      	ldr	r2, [pc, #28]	@ (8005bc0 <UART_SetConfig+0x6ac>)
 8005ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ba8:	e01c      	b.n	8005be4 <UART_SetConfig+0x6d0>
 8005baa:	bf00      	nop
 8005bac:	40011400 	.word	0x40011400
 8005bb0:	58024400 	.word	0x58024400
 8005bb4:	40007800 	.word	0x40007800
 8005bb8:	40007c00 	.word	0x40007c00
 8005bbc:	58000c00 	.word	0x58000c00
 8005bc0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005bc4:	4b9d      	ldr	r3, [pc, #628]	@ (8005e3c <UART_SetConfig+0x928>)
 8005bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bc8:	e00c      	b.n	8005be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bca:	4b9d      	ldr	r3, [pc, #628]	@ (8005e40 <UART_SetConfig+0x92c>)
 8005bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bce:	e009      	b.n	8005be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bd6:	e005      	b.n	8005be4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005be2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f000 81de 	beq.w	8005fa8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	4a94      	ldr	r2, [pc, #592]	@ (8005e44 <UART_SetConfig+0x930>)
 8005bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bfe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	4613      	mov	r3, r2
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	4413      	add	r3, r2
 8005c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d305      	bcc.n	8005c1c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d903      	bls.n	8005c24 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c22:	e1c1      	b.n	8005fa8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c26:	2200      	movs	r2, #0
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	60fa      	str	r2, [r7, #12]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c30:	4a84      	ldr	r2, [pc, #528]	@ (8005e44 <UART_SetConfig+0x930>)
 8005c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2200      	movs	r2, #0
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	607a      	str	r2, [r7, #4]
 8005c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c46:	f7fa fb9b 	bl	8000380 <__aeabi_uldivmod>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4610      	mov	r0, r2
 8005c50:	4619      	mov	r1, r3
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	f04f 0300 	mov.w	r3, #0
 8005c5a:	020b      	lsls	r3, r1, #8
 8005c5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c60:	0202      	lsls	r2, r0, #8
 8005c62:	6979      	ldr	r1, [r7, #20]
 8005c64:	6849      	ldr	r1, [r1, #4]
 8005c66:	0849      	lsrs	r1, r1, #1
 8005c68:	2000      	movs	r0, #0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	eb12 0804 	adds.w	r8, r2, r4
 8005c72:	eb43 0905 	adc.w	r9, r3, r5
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	469a      	mov	sl, r3
 8005c7e:	4693      	mov	fp, r2
 8005c80:	4652      	mov	r2, sl
 8005c82:	465b      	mov	r3, fp
 8005c84:	4640      	mov	r0, r8
 8005c86:	4649      	mov	r1, r9
 8005c88:	f7fa fb7a 	bl	8000380 <__aeabi_uldivmod>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4613      	mov	r3, r2
 8005c92:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c9a:	d308      	bcc.n	8005cae <UART_SetConfig+0x79a>
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ca2:	d204      	bcs.n	8005cae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005caa:	60da      	str	r2, [r3, #12]
 8005cac:	e17c      	b.n	8005fa8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005cb4:	e178      	b.n	8005fa8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cbe:	f040 80c5 	bne.w	8005e4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005cc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	dc48      	bgt.n	8005d5c <UART_SetConfig+0x848>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	db7b      	blt.n	8005dc6 <UART_SetConfig+0x8b2>
 8005cce:	2b20      	cmp	r3, #32
 8005cd0:	d879      	bhi.n	8005dc6 <UART_SetConfig+0x8b2>
 8005cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd8 <UART_SetConfig+0x7c4>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005d63 	.word	0x08005d63
 8005cdc:	08005d6b 	.word	0x08005d6b
 8005ce0:	08005dc7 	.word	0x08005dc7
 8005ce4:	08005dc7 	.word	0x08005dc7
 8005ce8:	08005d73 	.word	0x08005d73
 8005cec:	08005dc7 	.word	0x08005dc7
 8005cf0:	08005dc7 	.word	0x08005dc7
 8005cf4:	08005dc7 	.word	0x08005dc7
 8005cf8:	08005d83 	.word	0x08005d83
 8005cfc:	08005dc7 	.word	0x08005dc7
 8005d00:	08005dc7 	.word	0x08005dc7
 8005d04:	08005dc7 	.word	0x08005dc7
 8005d08:	08005dc7 	.word	0x08005dc7
 8005d0c:	08005dc7 	.word	0x08005dc7
 8005d10:	08005dc7 	.word	0x08005dc7
 8005d14:	08005dc7 	.word	0x08005dc7
 8005d18:	08005d93 	.word	0x08005d93
 8005d1c:	08005dc7 	.word	0x08005dc7
 8005d20:	08005dc7 	.word	0x08005dc7
 8005d24:	08005dc7 	.word	0x08005dc7
 8005d28:	08005dc7 	.word	0x08005dc7
 8005d2c:	08005dc7 	.word	0x08005dc7
 8005d30:	08005dc7 	.word	0x08005dc7
 8005d34:	08005dc7 	.word	0x08005dc7
 8005d38:	08005dc7 	.word	0x08005dc7
 8005d3c:	08005dc7 	.word	0x08005dc7
 8005d40:	08005dc7 	.word	0x08005dc7
 8005d44:	08005dc7 	.word	0x08005dc7
 8005d48:	08005dc7 	.word	0x08005dc7
 8005d4c:	08005dc7 	.word	0x08005dc7
 8005d50:	08005dc7 	.word	0x08005dc7
 8005d54:	08005dc7 	.word	0x08005dc7
 8005d58:	08005db9 	.word	0x08005db9
 8005d5c:	2b40      	cmp	r3, #64	@ 0x40
 8005d5e:	d02e      	beq.n	8005dbe <UART_SetConfig+0x8aa>
 8005d60:	e031      	b.n	8005dc6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d62:	f7fd fa61 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8005d66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d68:	e033      	b.n	8005dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d6a:	f7fd fa73 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 8005d6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d70:	e02f      	b.n	8005dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fd fa98 	bl	80032ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d80:	e027      	b.n	8005dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d82:	f107 0318 	add.w	r3, r7, #24
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fd fbe4 	bl	8003554 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d90:	e01f      	b.n	8005dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d92:	4b2d      	ldr	r3, [pc, #180]	@ (8005e48 <UART_SetConfig+0x934>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8005e48 <UART_SetConfig+0x934>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	08db      	lsrs	r3, r3, #3
 8005da4:	f003 0303 	and.w	r3, r3, #3
 8005da8:	4a24      	ldr	r2, [pc, #144]	@ (8005e3c <UART_SetConfig+0x928>)
 8005daa:	fa22 f303 	lsr.w	r3, r2, r3
 8005dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005db0:	e00f      	b.n	8005dd2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005db2:	4b22      	ldr	r3, [pc, #136]	@ (8005e3c <UART_SetConfig+0x928>)
 8005db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005db6:	e00c      	b.n	8005dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005db8:	4b21      	ldr	r3, [pc, #132]	@ (8005e40 <UART_SetConfig+0x92c>)
 8005dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dbc:	e009      	b.n	8005dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dc4:	e005      	b.n	8005dd2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005dd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80e7 	beq.w	8005fa8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dde:	4a19      	ldr	r2, [pc, #100]	@ (8005e44 <UART_SetConfig+0x930>)
 8005de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005de4:	461a      	mov	r2, r3
 8005de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dec:	005a      	lsls	r2, r3, #1
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	441a      	add	r2, r3
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e02:	2b0f      	cmp	r3, #15
 8005e04:	d916      	bls.n	8005e34 <UART_SetConfig+0x920>
 8005e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e0c:	d212      	bcs.n	8005e34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	f023 030f 	bic.w	r3, r3, #15
 8005e16:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005e26:	4313      	orrs	r3, r2
 8005e28:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005e30:	60da      	str	r2, [r3, #12]
 8005e32:	e0b9      	b.n	8005fa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005e3a:	e0b5      	b.n	8005fa8 <UART_SetConfig+0xa94>
 8005e3c:	03d09000 	.word	0x03d09000
 8005e40:	003d0900 	.word	0x003d0900
 8005e44:	080072d4 	.word	0x080072d4
 8005e48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	dc49      	bgt.n	8005ee8 <UART_SetConfig+0x9d4>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	db7c      	blt.n	8005f52 <UART_SetConfig+0xa3e>
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	d87a      	bhi.n	8005f52 <UART_SetConfig+0xa3e>
 8005e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e64 <UART_SetConfig+0x950>)
 8005e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e62:	bf00      	nop
 8005e64:	08005eef 	.word	0x08005eef
 8005e68:	08005ef7 	.word	0x08005ef7
 8005e6c:	08005f53 	.word	0x08005f53
 8005e70:	08005f53 	.word	0x08005f53
 8005e74:	08005eff 	.word	0x08005eff
 8005e78:	08005f53 	.word	0x08005f53
 8005e7c:	08005f53 	.word	0x08005f53
 8005e80:	08005f53 	.word	0x08005f53
 8005e84:	08005f0f 	.word	0x08005f0f
 8005e88:	08005f53 	.word	0x08005f53
 8005e8c:	08005f53 	.word	0x08005f53
 8005e90:	08005f53 	.word	0x08005f53
 8005e94:	08005f53 	.word	0x08005f53
 8005e98:	08005f53 	.word	0x08005f53
 8005e9c:	08005f53 	.word	0x08005f53
 8005ea0:	08005f53 	.word	0x08005f53
 8005ea4:	08005f1f 	.word	0x08005f1f
 8005ea8:	08005f53 	.word	0x08005f53
 8005eac:	08005f53 	.word	0x08005f53
 8005eb0:	08005f53 	.word	0x08005f53
 8005eb4:	08005f53 	.word	0x08005f53
 8005eb8:	08005f53 	.word	0x08005f53
 8005ebc:	08005f53 	.word	0x08005f53
 8005ec0:	08005f53 	.word	0x08005f53
 8005ec4:	08005f53 	.word	0x08005f53
 8005ec8:	08005f53 	.word	0x08005f53
 8005ecc:	08005f53 	.word	0x08005f53
 8005ed0:	08005f53 	.word	0x08005f53
 8005ed4:	08005f53 	.word	0x08005f53
 8005ed8:	08005f53 	.word	0x08005f53
 8005edc:	08005f53 	.word	0x08005f53
 8005ee0:	08005f53 	.word	0x08005f53
 8005ee4:	08005f45 	.word	0x08005f45
 8005ee8:	2b40      	cmp	r3, #64	@ 0x40
 8005eea:	d02e      	beq.n	8005f4a <UART_SetConfig+0xa36>
 8005eec:	e031      	b.n	8005f52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eee:	f7fd f99b 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8005ef2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ef4:	e033      	b.n	8005f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ef6:	f7fd f9ad 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 8005efa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005efc:	e02f      	b.n	8005f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fd f9d2 	bl	80032ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f0c:	e027      	b.n	8005f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f0e:	f107 0318 	add.w	r3, r7, #24
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fd fb1e 	bl	8003554 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f1c:	e01f      	b.n	8005f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8005fd4 <UART_SetConfig+0xac0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d009      	beq.n	8005f3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8005fd4 <UART_SetConfig+0xac0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	08db      	lsrs	r3, r3, #3
 8005f30:	f003 0303 	and.w	r3, r3, #3
 8005f34:	4a28      	ldr	r2, [pc, #160]	@ (8005fd8 <UART_SetConfig+0xac4>)
 8005f36:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f3c:	e00f      	b.n	8005f5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005f3e:	4b26      	ldr	r3, [pc, #152]	@ (8005fd8 <UART_SetConfig+0xac4>)
 8005f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f42:	e00c      	b.n	8005f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f44:	4b25      	ldr	r3, [pc, #148]	@ (8005fdc <UART_SetConfig+0xac8>)
 8005f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f48:	e009      	b.n	8005f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f50:	e005      	b.n	8005f5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005f5c:	bf00      	nop
    }

    if (pclk != 0U)
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d021      	beq.n	8005fa8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	4a1d      	ldr	r2, [pc, #116]	@ (8005fe0 <UART_SetConfig+0xacc>)
 8005f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f72:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	085b      	lsrs	r3, r3, #1
 8005f7c:	441a      	add	r2, r3
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8a:	2b0f      	cmp	r3, #15
 8005f8c:	d909      	bls.n	8005fa2 <UART_SetConfig+0xa8e>
 8005f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f94:	d205      	bcs.n	8005fa2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60da      	str	r2, [r3, #12]
 8005fa0:	e002      	b.n	8005fa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005fc4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3748      	adds	r7, #72	@ 0x48
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fd2:	bf00      	nop
 8005fd4:	58024400 	.word	0x58024400
 8005fd8:	03d09000 	.word	0x03d09000
 8005fdc:	003d0900 	.word	0x003d0900
 8005fe0:	080072d4 	.word	0x080072d4

08005fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00a      	beq.n	800600e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01a      	beq.n	80060fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060e2:	d10a      	bne.n	80060fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	605a      	str	r2, [r3, #4]
  }
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b098      	sub	sp, #96	@ 0x60
 800612c:	af02      	add	r7, sp, #8
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006138:	f7fb fc9a 	bl	8001a70 <HAL_GetTick>
 800613c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0308 	and.w	r3, r3, #8
 8006148:	2b08      	cmp	r3, #8
 800614a:	d12f      	bne.n	80061ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800614c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006154:	2200      	movs	r2, #0
 8006156:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f88e 	bl	800627c <UART_WaitOnFlagUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d022      	beq.n	80061ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616e:	e853 3f00 	ldrex	r3, [r3]
 8006172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800617a:	653b      	str	r3, [r7, #80]	@ 0x50
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	461a      	mov	r2, r3
 8006182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006184:	647b      	str	r3, [r7, #68]	@ 0x44
 8006186:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800618a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e6      	bne.n	8006166 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e063      	b.n	8006274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d149      	bne.n	800624e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c2:	2200      	movs	r2, #0
 80061c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f857 	bl	800627c <UART_WaitOnFlagUntilTimeout>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d03c      	beq.n	800624e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	623b      	str	r3, [r7, #32]
   return(result);
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80061f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e6      	bne.n	80061d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	60fb      	str	r3, [r7, #12]
   return(result);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f023 0301 	bic.w	r3, r3, #1
 800621c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3308      	adds	r3, #8
 8006224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006226:	61fa      	str	r2, [r7, #28]
 8006228:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	69b9      	ldr	r1, [r7, #24]
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	617b      	str	r3, [r7, #20]
   return(result);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e5      	bne.n	8006206 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e012      	b.n	8006274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2220      	movs	r2, #32
 8006252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3758      	adds	r7, #88	@ 0x58
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	4613      	mov	r3, r2
 800628a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628c:	e04f      	b.n	800632e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006294:	d04b      	beq.n	800632e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006296:	f7fb fbeb 	bl	8001a70 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d302      	bcc.n	80062ac <UART_WaitOnFlagUntilTimeout+0x30>
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d101      	bne.n	80062b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e04e      	b.n	800634e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d037      	beq.n	800632e <UART_WaitOnFlagUntilTimeout+0xb2>
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b80      	cmp	r3, #128	@ 0x80
 80062c2:	d034      	beq.n	800632e <UART_WaitOnFlagUntilTimeout+0xb2>
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b40      	cmp	r3, #64	@ 0x40
 80062c8:	d031      	beq.n	800632e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d110      	bne.n	80062fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2208      	movs	r2, #8
 80062de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f839 	bl	8006358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2208      	movs	r2, #8
 80062ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e029      	b.n	800634e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69db      	ldr	r3, [r3, #28]
 8006300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006308:	d111      	bne.n	800632e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f81f 	bl	8006358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e00f      	b.n	800634e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69da      	ldr	r2, [r3, #28]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4013      	ands	r3, r2
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	bf0c      	ite	eq
 800633e:	2301      	moveq	r3, #1
 8006340:	2300      	movne	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	429a      	cmp	r2, r3
 800634a:	d0a0      	beq.n	800628e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006358:	b480      	push	{r7}
 800635a:	b095      	sub	sp, #84	@ 0x54
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800636e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006370:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800637e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006380:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006384:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800638c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e6      	bne.n	8006360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3308      	adds	r3, #8
 8006398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006420 <UART_EndRxTransfer+0xc8>)
 80063a6:	4013      	ands	r3, r2
 80063a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3308      	adds	r3, #8
 80063b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e5      	bne.n	8006392 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d118      	bne.n	8006400 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	60bb      	str	r3, [r7, #8]
   return(result);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f023 0310 	bic.w	r3, r3, #16
 80063e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	461a      	mov	r2, r3
 80063ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	6979      	ldr	r1, [r7, #20]
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	613b      	str	r3, [r7, #16]
   return(result);
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e6      	bne.n	80063ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006414:	bf00      	nop
 8006416:	3754      	adds	r7, #84	@ 0x54
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	effffffe 	.word	0xeffffffe

08006424 <std>:
 8006424:	2300      	movs	r3, #0
 8006426:	b510      	push	{r4, lr}
 8006428:	4604      	mov	r4, r0
 800642a:	e9c0 3300 	strd	r3, r3, [r0]
 800642e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006432:	6083      	str	r3, [r0, #8]
 8006434:	8181      	strh	r1, [r0, #12]
 8006436:	6643      	str	r3, [r0, #100]	@ 0x64
 8006438:	81c2      	strh	r2, [r0, #14]
 800643a:	6183      	str	r3, [r0, #24]
 800643c:	4619      	mov	r1, r3
 800643e:	2208      	movs	r2, #8
 8006440:	305c      	adds	r0, #92	@ 0x5c
 8006442:	f000 f906 	bl	8006652 <memset>
 8006446:	4b0d      	ldr	r3, [pc, #52]	@ (800647c <std+0x58>)
 8006448:	6263      	str	r3, [r4, #36]	@ 0x24
 800644a:	4b0d      	ldr	r3, [pc, #52]	@ (8006480 <std+0x5c>)
 800644c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800644e:	4b0d      	ldr	r3, [pc, #52]	@ (8006484 <std+0x60>)
 8006450:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006452:	4b0d      	ldr	r3, [pc, #52]	@ (8006488 <std+0x64>)
 8006454:	6323      	str	r3, [r4, #48]	@ 0x30
 8006456:	4b0d      	ldr	r3, [pc, #52]	@ (800648c <std+0x68>)
 8006458:	6224      	str	r4, [r4, #32]
 800645a:	429c      	cmp	r4, r3
 800645c:	d006      	beq.n	800646c <std+0x48>
 800645e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006462:	4294      	cmp	r4, r2
 8006464:	d002      	beq.n	800646c <std+0x48>
 8006466:	33d0      	adds	r3, #208	@ 0xd0
 8006468:	429c      	cmp	r4, r3
 800646a:	d105      	bne.n	8006478 <std+0x54>
 800646c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006474:	f000 b966 	b.w	8006744 <__retarget_lock_init_recursive>
 8006478:	bd10      	pop	{r4, pc}
 800647a:	bf00      	nop
 800647c:	080065cd 	.word	0x080065cd
 8006480:	080065ef 	.word	0x080065ef
 8006484:	08006627 	.word	0x08006627
 8006488:	0800664b 	.word	0x0800664b
 800648c:	24000278 	.word	0x24000278

08006490 <stdio_exit_handler>:
 8006490:	4a02      	ldr	r2, [pc, #8]	@ (800649c <stdio_exit_handler+0xc>)
 8006492:	4903      	ldr	r1, [pc, #12]	@ (80064a0 <stdio_exit_handler+0x10>)
 8006494:	4803      	ldr	r0, [pc, #12]	@ (80064a4 <stdio_exit_handler+0x14>)
 8006496:	f000 b869 	b.w	800656c <_fwalk_sglue>
 800649a:	bf00      	nop
 800649c:	2400002c 	.word	0x2400002c
 80064a0:	08006fe5 	.word	0x08006fe5
 80064a4:	2400003c 	.word	0x2400003c

080064a8 <cleanup_stdio>:
 80064a8:	6841      	ldr	r1, [r0, #4]
 80064aa:	4b0c      	ldr	r3, [pc, #48]	@ (80064dc <cleanup_stdio+0x34>)
 80064ac:	4299      	cmp	r1, r3
 80064ae:	b510      	push	{r4, lr}
 80064b0:	4604      	mov	r4, r0
 80064b2:	d001      	beq.n	80064b8 <cleanup_stdio+0x10>
 80064b4:	f000 fd96 	bl	8006fe4 <_fflush_r>
 80064b8:	68a1      	ldr	r1, [r4, #8]
 80064ba:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <cleanup_stdio+0x38>)
 80064bc:	4299      	cmp	r1, r3
 80064be:	d002      	beq.n	80064c6 <cleanup_stdio+0x1e>
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 fd8f 	bl	8006fe4 <_fflush_r>
 80064c6:	68e1      	ldr	r1, [r4, #12]
 80064c8:	4b06      	ldr	r3, [pc, #24]	@ (80064e4 <cleanup_stdio+0x3c>)
 80064ca:	4299      	cmp	r1, r3
 80064cc:	d004      	beq.n	80064d8 <cleanup_stdio+0x30>
 80064ce:	4620      	mov	r0, r4
 80064d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064d4:	f000 bd86 	b.w	8006fe4 <_fflush_r>
 80064d8:	bd10      	pop	{r4, pc}
 80064da:	bf00      	nop
 80064dc:	24000278 	.word	0x24000278
 80064e0:	240002e0 	.word	0x240002e0
 80064e4:	24000348 	.word	0x24000348

080064e8 <global_stdio_init.part.0>:
 80064e8:	b510      	push	{r4, lr}
 80064ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006518 <global_stdio_init.part.0+0x30>)
 80064ec:	4c0b      	ldr	r4, [pc, #44]	@ (800651c <global_stdio_init.part.0+0x34>)
 80064ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006520 <global_stdio_init.part.0+0x38>)
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	4620      	mov	r0, r4
 80064f4:	2200      	movs	r2, #0
 80064f6:	2104      	movs	r1, #4
 80064f8:	f7ff ff94 	bl	8006424 <std>
 80064fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006500:	2201      	movs	r2, #1
 8006502:	2109      	movs	r1, #9
 8006504:	f7ff ff8e 	bl	8006424 <std>
 8006508:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800650c:	2202      	movs	r2, #2
 800650e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006512:	2112      	movs	r1, #18
 8006514:	f7ff bf86 	b.w	8006424 <std>
 8006518:	240003b0 	.word	0x240003b0
 800651c:	24000278 	.word	0x24000278
 8006520:	08006491 	.word	0x08006491

08006524 <__sfp_lock_acquire>:
 8006524:	4801      	ldr	r0, [pc, #4]	@ (800652c <__sfp_lock_acquire+0x8>)
 8006526:	f000 b90e 	b.w	8006746 <__retarget_lock_acquire_recursive>
 800652a:	bf00      	nop
 800652c:	240003b9 	.word	0x240003b9

08006530 <__sfp_lock_release>:
 8006530:	4801      	ldr	r0, [pc, #4]	@ (8006538 <__sfp_lock_release+0x8>)
 8006532:	f000 b909 	b.w	8006748 <__retarget_lock_release_recursive>
 8006536:	bf00      	nop
 8006538:	240003b9 	.word	0x240003b9

0800653c <__sinit>:
 800653c:	b510      	push	{r4, lr}
 800653e:	4604      	mov	r4, r0
 8006540:	f7ff fff0 	bl	8006524 <__sfp_lock_acquire>
 8006544:	6a23      	ldr	r3, [r4, #32]
 8006546:	b11b      	cbz	r3, 8006550 <__sinit+0x14>
 8006548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800654c:	f7ff bff0 	b.w	8006530 <__sfp_lock_release>
 8006550:	4b04      	ldr	r3, [pc, #16]	@ (8006564 <__sinit+0x28>)
 8006552:	6223      	str	r3, [r4, #32]
 8006554:	4b04      	ldr	r3, [pc, #16]	@ (8006568 <__sinit+0x2c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f5      	bne.n	8006548 <__sinit+0xc>
 800655c:	f7ff ffc4 	bl	80064e8 <global_stdio_init.part.0>
 8006560:	e7f2      	b.n	8006548 <__sinit+0xc>
 8006562:	bf00      	nop
 8006564:	080064a9 	.word	0x080064a9
 8006568:	240003b0 	.word	0x240003b0

0800656c <_fwalk_sglue>:
 800656c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006570:	4607      	mov	r7, r0
 8006572:	4688      	mov	r8, r1
 8006574:	4614      	mov	r4, r2
 8006576:	2600      	movs	r6, #0
 8006578:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800657c:	f1b9 0901 	subs.w	r9, r9, #1
 8006580:	d505      	bpl.n	800658e <_fwalk_sglue+0x22>
 8006582:	6824      	ldr	r4, [r4, #0]
 8006584:	2c00      	cmp	r4, #0
 8006586:	d1f7      	bne.n	8006578 <_fwalk_sglue+0xc>
 8006588:	4630      	mov	r0, r6
 800658a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800658e:	89ab      	ldrh	r3, [r5, #12]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d907      	bls.n	80065a4 <_fwalk_sglue+0x38>
 8006594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006598:	3301      	adds	r3, #1
 800659a:	d003      	beq.n	80065a4 <_fwalk_sglue+0x38>
 800659c:	4629      	mov	r1, r5
 800659e:	4638      	mov	r0, r7
 80065a0:	47c0      	blx	r8
 80065a2:	4306      	orrs	r6, r0
 80065a4:	3568      	adds	r5, #104	@ 0x68
 80065a6:	e7e9      	b.n	800657c <_fwalk_sglue+0x10>

080065a8 <iprintf>:
 80065a8:	b40f      	push	{r0, r1, r2, r3}
 80065aa:	b507      	push	{r0, r1, r2, lr}
 80065ac:	4906      	ldr	r1, [pc, #24]	@ (80065c8 <iprintf+0x20>)
 80065ae:	ab04      	add	r3, sp, #16
 80065b0:	6808      	ldr	r0, [r1, #0]
 80065b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80065b6:	6881      	ldr	r1, [r0, #8]
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	f000 f9e9 	bl	8006990 <_vfiprintf_r>
 80065be:	b003      	add	sp, #12
 80065c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80065c4:	b004      	add	sp, #16
 80065c6:	4770      	bx	lr
 80065c8:	24000038 	.word	0x24000038

080065cc <__sread>:
 80065cc:	b510      	push	{r4, lr}
 80065ce:	460c      	mov	r4, r1
 80065d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d4:	f000 f868 	bl	80066a8 <_read_r>
 80065d8:	2800      	cmp	r0, #0
 80065da:	bfab      	itete	ge
 80065dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80065de:	89a3      	ldrhlt	r3, [r4, #12]
 80065e0:	181b      	addge	r3, r3, r0
 80065e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065e6:	bfac      	ite	ge
 80065e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80065ea:	81a3      	strhlt	r3, [r4, #12]
 80065ec:	bd10      	pop	{r4, pc}

080065ee <__swrite>:
 80065ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f2:	461f      	mov	r7, r3
 80065f4:	898b      	ldrh	r3, [r1, #12]
 80065f6:	05db      	lsls	r3, r3, #23
 80065f8:	4605      	mov	r5, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	4616      	mov	r6, r2
 80065fe:	d505      	bpl.n	800660c <__swrite+0x1e>
 8006600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006604:	2302      	movs	r3, #2
 8006606:	2200      	movs	r2, #0
 8006608:	f000 f83c 	bl	8006684 <_lseek_r>
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006612:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006616:	81a3      	strh	r3, [r4, #12]
 8006618:	4632      	mov	r2, r6
 800661a:	463b      	mov	r3, r7
 800661c:	4628      	mov	r0, r5
 800661e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006622:	f000 b853 	b.w	80066cc <_write_r>

08006626 <__sseek>:
 8006626:	b510      	push	{r4, lr}
 8006628:	460c      	mov	r4, r1
 800662a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800662e:	f000 f829 	bl	8006684 <_lseek_r>
 8006632:	1c43      	adds	r3, r0, #1
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	bf15      	itete	ne
 8006638:	6560      	strne	r0, [r4, #84]	@ 0x54
 800663a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800663e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006642:	81a3      	strheq	r3, [r4, #12]
 8006644:	bf18      	it	ne
 8006646:	81a3      	strhne	r3, [r4, #12]
 8006648:	bd10      	pop	{r4, pc}

0800664a <__sclose>:
 800664a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664e:	f000 b809 	b.w	8006664 <_close_r>

08006652 <memset>:
 8006652:	4402      	add	r2, r0
 8006654:	4603      	mov	r3, r0
 8006656:	4293      	cmp	r3, r2
 8006658:	d100      	bne.n	800665c <memset+0xa>
 800665a:	4770      	bx	lr
 800665c:	f803 1b01 	strb.w	r1, [r3], #1
 8006660:	e7f9      	b.n	8006656 <memset+0x4>
	...

08006664 <_close_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	4d06      	ldr	r5, [pc, #24]	@ (8006680 <_close_r+0x1c>)
 8006668:	2300      	movs	r3, #0
 800666a:	4604      	mov	r4, r0
 800666c:	4608      	mov	r0, r1
 800666e:	602b      	str	r3, [r5, #0]
 8006670:	f7fa feb6 	bl	80013e0 <_close>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d102      	bne.n	800667e <_close_r+0x1a>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	b103      	cbz	r3, 800667e <_close_r+0x1a>
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	240003b4 	.word	0x240003b4

08006684 <_lseek_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4d07      	ldr	r5, [pc, #28]	@ (80066a4 <_lseek_r+0x20>)
 8006688:	4604      	mov	r4, r0
 800668a:	4608      	mov	r0, r1
 800668c:	4611      	mov	r1, r2
 800668e:	2200      	movs	r2, #0
 8006690:	602a      	str	r2, [r5, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	f7fa fecb 	bl	800142e <_lseek>
 8006698:	1c43      	adds	r3, r0, #1
 800669a:	d102      	bne.n	80066a2 <_lseek_r+0x1e>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	b103      	cbz	r3, 80066a2 <_lseek_r+0x1e>
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	240003b4 	.word	0x240003b4

080066a8 <_read_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d07      	ldr	r5, [pc, #28]	@ (80066c8 <_read_r+0x20>)
 80066ac:	4604      	mov	r4, r0
 80066ae:	4608      	mov	r0, r1
 80066b0:	4611      	mov	r1, r2
 80066b2:	2200      	movs	r2, #0
 80066b4:	602a      	str	r2, [r5, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	f7fa fe59 	bl	800136e <_read>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d102      	bne.n	80066c6 <_read_r+0x1e>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	b103      	cbz	r3, 80066c6 <_read_r+0x1e>
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	240003b4 	.word	0x240003b4

080066cc <_write_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d07      	ldr	r5, [pc, #28]	@ (80066ec <_write_r+0x20>)
 80066d0:	4604      	mov	r4, r0
 80066d2:	4608      	mov	r0, r1
 80066d4:	4611      	mov	r1, r2
 80066d6:	2200      	movs	r2, #0
 80066d8:	602a      	str	r2, [r5, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	f7fa fe64 	bl	80013a8 <_write>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d102      	bne.n	80066ea <_write_r+0x1e>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	b103      	cbz	r3, 80066ea <_write_r+0x1e>
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	240003b4 	.word	0x240003b4

080066f0 <__errno>:
 80066f0:	4b01      	ldr	r3, [pc, #4]	@ (80066f8 <__errno+0x8>)
 80066f2:	6818      	ldr	r0, [r3, #0]
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	24000038 	.word	0x24000038

080066fc <__libc_init_array>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	4d0d      	ldr	r5, [pc, #52]	@ (8006734 <__libc_init_array+0x38>)
 8006700:	4c0d      	ldr	r4, [pc, #52]	@ (8006738 <__libc_init_array+0x3c>)
 8006702:	1b64      	subs	r4, r4, r5
 8006704:	10a4      	asrs	r4, r4, #2
 8006706:	2600      	movs	r6, #0
 8006708:	42a6      	cmp	r6, r4
 800670a:	d109      	bne.n	8006720 <__libc_init_array+0x24>
 800670c:	4d0b      	ldr	r5, [pc, #44]	@ (800673c <__libc_init_array+0x40>)
 800670e:	4c0c      	ldr	r4, [pc, #48]	@ (8006740 <__libc_init_array+0x44>)
 8006710:	f000 fdb8 	bl	8007284 <_init>
 8006714:	1b64      	subs	r4, r4, r5
 8006716:	10a4      	asrs	r4, r4, #2
 8006718:	2600      	movs	r6, #0
 800671a:	42a6      	cmp	r6, r4
 800671c:	d105      	bne.n	800672a <__libc_init_array+0x2e>
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	f855 3b04 	ldr.w	r3, [r5], #4
 8006724:	4798      	blx	r3
 8006726:	3601      	adds	r6, #1
 8006728:	e7ee      	b.n	8006708 <__libc_init_array+0xc>
 800672a:	f855 3b04 	ldr.w	r3, [r5], #4
 800672e:	4798      	blx	r3
 8006730:	3601      	adds	r6, #1
 8006732:	e7f2      	b.n	800671a <__libc_init_array+0x1e>
 8006734:	08007328 	.word	0x08007328
 8006738:	08007328 	.word	0x08007328
 800673c:	08007328 	.word	0x08007328
 8006740:	0800732c 	.word	0x0800732c

08006744 <__retarget_lock_init_recursive>:
 8006744:	4770      	bx	lr

08006746 <__retarget_lock_acquire_recursive>:
 8006746:	4770      	bx	lr

08006748 <__retarget_lock_release_recursive>:
 8006748:	4770      	bx	lr
	...

0800674c <_free_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4605      	mov	r5, r0
 8006750:	2900      	cmp	r1, #0
 8006752:	d041      	beq.n	80067d8 <_free_r+0x8c>
 8006754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006758:	1f0c      	subs	r4, r1, #4
 800675a:	2b00      	cmp	r3, #0
 800675c:	bfb8      	it	lt
 800675e:	18e4      	addlt	r4, r4, r3
 8006760:	f000 f8e0 	bl	8006924 <__malloc_lock>
 8006764:	4a1d      	ldr	r2, [pc, #116]	@ (80067dc <_free_r+0x90>)
 8006766:	6813      	ldr	r3, [r2, #0]
 8006768:	b933      	cbnz	r3, 8006778 <_free_r+0x2c>
 800676a:	6063      	str	r3, [r4, #4]
 800676c:	6014      	str	r4, [r2, #0]
 800676e:	4628      	mov	r0, r5
 8006770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006774:	f000 b8dc 	b.w	8006930 <__malloc_unlock>
 8006778:	42a3      	cmp	r3, r4
 800677a:	d908      	bls.n	800678e <_free_r+0x42>
 800677c:	6820      	ldr	r0, [r4, #0]
 800677e:	1821      	adds	r1, r4, r0
 8006780:	428b      	cmp	r3, r1
 8006782:	bf01      	itttt	eq
 8006784:	6819      	ldreq	r1, [r3, #0]
 8006786:	685b      	ldreq	r3, [r3, #4]
 8006788:	1809      	addeq	r1, r1, r0
 800678a:	6021      	streq	r1, [r4, #0]
 800678c:	e7ed      	b.n	800676a <_free_r+0x1e>
 800678e:	461a      	mov	r2, r3
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	b10b      	cbz	r3, 8006798 <_free_r+0x4c>
 8006794:	42a3      	cmp	r3, r4
 8006796:	d9fa      	bls.n	800678e <_free_r+0x42>
 8006798:	6811      	ldr	r1, [r2, #0]
 800679a:	1850      	adds	r0, r2, r1
 800679c:	42a0      	cmp	r0, r4
 800679e:	d10b      	bne.n	80067b8 <_free_r+0x6c>
 80067a0:	6820      	ldr	r0, [r4, #0]
 80067a2:	4401      	add	r1, r0
 80067a4:	1850      	adds	r0, r2, r1
 80067a6:	4283      	cmp	r3, r0
 80067a8:	6011      	str	r1, [r2, #0]
 80067aa:	d1e0      	bne.n	800676e <_free_r+0x22>
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	6053      	str	r3, [r2, #4]
 80067b2:	4408      	add	r0, r1
 80067b4:	6010      	str	r0, [r2, #0]
 80067b6:	e7da      	b.n	800676e <_free_r+0x22>
 80067b8:	d902      	bls.n	80067c0 <_free_r+0x74>
 80067ba:	230c      	movs	r3, #12
 80067bc:	602b      	str	r3, [r5, #0]
 80067be:	e7d6      	b.n	800676e <_free_r+0x22>
 80067c0:	6820      	ldr	r0, [r4, #0]
 80067c2:	1821      	adds	r1, r4, r0
 80067c4:	428b      	cmp	r3, r1
 80067c6:	bf04      	itt	eq
 80067c8:	6819      	ldreq	r1, [r3, #0]
 80067ca:	685b      	ldreq	r3, [r3, #4]
 80067cc:	6063      	str	r3, [r4, #4]
 80067ce:	bf04      	itt	eq
 80067d0:	1809      	addeq	r1, r1, r0
 80067d2:	6021      	streq	r1, [r4, #0]
 80067d4:	6054      	str	r4, [r2, #4]
 80067d6:	e7ca      	b.n	800676e <_free_r+0x22>
 80067d8:	bd38      	pop	{r3, r4, r5, pc}
 80067da:	bf00      	nop
 80067dc:	240003c0 	.word	0x240003c0

080067e0 <sbrk_aligned>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	4e0f      	ldr	r6, [pc, #60]	@ (8006820 <sbrk_aligned+0x40>)
 80067e4:	460c      	mov	r4, r1
 80067e6:	6831      	ldr	r1, [r6, #0]
 80067e8:	4605      	mov	r5, r0
 80067ea:	b911      	cbnz	r1, 80067f2 <sbrk_aligned+0x12>
 80067ec:	f000 fcb6 	bl	800715c <_sbrk_r>
 80067f0:	6030      	str	r0, [r6, #0]
 80067f2:	4621      	mov	r1, r4
 80067f4:	4628      	mov	r0, r5
 80067f6:	f000 fcb1 	bl	800715c <_sbrk_r>
 80067fa:	1c43      	adds	r3, r0, #1
 80067fc:	d103      	bne.n	8006806 <sbrk_aligned+0x26>
 80067fe:	f04f 34ff 	mov.w	r4, #4294967295
 8006802:	4620      	mov	r0, r4
 8006804:	bd70      	pop	{r4, r5, r6, pc}
 8006806:	1cc4      	adds	r4, r0, #3
 8006808:	f024 0403 	bic.w	r4, r4, #3
 800680c:	42a0      	cmp	r0, r4
 800680e:	d0f8      	beq.n	8006802 <sbrk_aligned+0x22>
 8006810:	1a21      	subs	r1, r4, r0
 8006812:	4628      	mov	r0, r5
 8006814:	f000 fca2 	bl	800715c <_sbrk_r>
 8006818:	3001      	adds	r0, #1
 800681a:	d1f2      	bne.n	8006802 <sbrk_aligned+0x22>
 800681c:	e7ef      	b.n	80067fe <sbrk_aligned+0x1e>
 800681e:	bf00      	nop
 8006820:	240003bc 	.word	0x240003bc

08006824 <_malloc_r>:
 8006824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006828:	1ccd      	adds	r5, r1, #3
 800682a:	f025 0503 	bic.w	r5, r5, #3
 800682e:	3508      	adds	r5, #8
 8006830:	2d0c      	cmp	r5, #12
 8006832:	bf38      	it	cc
 8006834:	250c      	movcc	r5, #12
 8006836:	2d00      	cmp	r5, #0
 8006838:	4606      	mov	r6, r0
 800683a:	db01      	blt.n	8006840 <_malloc_r+0x1c>
 800683c:	42a9      	cmp	r1, r5
 800683e:	d904      	bls.n	800684a <_malloc_r+0x26>
 8006840:	230c      	movs	r3, #12
 8006842:	6033      	str	r3, [r6, #0]
 8006844:	2000      	movs	r0, #0
 8006846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800684a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006920 <_malloc_r+0xfc>
 800684e:	f000 f869 	bl	8006924 <__malloc_lock>
 8006852:	f8d8 3000 	ldr.w	r3, [r8]
 8006856:	461c      	mov	r4, r3
 8006858:	bb44      	cbnz	r4, 80068ac <_malloc_r+0x88>
 800685a:	4629      	mov	r1, r5
 800685c:	4630      	mov	r0, r6
 800685e:	f7ff ffbf 	bl	80067e0 <sbrk_aligned>
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	4604      	mov	r4, r0
 8006866:	d158      	bne.n	800691a <_malloc_r+0xf6>
 8006868:	f8d8 4000 	ldr.w	r4, [r8]
 800686c:	4627      	mov	r7, r4
 800686e:	2f00      	cmp	r7, #0
 8006870:	d143      	bne.n	80068fa <_malloc_r+0xd6>
 8006872:	2c00      	cmp	r4, #0
 8006874:	d04b      	beq.n	800690e <_malloc_r+0xea>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	4639      	mov	r1, r7
 800687a:	4630      	mov	r0, r6
 800687c:	eb04 0903 	add.w	r9, r4, r3
 8006880:	f000 fc6c 	bl	800715c <_sbrk_r>
 8006884:	4581      	cmp	r9, r0
 8006886:	d142      	bne.n	800690e <_malloc_r+0xea>
 8006888:	6821      	ldr	r1, [r4, #0]
 800688a:	1a6d      	subs	r5, r5, r1
 800688c:	4629      	mov	r1, r5
 800688e:	4630      	mov	r0, r6
 8006890:	f7ff ffa6 	bl	80067e0 <sbrk_aligned>
 8006894:	3001      	adds	r0, #1
 8006896:	d03a      	beq.n	800690e <_malloc_r+0xea>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	442b      	add	r3, r5
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	f8d8 3000 	ldr.w	r3, [r8]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	bb62      	cbnz	r2, 8006900 <_malloc_r+0xdc>
 80068a6:	f8c8 7000 	str.w	r7, [r8]
 80068aa:	e00f      	b.n	80068cc <_malloc_r+0xa8>
 80068ac:	6822      	ldr	r2, [r4, #0]
 80068ae:	1b52      	subs	r2, r2, r5
 80068b0:	d420      	bmi.n	80068f4 <_malloc_r+0xd0>
 80068b2:	2a0b      	cmp	r2, #11
 80068b4:	d917      	bls.n	80068e6 <_malloc_r+0xc2>
 80068b6:	1961      	adds	r1, r4, r5
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	6025      	str	r5, [r4, #0]
 80068bc:	bf18      	it	ne
 80068be:	6059      	strne	r1, [r3, #4]
 80068c0:	6863      	ldr	r3, [r4, #4]
 80068c2:	bf08      	it	eq
 80068c4:	f8c8 1000 	streq.w	r1, [r8]
 80068c8:	5162      	str	r2, [r4, r5]
 80068ca:	604b      	str	r3, [r1, #4]
 80068cc:	4630      	mov	r0, r6
 80068ce:	f000 f82f 	bl	8006930 <__malloc_unlock>
 80068d2:	f104 000b 	add.w	r0, r4, #11
 80068d6:	1d23      	adds	r3, r4, #4
 80068d8:	f020 0007 	bic.w	r0, r0, #7
 80068dc:	1ac2      	subs	r2, r0, r3
 80068de:	bf1c      	itt	ne
 80068e0:	1a1b      	subne	r3, r3, r0
 80068e2:	50a3      	strne	r3, [r4, r2]
 80068e4:	e7af      	b.n	8006846 <_malloc_r+0x22>
 80068e6:	6862      	ldr	r2, [r4, #4]
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	bf0c      	ite	eq
 80068ec:	f8c8 2000 	streq.w	r2, [r8]
 80068f0:	605a      	strne	r2, [r3, #4]
 80068f2:	e7eb      	b.n	80068cc <_malloc_r+0xa8>
 80068f4:	4623      	mov	r3, r4
 80068f6:	6864      	ldr	r4, [r4, #4]
 80068f8:	e7ae      	b.n	8006858 <_malloc_r+0x34>
 80068fa:	463c      	mov	r4, r7
 80068fc:	687f      	ldr	r7, [r7, #4]
 80068fe:	e7b6      	b.n	800686e <_malloc_r+0x4a>
 8006900:	461a      	mov	r2, r3
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	42a3      	cmp	r3, r4
 8006906:	d1fb      	bne.n	8006900 <_malloc_r+0xdc>
 8006908:	2300      	movs	r3, #0
 800690a:	6053      	str	r3, [r2, #4]
 800690c:	e7de      	b.n	80068cc <_malloc_r+0xa8>
 800690e:	230c      	movs	r3, #12
 8006910:	6033      	str	r3, [r6, #0]
 8006912:	4630      	mov	r0, r6
 8006914:	f000 f80c 	bl	8006930 <__malloc_unlock>
 8006918:	e794      	b.n	8006844 <_malloc_r+0x20>
 800691a:	6005      	str	r5, [r0, #0]
 800691c:	e7d6      	b.n	80068cc <_malloc_r+0xa8>
 800691e:	bf00      	nop
 8006920:	240003c0 	.word	0x240003c0

08006924 <__malloc_lock>:
 8006924:	4801      	ldr	r0, [pc, #4]	@ (800692c <__malloc_lock+0x8>)
 8006926:	f7ff bf0e 	b.w	8006746 <__retarget_lock_acquire_recursive>
 800692a:	bf00      	nop
 800692c:	240003b8 	.word	0x240003b8

08006930 <__malloc_unlock>:
 8006930:	4801      	ldr	r0, [pc, #4]	@ (8006938 <__malloc_unlock+0x8>)
 8006932:	f7ff bf09 	b.w	8006748 <__retarget_lock_release_recursive>
 8006936:	bf00      	nop
 8006938:	240003b8 	.word	0x240003b8

0800693c <__sfputc_r>:
 800693c:	6893      	ldr	r3, [r2, #8]
 800693e:	3b01      	subs	r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	b410      	push	{r4}
 8006944:	6093      	str	r3, [r2, #8]
 8006946:	da08      	bge.n	800695a <__sfputc_r+0x1e>
 8006948:	6994      	ldr	r4, [r2, #24]
 800694a:	42a3      	cmp	r3, r4
 800694c:	db01      	blt.n	8006952 <__sfputc_r+0x16>
 800694e:	290a      	cmp	r1, #10
 8006950:	d103      	bne.n	800695a <__sfputc_r+0x1e>
 8006952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006956:	f000 bb6d 	b.w	8007034 <__swbuf_r>
 800695a:	6813      	ldr	r3, [r2, #0]
 800695c:	1c58      	adds	r0, r3, #1
 800695e:	6010      	str	r0, [r2, #0]
 8006960:	7019      	strb	r1, [r3, #0]
 8006962:	4608      	mov	r0, r1
 8006964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006968:	4770      	bx	lr

0800696a <__sfputs_r>:
 800696a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696c:	4606      	mov	r6, r0
 800696e:	460f      	mov	r7, r1
 8006970:	4614      	mov	r4, r2
 8006972:	18d5      	adds	r5, r2, r3
 8006974:	42ac      	cmp	r4, r5
 8006976:	d101      	bne.n	800697c <__sfputs_r+0x12>
 8006978:	2000      	movs	r0, #0
 800697a:	e007      	b.n	800698c <__sfputs_r+0x22>
 800697c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006980:	463a      	mov	r2, r7
 8006982:	4630      	mov	r0, r6
 8006984:	f7ff ffda 	bl	800693c <__sfputc_r>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d1f3      	bne.n	8006974 <__sfputs_r+0xa>
 800698c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006990 <_vfiprintf_r>:
 8006990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	460d      	mov	r5, r1
 8006996:	b09d      	sub	sp, #116	@ 0x74
 8006998:	4614      	mov	r4, r2
 800699a:	4698      	mov	r8, r3
 800699c:	4606      	mov	r6, r0
 800699e:	b118      	cbz	r0, 80069a8 <_vfiprintf_r+0x18>
 80069a0:	6a03      	ldr	r3, [r0, #32]
 80069a2:	b90b      	cbnz	r3, 80069a8 <_vfiprintf_r+0x18>
 80069a4:	f7ff fdca 	bl	800653c <__sinit>
 80069a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069aa:	07d9      	lsls	r1, r3, #31
 80069ac:	d405      	bmi.n	80069ba <_vfiprintf_r+0x2a>
 80069ae:	89ab      	ldrh	r3, [r5, #12]
 80069b0:	059a      	lsls	r2, r3, #22
 80069b2:	d402      	bmi.n	80069ba <_vfiprintf_r+0x2a>
 80069b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069b6:	f7ff fec6 	bl	8006746 <__retarget_lock_acquire_recursive>
 80069ba:	89ab      	ldrh	r3, [r5, #12]
 80069bc:	071b      	lsls	r3, r3, #28
 80069be:	d501      	bpl.n	80069c4 <_vfiprintf_r+0x34>
 80069c0:	692b      	ldr	r3, [r5, #16]
 80069c2:	b99b      	cbnz	r3, 80069ec <_vfiprintf_r+0x5c>
 80069c4:	4629      	mov	r1, r5
 80069c6:	4630      	mov	r0, r6
 80069c8:	f000 fb72 	bl	80070b0 <__swsetup_r>
 80069cc:	b170      	cbz	r0, 80069ec <_vfiprintf_r+0x5c>
 80069ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069d0:	07dc      	lsls	r4, r3, #31
 80069d2:	d504      	bpl.n	80069de <_vfiprintf_r+0x4e>
 80069d4:	f04f 30ff 	mov.w	r0, #4294967295
 80069d8:	b01d      	add	sp, #116	@ 0x74
 80069da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069de:	89ab      	ldrh	r3, [r5, #12]
 80069e0:	0598      	lsls	r0, r3, #22
 80069e2:	d4f7      	bmi.n	80069d4 <_vfiprintf_r+0x44>
 80069e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069e6:	f7ff feaf 	bl	8006748 <__retarget_lock_release_recursive>
 80069ea:	e7f3      	b.n	80069d4 <_vfiprintf_r+0x44>
 80069ec:	2300      	movs	r3, #0
 80069ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80069f0:	2320      	movs	r3, #32
 80069f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80069fa:	2330      	movs	r3, #48	@ 0x30
 80069fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006bac <_vfiprintf_r+0x21c>
 8006a00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a04:	f04f 0901 	mov.w	r9, #1
 8006a08:	4623      	mov	r3, r4
 8006a0a:	469a      	mov	sl, r3
 8006a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a10:	b10a      	cbz	r2, 8006a16 <_vfiprintf_r+0x86>
 8006a12:	2a25      	cmp	r2, #37	@ 0x25
 8006a14:	d1f9      	bne.n	8006a0a <_vfiprintf_r+0x7a>
 8006a16:	ebba 0b04 	subs.w	fp, sl, r4
 8006a1a:	d00b      	beq.n	8006a34 <_vfiprintf_r+0xa4>
 8006a1c:	465b      	mov	r3, fp
 8006a1e:	4622      	mov	r2, r4
 8006a20:	4629      	mov	r1, r5
 8006a22:	4630      	mov	r0, r6
 8006a24:	f7ff ffa1 	bl	800696a <__sfputs_r>
 8006a28:	3001      	adds	r0, #1
 8006a2a:	f000 80a7 	beq.w	8006b7c <_vfiprintf_r+0x1ec>
 8006a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a30:	445a      	add	r2, fp
 8006a32:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a34:	f89a 3000 	ldrb.w	r3, [sl]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 809f 	beq.w	8006b7c <_vfiprintf_r+0x1ec>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f04f 32ff 	mov.w	r2, #4294967295
 8006a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a48:	f10a 0a01 	add.w	sl, sl, #1
 8006a4c:	9304      	str	r3, [sp, #16]
 8006a4e:	9307      	str	r3, [sp, #28]
 8006a50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a54:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a56:	4654      	mov	r4, sl
 8006a58:	2205      	movs	r2, #5
 8006a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a5e:	4853      	ldr	r0, [pc, #332]	@ (8006bac <_vfiprintf_r+0x21c>)
 8006a60:	f7f9 fc3e 	bl	80002e0 <memchr>
 8006a64:	9a04      	ldr	r2, [sp, #16]
 8006a66:	b9d8      	cbnz	r0, 8006aa0 <_vfiprintf_r+0x110>
 8006a68:	06d1      	lsls	r1, r2, #27
 8006a6a:	bf44      	itt	mi
 8006a6c:	2320      	movmi	r3, #32
 8006a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a72:	0713      	lsls	r3, r2, #28
 8006a74:	bf44      	itt	mi
 8006a76:	232b      	movmi	r3, #43	@ 0x2b
 8006a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a82:	d015      	beq.n	8006ab0 <_vfiprintf_r+0x120>
 8006a84:	9a07      	ldr	r2, [sp, #28]
 8006a86:	4654      	mov	r4, sl
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f04f 0c0a 	mov.w	ip, #10
 8006a8e:	4621      	mov	r1, r4
 8006a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a94:	3b30      	subs	r3, #48	@ 0x30
 8006a96:	2b09      	cmp	r3, #9
 8006a98:	d94b      	bls.n	8006b32 <_vfiprintf_r+0x1a2>
 8006a9a:	b1b0      	cbz	r0, 8006aca <_vfiprintf_r+0x13a>
 8006a9c:	9207      	str	r2, [sp, #28]
 8006a9e:	e014      	b.n	8006aca <_vfiprintf_r+0x13a>
 8006aa0:	eba0 0308 	sub.w	r3, r0, r8
 8006aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	9304      	str	r3, [sp, #16]
 8006aac:	46a2      	mov	sl, r4
 8006aae:	e7d2      	b.n	8006a56 <_vfiprintf_r+0xc6>
 8006ab0:	9b03      	ldr	r3, [sp, #12]
 8006ab2:	1d19      	adds	r1, r3, #4
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	9103      	str	r1, [sp, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	bfbb      	ittet	lt
 8006abc:	425b      	neglt	r3, r3
 8006abe:	f042 0202 	orrlt.w	r2, r2, #2
 8006ac2:	9307      	strge	r3, [sp, #28]
 8006ac4:	9307      	strlt	r3, [sp, #28]
 8006ac6:	bfb8      	it	lt
 8006ac8:	9204      	strlt	r2, [sp, #16]
 8006aca:	7823      	ldrb	r3, [r4, #0]
 8006acc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ace:	d10a      	bne.n	8006ae6 <_vfiprintf_r+0x156>
 8006ad0:	7863      	ldrb	r3, [r4, #1]
 8006ad2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ad4:	d132      	bne.n	8006b3c <_vfiprintf_r+0x1ac>
 8006ad6:	9b03      	ldr	r3, [sp, #12]
 8006ad8:	1d1a      	adds	r2, r3, #4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	9203      	str	r2, [sp, #12]
 8006ade:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ae2:	3402      	adds	r4, #2
 8006ae4:	9305      	str	r3, [sp, #20]
 8006ae6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006bbc <_vfiprintf_r+0x22c>
 8006aea:	7821      	ldrb	r1, [r4, #0]
 8006aec:	2203      	movs	r2, #3
 8006aee:	4650      	mov	r0, sl
 8006af0:	f7f9 fbf6 	bl	80002e0 <memchr>
 8006af4:	b138      	cbz	r0, 8006b06 <_vfiprintf_r+0x176>
 8006af6:	9b04      	ldr	r3, [sp, #16]
 8006af8:	eba0 000a 	sub.w	r0, r0, sl
 8006afc:	2240      	movs	r2, #64	@ 0x40
 8006afe:	4082      	lsls	r2, r0
 8006b00:	4313      	orrs	r3, r2
 8006b02:	3401      	adds	r4, #1
 8006b04:	9304      	str	r3, [sp, #16]
 8006b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b0a:	4829      	ldr	r0, [pc, #164]	@ (8006bb0 <_vfiprintf_r+0x220>)
 8006b0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b10:	2206      	movs	r2, #6
 8006b12:	f7f9 fbe5 	bl	80002e0 <memchr>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d03f      	beq.n	8006b9a <_vfiprintf_r+0x20a>
 8006b1a:	4b26      	ldr	r3, [pc, #152]	@ (8006bb4 <_vfiprintf_r+0x224>)
 8006b1c:	bb1b      	cbnz	r3, 8006b66 <_vfiprintf_r+0x1d6>
 8006b1e:	9b03      	ldr	r3, [sp, #12]
 8006b20:	3307      	adds	r3, #7
 8006b22:	f023 0307 	bic.w	r3, r3, #7
 8006b26:	3308      	adds	r3, #8
 8006b28:	9303      	str	r3, [sp, #12]
 8006b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b2c:	443b      	add	r3, r7
 8006b2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b30:	e76a      	b.n	8006a08 <_vfiprintf_r+0x78>
 8006b32:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b36:	460c      	mov	r4, r1
 8006b38:	2001      	movs	r0, #1
 8006b3a:	e7a8      	b.n	8006a8e <_vfiprintf_r+0xfe>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	3401      	adds	r4, #1
 8006b40:	9305      	str	r3, [sp, #20]
 8006b42:	4619      	mov	r1, r3
 8006b44:	f04f 0c0a 	mov.w	ip, #10
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b4e:	3a30      	subs	r2, #48	@ 0x30
 8006b50:	2a09      	cmp	r2, #9
 8006b52:	d903      	bls.n	8006b5c <_vfiprintf_r+0x1cc>
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0c6      	beq.n	8006ae6 <_vfiprintf_r+0x156>
 8006b58:	9105      	str	r1, [sp, #20]
 8006b5a:	e7c4      	b.n	8006ae6 <_vfiprintf_r+0x156>
 8006b5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b60:	4604      	mov	r4, r0
 8006b62:	2301      	movs	r3, #1
 8006b64:	e7f0      	b.n	8006b48 <_vfiprintf_r+0x1b8>
 8006b66:	ab03      	add	r3, sp, #12
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	462a      	mov	r2, r5
 8006b6c:	4b12      	ldr	r3, [pc, #72]	@ (8006bb8 <_vfiprintf_r+0x228>)
 8006b6e:	a904      	add	r1, sp, #16
 8006b70:	4630      	mov	r0, r6
 8006b72:	f3af 8000 	nop.w
 8006b76:	4607      	mov	r7, r0
 8006b78:	1c78      	adds	r0, r7, #1
 8006b7a:	d1d6      	bne.n	8006b2a <_vfiprintf_r+0x19a>
 8006b7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b7e:	07d9      	lsls	r1, r3, #31
 8006b80:	d405      	bmi.n	8006b8e <_vfiprintf_r+0x1fe>
 8006b82:	89ab      	ldrh	r3, [r5, #12]
 8006b84:	059a      	lsls	r2, r3, #22
 8006b86:	d402      	bmi.n	8006b8e <_vfiprintf_r+0x1fe>
 8006b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b8a:	f7ff fddd 	bl	8006748 <__retarget_lock_release_recursive>
 8006b8e:	89ab      	ldrh	r3, [r5, #12]
 8006b90:	065b      	lsls	r3, r3, #25
 8006b92:	f53f af1f 	bmi.w	80069d4 <_vfiprintf_r+0x44>
 8006b96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b98:	e71e      	b.n	80069d8 <_vfiprintf_r+0x48>
 8006b9a:	ab03      	add	r3, sp, #12
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	462a      	mov	r2, r5
 8006ba0:	4b05      	ldr	r3, [pc, #20]	@ (8006bb8 <_vfiprintf_r+0x228>)
 8006ba2:	a904      	add	r1, sp, #16
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f000 f879 	bl	8006c9c <_printf_i>
 8006baa:	e7e4      	b.n	8006b76 <_vfiprintf_r+0x1e6>
 8006bac:	080072ec 	.word	0x080072ec
 8006bb0:	080072f6 	.word	0x080072f6
 8006bb4:	00000000 	.word	0x00000000
 8006bb8:	0800696b 	.word	0x0800696b
 8006bbc:	080072f2 	.word	0x080072f2

08006bc0 <_printf_common>:
 8006bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc4:	4616      	mov	r6, r2
 8006bc6:	4698      	mov	r8, r3
 8006bc8:	688a      	ldr	r2, [r1, #8]
 8006bca:	690b      	ldr	r3, [r1, #16]
 8006bcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	bfb8      	it	lt
 8006bd4:	4613      	movlt	r3, r2
 8006bd6:	6033      	str	r3, [r6, #0]
 8006bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bdc:	4607      	mov	r7, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	b10a      	cbz	r2, 8006be6 <_printf_common+0x26>
 8006be2:	3301      	adds	r3, #1
 8006be4:	6033      	str	r3, [r6, #0]
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	0699      	lsls	r1, r3, #26
 8006bea:	bf42      	ittt	mi
 8006bec:	6833      	ldrmi	r3, [r6, #0]
 8006bee:	3302      	addmi	r3, #2
 8006bf0:	6033      	strmi	r3, [r6, #0]
 8006bf2:	6825      	ldr	r5, [r4, #0]
 8006bf4:	f015 0506 	ands.w	r5, r5, #6
 8006bf8:	d106      	bne.n	8006c08 <_printf_common+0x48>
 8006bfa:	f104 0a19 	add.w	sl, r4, #25
 8006bfe:	68e3      	ldr	r3, [r4, #12]
 8006c00:	6832      	ldr	r2, [r6, #0]
 8006c02:	1a9b      	subs	r3, r3, r2
 8006c04:	42ab      	cmp	r3, r5
 8006c06:	dc26      	bgt.n	8006c56 <_printf_common+0x96>
 8006c08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c0c:	6822      	ldr	r2, [r4, #0]
 8006c0e:	3b00      	subs	r3, #0
 8006c10:	bf18      	it	ne
 8006c12:	2301      	movne	r3, #1
 8006c14:	0692      	lsls	r2, r2, #26
 8006c16:	d42b      	bmi.n	8006c70 <_printf_common+0xb0>
 8006c18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c1c:	4641      	mov	r1, r8
 8006c1e:	4638      	mov	r0, r7
 8006c20:	47c8      	blx	r9
 8006c22:	3001      	adds	r0, #1
 8006c24:	d01e      	beq.n	8006c64 <_printf_common+0xa4>
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	6922      	ldr	r2, [r4, #16]
 8006c2a:	f003 0306 	and.w	r3, r3, #6
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	bf02      	ittt	eq
 8006c32:	68e5      	ldreq	r5, [r4, #12]
 8006c34:	6833      	ldreq	r3, [r6, #0]
 8006c36:	1aed      	subeq	r5, r5, r3
 8006c38:	68a3      	ldr	r3, [r4, #8]
 8006c3a:	bf0c      	ite	eq
 8006c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c40:	2500      	movne	r5, #0
 8006c42:	4293      	cmp	r3, r2
 8006c44:	bfc4      	itt	gt
 8006c46:	1a9b      	subgt	r3, r3, r2
 8006c48:	18ed      	addgt	r5, r5, r3
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	341a      	adds	r4, #26
 8006c4e:	42b5      	cmp	r5, r6
 8006c50:	d11a      	bne.n	8006c88 <_printf_common+0xc8>
 8006c52:	2000      	movs	r0, #0
 8006c54:	e008      	b.n	8006c68 <_printf_common+0xa8>
 8006c56:	2301      	movs	r3, #1
 8006c58:	4652      	mov	r2, sl
 8006c5a:	4641      	mov	r1, r8
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	47c8      	blx	r9
 8006c60:	3001      	adds	r0, #1
 8006c62:	d103      	bne.n	8006c6c <_printf_common+0xac>
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6c:	3501      	adds	r5, #1
 8006c6e:	e7c6      	b.n	8006bfe <_printf_common+0x3e>
 8006c70:	18e1      	adds	r1, r4, r3
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	2030      	movs	r0, #48	@ 0x30
 8006c76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c7a:	4422      	add	r2, r4
 8006c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c84:	3302      	adds	r3, #2
 8006c86:	e7c7      	b.n	8006c18 <_printf_common+0x58>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	4641      	mov	r1, r8
 8006c8e:	4638      	mov	r0, r7
 8006c90:	47c8      	blx	r9
 8006c92:	3001      	adds	r0, #1
 8006c94:	d0e6      	beq.n	8006c64 <_printf_common+0xa4>
 8006c96:	3601      	adds	r6, #1
 8006c98:	e7d9      	b.n	8006c4e <_printf_common+0x8e>
	...

08006c9c <_printf_i>:
 8006c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca0:	7e0f      	ldrb	r7, [r1, #24]
 8006ca2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ca4:	2f78      	cmp	r7, #120	@ 0x78
 8006ca6:	4691      	mov	r9, r2
 8006ca8:	4680      	mov	r8, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	469a      	mov	sl, r3
 8006cae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006cb2:	d807      	bhi.n	8006cc4 <_printf_i+0x28>
 8006cb4:	2f62      	cmp	r7, #98	@ 0x62
 8006cb6:	d80a      	bhi.n	8006cce <_printf_i+0x32>
 8006cb8:	2f00      	cmp	r7, #0
 8006cba:	f000 80d2 	beq.w	8006e62 <_printf_i+0x1c6>
 8006cbe:	2f58      	cmp	r7, #88	@ 0x58
 8006cc0:	f000 80b9 	beq.w	8006e36 <_printf_i+0x19a>
 8006cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ccc:	e03a      	b.n	8006d44 <_printf_i+0xa8>
 8006cce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cd2:	2b15      	cmp	r3, #21
 8006cd4:	d8f6      	bhi.n	8006cc4 <_printf_i+0x28>
 8006cd6:	a101      	add	r1, pc, #4	@ (adr r1, 8006cdc <_printf_i+0x40>)
 8006cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cdc:	08006d35 	.word	0x08006d35
 8006ce0:	08006d49 	.word	0x08006d49
 8006ce4:	08006cc5 	.word	0x08006cc5
 8006ce8:	08006cc5 	.word	0x08006cc5
 8006cec:	08006cc5 	.word	0x08006cc5
 8006cf0:	08006cc5 	.word	0x08006cc5
 8006cf4:	08006d49 	.word	0x08006d49
 8006cf8:	08006cc5 	.word	0x08006cc5
 8006cfc:	08006cc5 	.word	0x08006cc5
 8006d00:	08006cc5 	.word	0x08006cc5
 8006d04:	08006cc5 	.word	0x08006cc5
 8006d08:	08006e49 	.word	0x08006e49
 8006d0c:	08006d73 	.word	0x08006d73
 8006d10:	08006e03 	.word	0x08006e03
 8006d14:	08006cc5 	.word	0x08006cc5
 8006d18:	08006cc5 	.word	0x08006cc5
 8006d1c:	08006e6b 	.word	0x08006e6b
 8006d20:	08006cc5 	.word	0x08006cc5
 8006d24:	08006d73 	.word	0x08006d73
 8006d28:	08006cc5 	.word	0x08006cc5
 8006d2c:	08006cc5 	.word	0x08006cc5
 8006d30:	08006e0b 	.word	0x08006e0b
 8006d34:	6833      	ldr	r3, [r6, #0]
 8006d36:	1d1a      	adds	r2, r3, #4
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6032      	str	r2, [r6, #0]
 8006d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d44:	2301      	movs	r3, #1
 8006d46:	e09d      	b.n	8006e84 <_printf_i+0x1e8>
 8006d48:	6833      	ldr	r3, [r6, #0]
 8006d4a:	6820      	ldr	r0, [r4, #0]
 8006d4c:	1d19      	adds	r1, r3, #4
 8006d4e:	6031      	str	r1, [r6, #0]
 8006d50:	0606      	lsls	r6, r0, #24
 8006d52:	d501      	bpl.n	8006d58 <_printf_i+0xbc>
 8006d54:	681d      	ldr	r5, [r3, #0]
 8006d56:	e003      	b.n	8006d60 <_printf_i+0xc4>
 8006d58:	0645      	lsls	r5, r0, #25
 8006d5a:	d5fb      	bpl.n	8006d54 <_printf_i+0xb8>
 8006d5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d60:	2d00      	cmp	r5, #0
 8006d62:	da03      	bge.n	8006d6c <_printf_i+0xd0>
 8006d64:	232d      	movs	r3, #45	@ 0x2d
 8006d66:	426d      	negs	r5, r5
 8006d68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d6c:	4859      	ldr	r0, [pc, #356]	@ (8006ed4 <_printf_i+0x238>)
 8006d6e:	230a      	movs	r3, #10
 8006d70:	e011      	b.n	8006d96 <_printf_i+0xfa>
 8006d72:	6821      	ldr	r1, [r4, #0]
 8006d74:	6833      	ldr	r3, [r6, #0]
 8006d76:	0608      	lsls	r0, r1, #24
 8006d78:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d7c:	d402      	bmi.n	8006d84 <_printf_i+0xe8>
 8006d7e:	0649      	lsls	r1, r1, #25
 8006d80:	bf48      	it	mi
 8006d82:	b2ad      	uxthmi	r5, r5
 8006d84:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d86:	4853      	ldr	r0, [pc, #332]	@ (8006ed4 <_printf_i+0x238>)
 8006d88:	6033      	str	r3, [r6, #0]
 8006d8a:	bf14      	ite	ne
 8006d8c:	230a      	movne	r3, #10
 8006d8e:	2308      	moveq	r3, #8
 8006d90:	2100      	movs	r1, #0
 8006d92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d96:	6866      	ldr	r6, [r4, #4]
 8006d98:	60a6      	str	r6, [r4, #8]
 8006d9a:	2e00      	cmp	r6, #0
 8006d9c:	bfa2      	ittt	ge
 8006d9e:	6821      	ldrge	r1, [r4, #0]
 8006da0:	f021 0104 	bicge.w	r1, r1, #4
 8006da4:	6021      	strge	r1, [r4, #0]
 8006da6:	b90d      	cbnz	r5, 8006dac <_printf_i+0x110>
 8006da8:	2e00      	cmp	r6, #0
 8006daa:	d04b      	beq.n	8006e44 <_printf_i+0x1a8>
 8006dac:	4616      	mov	r6, r2
 8006dae:	fbb5 f1f3 	udiv	r1, r5, r3
 8006db2:	fb03 5711 	mls	r7, r3, r1, r5
 8006db6:	5dc7      	ldrb	r7, [r0, r7]
 8006db8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006dbc:	462f      	mov	r7, r5
 8006dbe:	42bb      	cmp	r3, r7
 8006dc0:	460d      	mov	r5, r1
 8006dc2:	d9f4      	bls.n	8006dae <_printf_i+0x112>
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d10b      	bne.n	8006de0 <_printf_i+0x144>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	07df      	lsls	r7, r3, #31
 8006dcc:	d508      	bpl.n	8006de0 <_printf_i+0x144>
 8006dce:	6923      	ldr	r3, [r4, #16]
 8006dd0:	6861      	ldr	r1, [r4, #4]
 8006dd2:	4299      	cmp	r1, r3
 8006dd4:	bfde      	ittt	le
 8006dd6:	2330      	movle	r3, #48	@ 0x30
 8006dd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ddc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006de0:	1b92      	subs	r2, r2, r6
 8006de2:	6122      	str	r2, [r4, #16]
 8006de4:	f8cd a000 	str.w	sl, [sp]
 8006de8:	464b      	mov	r3, r9
 8006dea:	aa03      	add	r2, sp, #12
 8006dec:	4621      	mov	r1, r4
 8006dee:	4640      	mov	r0, r8
 8006df0:	f7ff fee6 	bl	8006bc0 <_printf_common>
 8006df4:	3001      	adds	r0, #1
 8006df6:	d14a      	bne.n	8006e8e <_printf_i+0x1f2>
 8006df8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfc:	b004      	add	sp, #16
 8006dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	f043 0320 	orr.w	r3, r3, #32
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	4833      	ldr	r0, [pc, #204]	@ (8006ed8 <_printf_i+0x23c>)
 8006e0c:	2778      	movs	r7, #120	@ 0x78
 8006e0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	6831      	ldr	r1, [r6, #0]
 8006e16:	061f      	lsls	r7, r3, #24
 8006e18:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e1c:	d402      	bmi.n	8006e24 <_printf_i+0x188>
 8006e1e:	065f      	lsls	r7, r3, #25
 8006e20:	bf48      	it	mi
 8006e22:	b2ad      	uxthmi	r5, r5
 8006e24:	6031      	str	r1, [r6, #0]
 8006e26:	07d9      	lsls	r1, r3, #31
 8006e28:	bf44      	itt	mi
 8006e2a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e2e:	6023      	strmi	r3, [r4, #0]
 8006e30:	b11d      	cbz	r5, 8006e3a <_printf_i+0x19e>
 8006e32:	2310      	movs	r3, #16
 8006e34:	e7ac      	b.n	8006d90 <_printf_i+0xf4>
 8006e36:	4827      	ldr	r0, [pc, #156]	@ (8006ed4 <_printf_i+0x238>)
 8006e38:	e7e9      	b.n	8006e0e <_printf_i+0x172>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	f023 0320 	bic.w	r3, r3, #32
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	e7f6      	b.n	8006e32 <_printf_i+0x196>
 8006e44:	4616      	mov	r6, r2
 8006e46:	e7bd      	b.n	8006dc4 <_printf_i+0x128>
 8006e48:	6833      	ldr	r3, [r6, #0]
 8006e4a:	6825      	ldr	r5, [r4, #0]
 8006e4c:	6961      	ldr	r1, [r4, #20]
 8006e4e:	1d18      	adds	r0, r3, #4
 8006e50:	6030      	str	r0, [r6, #0]
 8006e52:	062e      	lsls	r6, r5, #24
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	d501      	bpl.n	8006e5c <_printf_i+0x1c0>
 8006e58:	6019      	str	r1, [r3, #0]
 8006e5a:	e002      	b.n	8006e62 <_printf_i+0x1c6>
 8006e5c:	0668      	lsls	r0, r5, #25
 8006e5e:	d5fb      	bpl.n	8006e58 <_printf_i+0x1bc>
 8006e60:	8019      	strh	r1, [r3, #0]
 8006e62:	2300      	movs	r3, #0
 8006e64:	6123      	str	r3, [r4, #16]
 8006e66:	4616      	mov	r6, r2
 8006e68:	e7bc      	b.n	8006de4 <_printf_i+0x148>
 8006e6a:	6833      	ldr	r3, [r6, #0]
 8006e6c:	1d1a      	adds	r2, r3, #4
 8006e6e:	6032      	str	r2, [r6, #0]
 8006e70:	681e      	ldr	r6, [r3, #0]
 8006e72:	6862      	ldr	r2, [r4, #4]
 8006e74:	2100      	movs	r1, #0
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7f9 fa32 	bl	80002e0 <memchr>
 8006e7c:	b108      	cbz	r0, 8006e82 <_printf_i+0x1e6>
 8006e7e:	1b80      	subs	r0, r0, r6
 8006e80:	6060      	str	r0, [r4, #4]
 8006e82:	6863      	ldr	r3, [r4, #4]
 8006e84:	6123      	str	r3, [r4, #16]
 8006e86:	2300      	movs	r3, #0
 8006e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e8c:	e7aa      	b.n	8006de4 <_printf_i+0x148>
 8006e8e:	6923      	ldr	r3, [r4, #16]
 8006e90:	4632      	mov	r2, r6
 8006e92:	4649      	mov	r1, r9
 8006e94:	4640      	mov	r0, r8
 8006e96:	47d0      	blx	sl
 8006e98:	3001      	adds	r0, #1
 8006e9a:	d0ad      	beq.n	8006df8 <_printf_i+0x15c>
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	079b      	lsls	r3, r3, #30
 8006ea0:	d413      	bmi.n	8006eca <_printf_i+0x22e>
 8006ea2:	68e0      	ldr	r0, [r4, #12]
 8006ea4:	9b03      	ldr	r3, [sp, #12]
 8006ea6:	4298      	cmp	r0, r3
 8006ea8:	bfb8      	it	lt
 8006eaa:	4618      	movlt	r0, r3
 8006eac:	e7a6      	b.n	8006dfc <_printf_i+0x160>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	4632      	mov	r2, r6
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	47d0      	blx	sl
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d09d      	beq.n	8006df8 <_printf_i+0x15c>
 8006ebc:	3501      	adds	r5, #1
 8006ebe:	68e3      	ldr	r3, [r4, #12]
 8006ec0:	9903      	ldr	r1, [sp, #12]
 8006ec2:	1a5b      	subs	r3, r3, r1
 8006ec4:	42ab      	cmp	r3, r5
 8006ec6:	dcf2      	bgt.n	8006eae <_printf_i+0x212>
 8006ec8:	e7eb      	b.n	8006ea2 <_printf_i+0x206>
 8006eca:	2500      	movs	r5, #0
 8006ecc:	f104 0619 	add.w	r6, r4, #25
 8006ed0:	e7f5      	b.n	8006ebe <_printf_i+0x222>
 8006ed2:	bf00      	nop
 8006ed4:	080072fd 	.word	0x080072fd
 8006ed8:	0800730e 	.word	0x0800730e

08006edc <__sflush_r>:
 8006edc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee4:	0716      	lsls	r6, r2, #28
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	460c      	mov	r4, r1
 8006eea:	d454      	bmi.n	8006f96 <__sflush_r+0xba>
 8006eec:	684b      	ldr	r3, [r1, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	dc02      	bgt.n	8006ef8 <__sflush_r+0x1c>
 8006ef2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	dd48      	ble.n	8006f8a <__sflush_r+0xae>
 8006ef8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006efa:	2e00      	cmp	r6, #0
 8006efc:	d045      	beq.n	8006f8a <__sflush_r+0xae>
 8006efe:	2300      	movs	r3, #0
 8006f00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f04:	682f      	ldr	r7, [r5, #0]
 8006f06:	6a21      	ldr	r1, [r4, #32]
 8006f08:	602b      	str	r3, [r5, #0]
 8006f0a:	d030      	beq.n	8006f6e <__sflush_r+0x92>
 8006f0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	0759      	lsls	r1, r3, #29
 8006f12:	d505      	bpl.n	8006f20 <__sflush_r+0x44>
 8006f14:	6863      	ldr	r3, [r4, #4]
 8006f16:	1ad2      	subs	r2, r2, r3
 8006f18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f1a:	b10b      	cbz	r3, 8006f20 <__sflush_r+0x44>
 8006f1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f1e:	1ad2      	subs	r2, r2, r3
 8006f20:	2300      	movs	r3, #0
 8006f22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f24:	6a21      	ldr	r1, [r4, #32]
 8006f26:	4628      	mov	r0, r5
 8006f28:	47b0      	blx	r6
 8006f2a:	1c43      	adds	r3, r0, #1
 8006f2c:	89a3      	ldrh	r3, [r4, #12]
 8006f2e:	d106      	bne.n	8006f3e <__sflush_r+0x62>
 8006f30:	6829      	ldr	r1, [r5, #0]
 8006f32:	291d      	cmp	r1, #29
 8006f34:	d82b      	bhi.n	8006f8e <__sflush_r+0xb2>
 8006f36:	4a2a      	ldr	r2, [pc, #168]	@ (8006fe0 <__sflush_r+0x104>)
 8006f38:	410a      	asrs	r2, r1
 8006f3a:	07d6      	lsls	r6, r2, #31
 8006f3c:	d427      	bmi.n	8006f8e <__sflush_r+0xb2>
 8006f3e:	2200      	movs	r2, #0
 8006f40:	6062      	str	r2, [r4, #4]
 8006f42:	04d9      	lsls	r1, r3, #19
 8006f44:	6922      	ldr	r2, [r4, #16]
 8006f46:	6022      	str	r2, [r4, #0]
 8006f48:	d504      	bpl.n	8006f54 <__sflush_r+0x78>
 8006f4a:	1c42      	adds	r2, r0, #1
 8006f4c:	d101      	bne.n	8006f52 <__sflush_r+0x76>
 8006f4e:	682b      	ldr	r3, [r5, #0]
 8006f50:	b903      	cbnz	r3, 8006f54 <__sflush_r+0x78>
 8006f52:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f56:	602f      	str	r7, [r5, #0]
 8006f58:	b1b9      	cbz	r1, 8006f8a <__sflush_r+0xae>
 8006f5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f5e:	4299      	cmp	r1, r3
 8006f60:	d002      	beq.n	8006f68 <__sflush_r+0x8c>
 8006f62:	4628      	mov	r0, r5
 8006f64:	f7ff fbf2 	bl	800674c <_free_r>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f6c:	e00d      	b.n	8006f8a <__sflush_r+0xae>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4628      	mov	r0, r5
 8006f72:	47b0      	blx	r6
 8006f74:	4602      	mov	r2, r0
 8006f76:	1c50      	adds	r0, r2, #1
 8006f78:	d1c9      	bne.n	8006f0e <__sflush_r+0x32>
 8006f7a:	682b      	ldr	r3, [r5, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0c6      	beq.n	8006f0e <__sflush_r+0x32>
 8006f80:	2b1d      	cmp	r3, #29
 8006f82:	d001      	beq.n	8006f88 <__sflush_r+0xac>
 8006f84:	2b16      	cmp	r3, #22
 8006f86:	d11e      	bne.n	8006fc6 <__sflush_r+0xea>
 8006f88:	602f      	str	r7, [r5, #0]
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	e022      	b.n	8006fd4 <__sflush_r+0xf8>
 8006f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f92:	b21b      	sxth	r3, r3
 8006f94:	e01b      	b.n	8006fce <__sflush_r+0xf2>
 8006f96:	690f      	ldr	r7, [r1, #16]
 8006f98:	2f00      	cmp	r7, #0
 8006f9a:	d0f6      	beq.n	8006f8a <__sflush_r+0xae>
 8006f9c:	0793      	lsls	r3, r2, #30
 8006f9e:	680e      	ldr	r6, [r1, #0]
 8006fa0:	bf08      	it	eq
 8006fa2:	694b      	ldreq	r3, [r1, #20]
 8006fa4:	600f      	str	r7, [r1, #0]
 8006fa6:	bf18      	it	ne
 8006fa8:	2300      	movne	r3, #0
 8006faa:	eba6 0807 	sub.w	r8, r6, r7
 8006fae:	608b      	str	r3, [r1, #8]
 8006fb0:	f1b8 0f00 	cmp.w	r8, #0
 8006fb4:	dde9      	ble.n	8006f8a <__sflush_r+0xae>
 8006fb6:	6a21      	ldr	r1, [r4, #32]
 8006fb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006fba:	4643      	mov	r3, r8
 8006fbc:	463a      	mov	r2, r7
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	47b0      	blx	r6
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	dc08      	bgt.n	8006fd8 <__sflush_r+0xfc>
 8006fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fce:	81a3      	strh	r3, [r4, #12]
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd8:	4407      	add	r7, r0
 8006fda:	eba8 0800 	sub.w	r8, r8, r0
 8006fde:	e7e7      	b.n	8006fb0 <__sflush_r+0xd4>
 8006fe0:	dfbffffe 	.word	0xdfbffffe

08006fe4 <_fflush_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	690b      	ldr	r3, [r1, #16]
 8006fe8:	4605      	mov	r5, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	b913      	cbnz	r3, 8006ff4 <_fflush_r+0x10>
 8006fee:	2500      	movs	r5, #0
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	b118      	cbz	r0, 8006ffe <_fflush_r+0x1a>
 8006ff6:	6a03      	ldr	r3, [r0, #32]
 8006ff8:	b90b      	cbnz	r3, 8006ffe <_fflush_r+0x1a>
 8006ffa:	f7ff fa9f 	bl	800653c <__sinit>
 8006ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0f3      	beq.n	8006fee <_fflush_r+0xa>
 8007006:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007008:	07d0      	lsls	r0, r2, #31
 800700a:	d404      	bmi.n	8007016 <_fflush_r+0x32>
 800700c:	0599      	lsls	r1, r3, #22
 800700e:	d402      	bmi.n	8007016 <_fflush_r+0x32>
 8007010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007012:	f7ff fb98 	bl	8006746 <__retarget_lock_acquire_recursive>
 8007016:	4628      	mov	r0, r5
 8007018:	4621      	mov	r1, r4
 800701a:	f7ff ff5f 	bl	8006edc <__sflush_r>
 800701e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007020:	07da      	lsls	r2, r3, #31
 8007022:	4605      	mov	r5, r0
 8007024:	d4e4      	bmi.n	8006ff0 <_fflush_r+0xc>
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	059b      	lsls	r3, r3, #22
 800702a:	d4e1      	bmi.n	8006ff0 <_fflush_r+0xc>
 800702c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800702e:	f7ff fb8b 	bl	8006748 <__retarget_lock_release_recursive>
 8007032:	e7dd      	b.n	8006ff0 <_fflush_r+0xc>

08007034 <__swbuf_r>:
 8007034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007036:	460e      	mov	r6, r1
 8007038:	4614      	mov	r4, r2
 800703a:	4605      	mov	r5, r0
 800703c:	b118      	cbz	r0, 8007046 <__swbuf_r+0x12>
 800703e:	6a03      	ldr	r3, [r0, #32]
 8007040:	b90b      	cbnz	r3, 8007046 <__swbuf_r+0x12>
 8007042:	f7ff fa7b 	bl	800653c <__sinit>
 8007046:	69a3      	ldr	r3, [r4, #24]
 8007048:	60a3      	str	r3, [r4, #8]
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	071a      	lsls	r2, r3, #28
 800704e:	d501      	bpl.n	8007054 <__swbuf_r+0x20>
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	b943      	cbnz	r3, 8007066 <__swbuf_r+0x32>
 8007054:	4621      	mov	r1, r4
 8007056:	4628      	mov	r0, r5
 8007058:	f000 f82a 	bl	80070b0 <__swsetup_r>
 800705c:	b118      	cbz	r0, 8007066 <__swbuf_r+0x32>
 800705e:	f04f 37ff 	mov.w	r7, #4294967295
 8007062:	4638      	mov	r0, r7
 8007064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	6922      	ldr	r2, [r4, #16]
 800706a:	1a98      	subs	r0, r3, r2
 800706c:	6963      	ldr	r3, [r4, #20]
 800706e:	b2f6      	uxtb	r6, r6
 8007070:	4283      	cmp	r3, r0
 8007072:	4637      	mov	r7, r6
 8007074:	dc05      	bgt.n	8007082 <__swbuf_r+0x4e>
 8007076:	4621      	mov	r1, r4
 8007078:	4628      	mov	r0, r5
 800707a:	f7ff ffb3 	bl	8006fe4 <_fflush_r>
 800707e:	2800      	cmp	r0, #0
 8007080:	d1ed      	bne.n	800705e <__swbuf_r+0x2a>
 8007082:	68a3      	ldr	r3, [r4, #8]
 8007084:	3b01      	subs	r3, #1
 8007086:	60a3      	str	r3, [r4, #8]
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	6022      	str	r2, [r4, #0]
 800708e:	701e      	strb	r6, [r3, #0]
 8007090:	6962      	ldr	r2, [r4, #20]
 8007092:	1c43      	adds	r3, r0, #1
 8007094:	429a      	cmp	r2, r3
 8007096:	d004      	beq.n	80070a2 <__swbuf_r+0x6e>
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	07db      	lsls	r3, r3, #31
 800709c:	d5e1      	bpl.n	8007062 <__swbuf_r+0x2e>
 800709e:	2e0a      	cmp	r6, #10
 80070a0:	d1df      	bne.n	8007062 <__swbuf_r+0x2e>
 80070a2:	4621      	mov	r1, r4
 80070a4:	4628      	mov	r0, r5
 80070a6:	f7ff ff9d 	bl	8006fe4 <_fflush_r>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d0d9      	beq.n	8007062 <__swbuf_r+0x2e>
 80070ae:	e7d6      	b.n	800705e <__swbuf_r+0x2a>

080070b0 <__swsetup_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4b29      	ldr	r3, [pc, #164]	@ (8007158 <__swsetup_r+0xa8>)
 80070b4:	4605      	mov	r5, r0
 80070b6:	6818      	ldr	r0, [r3, #0]
 80070b8:	460c      	mov	r4, r1
 80070ba:	b118      	cbz	r0, 80070c4 <__swsetup_r+0x14>
 80070bc:	6a03      	ldr	r3, [r0, #32]
 80070be:	b90b      	cbnz	r3, 80070c4 <__swsetup_r+0x14>
 80070c0:	f7ff fa3c 	bl	800653c <__sinit>
 80070c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070c8:	0719      	lsls	r1, r3, #28
 80070ca:	d422      	bmi.n	8007112 <__swsetup_r+0x62>
 80070cc:	06da      	lsls	r2, r3, #27
 80070ce:	d407      	bmi.n	80070e0 <__swsetup_r+0x30>
 80070d0:	2209      	movs	r2, #9
 80070d2:	602a      	str	r2, [r5, #0]
 80070d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070d8:	81a3      	strh	r3, [r4, #12]
 80070da:	f04f 30ff 	mov.w	r0, #4294967295
 80070de:	e033      	b.n	8007148 <__swsetup_r+0x98>
 80070e0:	0758      	lsls	r0, r3, #29
 80070e2:	d512      	bpl.n	800710a <__swsetup_r+0x5a>
 80070e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070e6:	b141      	cbz	r1, 80070fa <__swsetup_r+0x4a>
 80070e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070ec:	4299      	cmp	r1, r3
 80070ee:	d002      	beq.n	80070f6 <__swsetup_r+0x46>
 80070f0:	4628      	mov	r0, r5
 80070f2:	f7ff fb2b 	bl	800674c <_free_r>
 80070f6:	2300      	movs	r3, #0
 80070f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80070fa:	89a3      	ldrh	r3, [r4, #12]
 80070fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007100:	81a3      	strh	r3, [r4, #12]
 8007102:	2300      	movs	r3, #0
 8007104:	6063      	str	r3, [r4, #4]
 8007106:	6923      	ldr	r3, [r4, #16]
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	f043 0308 	orr.w	r3, r3, #8
 8007110:	81a3      	strh	r3, [r4, #12]
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	b94b      	cbnz	r3, 800712a <__swsetup_r+0x7a>
 8007116:	89a3      	ldrh	r3, [r4, #12]
 8007118:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800711c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007120:	d003      	beq.n	800712a <__swsetup_r+0x7a>
 8007122:	4621      	mov	r1, r4
 8007124:	4628      	mov	r0, r5
 8007126:	f000 f84f 	bl	80071c8 <__smakebuf_r>
 800712a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800712e:	f013 0201 	ands.w	r2, r3, #1
 8007132:	d00a      	beq.n	800714a <__swsetup_r+0x9a>
 8007134:	2200      	movs	r2, #0
 8007136:	60a2      	str	r2, [r4, #8]
 8007138:	6962      	ldr	r2, [r4, #20]
 800713a:	4252      	negs	r2, r2
 800713c:	61a2      	str	r2, [r4, #24]
 800713e:	6922      	ldr	r2, [r4, #16]
 8007140:	b942      	cbnz	r2, 8007154 <__swsetup_r+0xa4>
 8007142:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007146:	d1c5      	bne.n	80070d4 <__swsetup_r+0x24>
 8007148:	bd38      	pop	{r3, r4, r5, pc}
 800714a:	0799      	lsls	r1, r3, #30
 800714c:	bf58      	it	pl
 800714e:	6962      	ldrpl	r2, [r4, #20]
 8007150:	60a2      	str	r2, [r4, #8]
 8007152:	e7f4      	b.n	800713e <__swsetup_r+0x8e>
 8007154:	2000      	movs	r0, #0
 8007156:	e7f7      	b.n	8007148 <__swsetup_r+0x98>
 8007158:	24000038 	.word	0x24000038

0800715c <_sbrk_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4d06      	ldr	r5, [pc, #24]	@ (8007178 <_sbrk_r+0x1c>)
 8007160:	2300      	movs	r3, #0
 8007162:	4604      	mov	r4, r0
 8007164:	4608      	mov	r0, r1
 8007166:	602b      	str	r3, [r5, #0]
 8007168:	f7fa f96e 	bl	8001448 <_sbrk>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d102      	bne.n	8007176 <_sbrk_r+0x1a>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	b103      	cbz	r3, 8007176 <_sbrk_r+0x1a>
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	bd38      	pop	{r3, r4, r5, pc}
 8007178:	240003b4 	.word	0x240003b4

0800717c <__swhatbuf_r>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	460c      	mov	r4, r1
 8007180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007184:	2900      	cmp	r1, #0
 8007186:	b096      	sub	sp, #88	@ 0x58
 8007188:	4615      	mov	r5, r2
 800718a:	461e      	mov	r6, r3
 800718c:	da0d      	bge.n	80071aa <__swhatbuf_r+0x2e>
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007194:	f04f 0100 	mov.w	r1, #0
 8007198:	bf14      	ite	ne
 800719a:	2340      	movne	r3, #64	@ 0x40
 800719c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071a0:	2000      	movs	r0, #0
 80071a2:	6031      	str	r1, [r6, #0]
 80071a4:	602b      	str	r3, [r5, #0]
 80071a6:	b016      	add	sp, #88	@ 0x58
 80071a8:	bd70      	pop	{r4, r5, r6, pc}
 80071aa:	466a      	mov	r2, sp
 80071ac:	f000 f848 	bl	8007240 <_fstat_r>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	dbec      	blt.n	800718e <__swhatbuf_r+0x12>
 80071b4:	9901      	ldr	r1, [sp, #4]
 80071b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071be:	4259      	negs	r1, r3
 80071c0:	4159      	adcs	r1, r3
 80071c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071c6:	e7eb      	b.n	80071a0 <__swhatbuf_r+0x24>

080071c8 <__smakebuf_r>:
 80071c8:	898b      	ldrh	r3, [r1, #12]
 80071ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071cc:	079d      	lsls	r5, r3, #30
 80071ce:	4606      	mov	r6, r0
 80071d0:	460c      	mov	r4, r1
 80071d2:	d507      	bpl.n	80071e4 <__smakebuf_r+0x1c>
 80071d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	6123      	str	r3, [r4, #16]
 80071dc:	2301      	movs	r3, #1
 80071de:	6163      	str	r3, [r4, #20]
 80071e0:	b003      	add	sp, #12
 80071e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e4:	ab01      	add	r3, sp, #4
 80071e6:	466a      	mov	r2, sp
 80071e8:	f7ff ffc8 	bl	800717c <__swhatbuf_r>
 80071ec:	9f00      	ldr	r7, [sp, #0]
 80071ee:	4605      	mov	r5, r0
 80071f0:	4639      	mov	r1, r7
 80071f2:	4630      	mov	r0, r6
 80071f4:	f7ff fb16 	bl	8006824 <_malloc_r>
 80071f8:	b948      	cbnz	r0, 800720e <__smakebuf_r+0x46>
 80071fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071fe:	059a      	lsls	r2, r3, #22
 8007200:	d4ee      	bmi.n	80071e0 <__smakebuf_r+0x18>
 8007202:	f023 0303 	bic.w	r3, r3, #3
 8007206:	f043 0302 	orr.w	r3, r3, #2
 800720a:	81a3      	strh	r3, [r4, #12]
 800720c:	e7e2      	b.n	80071d4 <__smakebuf_r+0xc>
 800720e:	89a3      	ldrh	r3, [r4, #12]
 8007210:	6020      	str	r0, [r4, #0]
 8007212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007216:	81a3      	strh	r3, [r4, #12]
 8007218:	9b01      	ldr	r3, [sp, #4]
 800721a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800721e:	b15b      	cbz	r3, 8007238 <__smakebuf_r+0x70>
 8007220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007224:	4630      	mov	r0, r6
 8007226:	f000 f81d 	bl	8007264 <_isatty_r>
 800722a:	b128      	cbz	r0, 8007238 <__smakebuf_r+0x70>
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	f023 0303 	bic.w	r3, r3, #3
 8007232:	f043 0301 	orr.w	r3, r3, #1
 8007236:	81a3      	strh	r3, [r4, #12]
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	431d      	orrs	r5, r3
 800723c:	81a5      	strh	r5, [r4, #12]
 800723e:	e7cf      	b.n	80071e0 <__smakebuf_r+0x18>

08007240 <_fstat_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4d07      	ldr	r5, [pc, #28]	@ (8007260 <_fstat_r+0x20>)
 8007244:	2300      	movs	r3, #0
 8007246:	4604      	mov	r4, r0
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	602b      	str	r3, [r5, #0]
 800724e:	f7fa f8d3 	bl	80013f8 <_fstat>
 8007252:	1c43      	adds	r3, r0, #1
 8007254:	d102      	bne.n	800725c <_fstat_r+0x1c>
 8007256:	682b      	ldr	r3, [r5, #0]
 8007258:	b103      	cbz	r3, 800725c <_fstat_r+0x1c>
 800725a:	6023      	str	r3, [r4, #0]
 800725c:	bd38      	pop	{r3, r4, r5, pc}
 800725e:	bf00      	nop
 8007260:	240003b4 	.word	0x240003b4

08007264 <_isatty_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d06      	ldr	r5, [pc, #24]	@ (8007280 <_isatty_r+0x1c>)
 8007268:	2300      	movs	r3, #0
 800726a:	4604      	mov	r4, r0
 800726c:	4608      	mov	r0, r1
 800726e:	602b      	str	r3, [r5, #0]
 8007270:	f7fa f8d2 	bl	8001418 <_isatty>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d102      	bne.n	800727e <_isatty_r+0x1a>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	b103      	cbz	r3, 800727e <_isatty_r+0x1a>
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	240003b4 	.word	0x240003b4

08007284 <_init>:
 8007284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007286:	bf00      	nop
 8007288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800728a:	bc08      	pop	{r3}
 800728c:	469e      	mov	lr, r3
 800728e:	4770      	bx	lr

08007290 <_fini>:
 8007290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007292:	bf00      	nop
 8007294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007296:	bc08      	pop	{r3}
 8007298:	469e      	mov	lr, r3
 800729a:	4770      	bx	lr
