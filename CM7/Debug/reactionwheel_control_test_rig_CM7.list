
reactionwheel_control_test_rig_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068f0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006b90  08006b90  00007b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c14  08006c14  00008088  2**0
                  CONTENTS
  4 .ARM          00000008  08006c14  08006c14  00007c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c1c  08006c1c  00008088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c1c  08006c1c  00007c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c20  08006c20  00007c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  08006c24  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  24000088  08006cac  00008088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000390  08006cac  00008390  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ff6  00000000  00000000  000080b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002906  00000000  00000000  0001e0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  000209b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de3  00000000  00000000  00021b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bc2b  00000000  00000000  00022973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017068  00000000  00000000  0005e59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018a008  00000000  00000000  00075606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ff60e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052e0  00000000  00000000  001ff654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00204934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006b78 	.word	0x08006b78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08006b78 	.word	0x08006b78

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b49      	ldr	r3, [pc, #292]	@ (800079c <SystemInit+0x12c>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a48      	ldr	r2, [pc, #288]	@ (800079c <SystemInit+0x12c>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b45      	ldr	r3, [pc, #276]	@ (800079c <SystemInit+0x12c>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a44      	ldr	r2, [pc, #272]	@ (800079c <SystemInit+0x12c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <SystemInit+0x130>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <SystemInit+0x130>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a3e      	ldr	r2, [pc, #248]	@ (80007a0 <SystemInit+0x130>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <SystemInit+0x134>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a3c      	ldr	r2, [pc, #240]	@ (80007a4 <SystemInit+0x134>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b3a      	ldr	r3, [pc, #232]	@ (80007a4 <SystemInit+0x134>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b39      	ldr	r3, [pc, #228]	@ (80007a4 <SystemInit+0x134>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4938      	ldr	r1, [pc, #224]	@ (80007a4 <SystemInit+0x134>)
 80006c4:	4b38      	ldr	r3, [pc, #224]	@ (80007a8 <SystemInit+0x138>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b35      	ldr	r3, [pc, #212]	@ (80007a0 <SystemInit+0x130>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <SystemInit+0x130>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a30      	ldr	r2, [pc, #192]	@ (80007a0 <SystemInit+0x130>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <SystemInit+0x134>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <SystemInit+0x134>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <SystemInit+0x134>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <SystemInit+0x134>)
 80006fa:	4a2c      	ldr	r2, [pc, #176]	@ (80007ac <SystemInit+0x13c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <SystemInit+0x134>)
 8000700:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <SystemInit+0x140>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <SystemInit+0x134>)
 8000706:	4a2b      	ldr	r2, [pc, #172]	@ (80007b4 <SystemInit+0x144>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <SystemInit+0x134>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <SystemInit+0x134>)
 8000712:	4a28      	ldr	r2, [pc, #160]	@ (80007b4 <SystemInit+0x144>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <SystemInit+0x134>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <SystemInit+0x134>)
 800071e:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <SystemInit+0x144>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <SystemInit+0x134>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1d      	ldr	r2, [pc, #116]	@ (80007a4 <SystemInit+0x134>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <SystemInit+0x134>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <SystemInit+0x148>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a1e      	ldr	r2, [pc, #120]	@ (80007b8 <SystemInit+0x148>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <SystemInit+0x14c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <SystemInit+0x150>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <SystemInit+0x154>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <SystemInit+0x134>)
 800075c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d113      	bne.n	8000790 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <SystemInit+0x134>)
 800076a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800076e:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <SystemInit+0x134>)
 8000770:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000774:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <SystemInit+0x158>)
 800077a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800077e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <SystemInit+0x134>)
 8000782:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000786:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <SystemInit+0x134>)
 8000788:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800078c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	52002000 	.word	0x52002000
 80007a4:	58024400 	.word	0x58024400
 80007a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007ac:	02020200 	.word	0x02020200
 80007b0:	01ff0000 	.word	0x01ff0000
 80007b4:	01010280 	.word	0x01010280
 80007b8:	580000c0 	.word	0x580000c0
 80007bc:	5c001000 	.word	0x5c001000
 80007c0:	ffff0000 	.word	0xffff0000
 80007c4:	51008108 	.word	0x51008108
 80007c8:	52004000 	.word	0x52004000

080007cc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007d6:	f023 0302 	bic.w	r3, r3, #2
 80007da:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007dc:	bf00      	nop
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f9      	beq.n	80007de <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	58024800 	.word	0x58024800

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000806:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000808:	bf00      	nop
 800080a:	4b57      	ldr	r3, [pc, #348]	@ (8000968 <main+0x16c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000812:	2b00      	cmp	r3, #0
 8000814:	d004      	beq.n	8000820 <main+0x24>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	dcf4      	bgt.n	800080a <main+0xe>
  if ( timeout < 0 )
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	da01      	bge.n	800082a <main+0x2e>
  {
  Error_Handler();
 8000826:	f000 fb89 	bl	8000f3c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082a:	f000 fff7 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082e:	f000 f8a5 	bl	800097c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000832:	4b4d      	ldr	r3, [pc, #308]	@ (8000968 <main+0x16c>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000838:	4a4b      	ldr	r2, [pc, #300]	@ (8000968 <main+0x16c>)
 800083a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800083e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000842:	4b49      	ldr	r3, [pc, #292]	@ (8000968 <main+0x16c>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000850:	2000      	movs	r0, #0
 8000852:	f001 fc03 	bl	800205c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000856:	2100      	movs	r1, #0
 8000858:	2000      	movs	r0, #0
 800085a:	f001 fc19 	bl	8002090 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800085e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000862:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000864:	bf00      	nop
 8000866:	4b40      	ldr	r3, [pc, #256]	@ (8000968 <main+0x16c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800086e:	2b00      	cmp	r3, #0
 8000870:	d104      	bne.n	800087c <main+0x80>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	1e5a      	subs	r2, r3, #1
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	dcf4      	bgt.n	8000866 <main+0x6a>
if ( timeout < 0 )
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	da01      	bge.n	8000886 <main+0x8a>
{
Error_Handler();
 8000882:	f000 fb5b 	bl	8000f3c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f000 fa7b 	bl	8000d80 <MX_GPIO_Init>
  MX_TIM2_Init();
 800088a:	f000 f8e1 	bl	8000a50 <MX_TIM2_Init>
  MX_TIM3_Init();
 800088e:	f000 f971 	bl	8000b74 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000892:	f000 f9fd 	bl	8000c90 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000896:	2000      	movs	r0, #0
 8000898:	f000 fd94 	bl	80013c4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800089c:	2001      	movs	r0, #1
 800089e:	f000 fd91 	bl	80013c4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008a2:	2002      	movs	r0, #2
 80008a4:	f000 fd8e 	bl	80013c4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80008a8:	2101      	movs	r1, #1
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fe54 	bl	8001558 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008b0:	4b2e      	ldr	r3, [pc, #184]	@ (800096c <main+0x170>)
 80008b2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b6:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008b8:	4b2c      	ldr	r3, [pc, #176]	@ (800096c <main+0x170>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008be:	4b2b      	ldr	r3, [pc, #172]	@ (800096c <main+0x170>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80008c4:	4b29      	ldr	r3, [pc, #164]	@ (800096c <main+0x170>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80008ca:	4b28      	ldr	r3, [pc, #160]	@ (800096c <main+0x170>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80008d0:	4926      	ldr	r1, [pc, #152]	@ (800096c <main+0x170>)
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 fec4 	bl	8001660 <BSP_COM_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <main+0xe6>
  {
    Error_Handler();
 80008de:	f000 fb2d 	bl	8000f3c <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80008e2:	4823      	ldr	r0, [pc, #140]	@ (8000970 <main+0x174>)
 80008e4:	f005 fada 	bl	8005e9c <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 fde1 	bl	80014b0 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 80008ee:	2001      	movs	r0, #1
 80008f0:	f000 fdde 	bl	80014b0 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 80008f4:	2002      	movs	r0, #2
 80008f6:	f000 fddb 	bl	80014b0 <BSP_LED_On>
//
//  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK) {
//	  BSP_LED_Off(LED_GREEN);
//  }

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK) {
 80008fa:	210c      	movs	r1, #12
 80008fc:	481d      	ldr	r0, [pc, #116]	@ (8000974 <main+0x178>)
 80008fe:	f002 ff91 	bl	8003824 <HAL_TIM_PWM_Start>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d002      	beq.n	800090e <main+0x112>
	  BSP_LED_Off(LED_GREEN);
 8000908:	2000      	movs	r0, #0
 800090a:	f000 fdfb 	bl	8001504 <BSP_LED_Off>
//      BSP_LED_Toggle(LED_RED);
//
//      /* ..... Perform your action ..... */
//    }

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	2110      	movs	r1, #16
 8000912:	4819      	ldr	r0, [pc, #100]	@ (8000978 <main+0x17c>)
 8000914:	f001 fb88 	bl	8002028 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2120      	movs	r1, #32
 800091c:	4816      	ldr	r0, [pc, #88]	@ (8000978 <main+0x17c>)
 800091e:	f001 fb83 	bl	8002028 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);

	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 250);
 8000922:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <main+0x178>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	22fa      	movs	r2, #250	@ 0xfa
 8000928:	641a      	str	r2, [r3, #64]	@ 0x40
	  BSP_LED_On(LED_RED);
 800092a:	2002      	movs	r0, #2
 800092c:	f000 fdc0 	bl	80014b0 <BSP_LED_On>

	  HAL_Delay(1000);
 8000930:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000934:	f001 f804 	bl	8001940 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2110      	movs	r1, #16
 800093c:	480e      	ldr	r0, [pc, #56]	@ (8000978 <main+0x17c>)
 800093e:	f001 fb73 	bl	8002028 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000942:	2200      	movs	r2, #0
 8000944:	2120      	movs	r1, #32
 8000946:	480c      	ldr	r0, [pc, #48]	@ (8000978 <main+0x17c>)
 8000948:	f001 fb6e 	bl	8002028 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);

	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 250);
 800094c:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <main+0x178>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	22fa      	movs	r2, #250	@ 0xfa
 8000952:	641a      	str	r2, [r3, #64]	@ 0x40
	  BSP_LED_Off(LED_RED);
 8000954:	2002      	movs	r0, #2
 8000956:	f000 fdd5 	bl	8001504 <BSP_LED_Off>

	  HAL_Delay(1000);
 800095a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800095e:	f000 ffef 	bl	8001940 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000962:	bf00      	nop
 8000964:	e7d3      	b.n	800090e <main+0x112>
 8000966:	bf00      	nop
 8000968:	58024400 	.word	0x58024400
 800096c:	240000a4 	.word	0x240000a4
 8000970:	08006b90 	.word	0x08006b90
 8000974:	24000104 	.word	0x24000104
 8000978:	58020000 	.word	0x58020000

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b09c      	sub	sp, #112	@ 0x70
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000986:	224c      	movs	r2, #76	@ 0x4c
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f005 fadb 	bl	8005f46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2220      	movs	r2, #32
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f005 fad5 	bl	8005f46 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800099c:	2004      	movs	r0, #4
 800099e:	f001 fb8b 	bl	80020b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b28      	ldr	r3, [pc, #160]	@ (8000a48 <SystemClock_Config+0xcc>)
 80009a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009aa:	4a27      	ldr	r2, [pc, #156]	@ (8000a48 <SystemClock_Config+0xcc>)
 80009ac:	f023 0301 	bic.w	r3, r3, #1
 80009b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009b2:	4b25      	ldr	r3, [pc, #148]	@ (8000a48 <SystemClock_Config+0xcc>)
 80009b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	4b23      	ldr	r3, [pc, #140]	@ (8000a4c <SystemClock_Config+0xd0>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009c4:	4a21      	ldr	r2, [pc, #132]	@ (8000a4c <SystemClock_Config+0xd0>)
 80009c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a4c <SystemClock_Config+0xd0>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d8:	bf00      	nop
 80009da:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <SystemClock_Config+0xd0>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009e6:	d1f8      	bne.n	80009da <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e8:	2302      	movs	r3, #2
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f0:	2340      	movs	r3, #64	@ 0x40
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 fbb5 	bl	800216c <HAL_RCC_OscConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a08:	f000 fa98 	bl	8000f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	233f      	movs	r3, #63	@ 0x3f
 8000a0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 fff5 	bl	8002a20 <HAL_RCC_ClockConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a3c:	f000 fa7e 	bl	8000f3c <Error_Handler>
  }
}
 8000a40:	bf00      	nop
 8000a42:	3770      	adds	r7, #112	@ 0x70
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	58000400 	.word	0x58000400
 8000a4c:	58024800 	.word	0x58024800

08000a50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	@ 0x30
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a7c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b70 <MX_TIM2_Init+0x120>)
 8000a7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a84:	4b3a      	ldr	r3, [pc, #232]	@ (8000b70 <MX_TIM2_Init+0x120>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b39      	ldr	r3, [pc, #228]	@ (8000b70 <MX_TIM2_Init+0x120>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a90:	4b37      	ldr	r3, [pc, #220]	@ (8000b70 <MX_TIM2_Init+0x120>)
 8000a92:	f04f 32ff 	mov.w	r2, #4294967295
 8000a96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <MX_TIM2_Init+0x120>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9e:	4b34      	ldr	r3, [pc, #208]	@ (8000b70 <MX_TIM2_Init+0x120>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa4:	4832      	ldr	r0, [pc, #200]	@ (8000b70 <MX_TIM2_Init+0x120>)
 8000aa6:	f002 fe05 	bl	80036b4 <HAL_TIM_Base_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000ab0:	f000 fa44 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ab8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	4619      	mov	r1, r3
 8000ac0:	482b      	ldr	r0, [pc, #172]	@ (8000b70 <MX_TIM2_Init+0x120>)
 8000ac2:	f003 f9cf 	bl	8003e64 <HAL_TIM_ConfigClockSource>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000acc:	f000 fa36 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ad0:	4827      	ldr	r0, [pc, #156]	@ (8000b70 <MX_TIM2_Init+0x120>)
 8000ad2:	f002 ffb5 	bl	8003a40 <HAL_TIM_IC_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000adc:	f000 fa2e 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	4820      	ldr	r0, [pc, #128]	@ (8000b70 <MX_TIM2_Init+0x120>)
 8000af0:	f004 f814 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000afa:	f000 fa1f 	bl	8000f3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b02:	2301      	movs	r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	4619      	mov	r1, r3
 8000b14:	4816      	ldr	r0, [pc, #88]	@ (8000b70 <MX_TIM2_Init+0x120>)
 8000b16:	f002 fff4 	bl	8003b02 <HAL_TIM_IC_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000b20:	f000 fa0c 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2204      	movs	r2, #4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4811      	ldr	r0, [pc, #68]	@ (8000b70 <MX_TIM2_Init+0x120>)
 8000b2c:	f002 ffe9 	bl	8003b02 <HAL_TIM_IC_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8000b36:	f000 fa01 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <MX_TIM2_Init+0x120>)
 8000b42:	f002 ffde 	bl	8003b02 <HAL_TIM_IC_ConfigChannel>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8000b4c:	f000 f9f6 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	220c      	movs	r2, #12
 8000b54:	4619      	mov	r1, r3
 8000b56:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <MX_TIM2_Init+0x120>)
 8000b58:	f002 ffd3 	bl	8003b02 <HAL_TIM_IC_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM2_Init+0x116>
  {
    Error_Handler();
 8000b62:	f000 f9eb 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	3730      	adds	r7, #48	@ 0x30
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	240000b8 	.word	0x240000b8

08000b74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	@ 0x38
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b94:	463b      	mov	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
 8000ba2:	615a      	str	r2, [r3, #20]
 8000ba4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba6:	4b38      	ldr	r3, [pc, #224]	@ (8000c88 <MX_TIM3_Init+0x114>)
 8000ba8:	4a38      	ldr	r2, [pc, #224]	@ (8000c8c <MX_TIM3_Init+0x118>)
 8000baa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bac:	4b36      	ldr	r3, [pc, #216]	@ (8000c88 <MX_TIM3_Init+0x114>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b35      	ldr	r3, [pc, #212]	@ (8000c88 <MX_TIM3_Init+0x114>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 799;
 8000bb8:	4b33      	ldr	r3, [pc, #204]	@ (8000c88 <MX_TIM3_Init+0x114>)
 8000bba:	f240 321f 	movw	r2, #799	@ 0x31f
 8000bbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc0:	4b31      	ldr	r3, [pc, #196]	@ (8000c88 <MX_TIM3_Init+0x114>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b30      	ldr	r3, [pc, #192]	@ (8000c88 <MX_TIM3_Init+0x114>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bcc:	482e      	ldr	r0, [pc, #184]	@ (8000c88 <MX_TIM3_Init+0x114>)
 8000bce:	f002 fd71 	bl	80036b4 <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000bd8:	f000 f9b0 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000be2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000be6:	4619      	mov	r1, r3
 8000be8:	4827      	ldr	r0, [pc, #156]	@ (8000c88 <MX_TIM3_Init+0x114>)
 8000bea:	f003 f93b 	bl	8003e64 <HAL_TIM_ConfigClockSource>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000bf4:	f000 f9a2 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bf8:	4823      	ldr	r0, [pc, #140]	@ (8000c88 <MX_TIM3_Init+0x114>)
 8000bfa:	f002 fdb2 	bl	8003762 <HAL_TIM_PWM_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c04:	f000 f99a 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	481c      	ldr	r0, [pc, #112]	@ (8000c88 <MX_TIM3_Init+0x114>)
 8000c18:	f003 ff80 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c22:	f000 f98b 	bl	8000f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c26:	2360      	movs	r3, #96	@ 0x60
 8000c28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c36:	463b      	mov	r3, r7
 8000c38:	2204      	movs	r2, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4812      	ldr	r0, [pc, #72]	@ (8000c88 <MX_TIM3_Init+0x114>)
 8000c3e:	f002 fffd 	bl	8003c3c <HAL_TIM_PWM_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c48:	f000 f978 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2208      	movs	r2, #8
 8000c50:	4619      	mov	r1, r3
 8000c52:	480d      	ldr	r0, [pc, #52]	@ (8000c88 <MX_TIM3_Init+0x114>)
 8000c54:	f002 fff2 	bl	8003c3c <HAL_TIM_PWM_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000c5e:	f000 f96d 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	220c      	movs	r2, #12
 8000c66:	4619      	mov	r1, r3
 8000c68:	4807      	ldr	r0, [pc, #28]	@ (8000c88 <MX_TIM3_Init+0x114>)
 8000c6a:	f002 ffe7 	bl	8003c3c <HAL_TIM_PWM_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000c74:	f000 f962 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c78:	4803      	ldr	r0, [pc, #12]	@ (8000c88 <MX_TIM3_Init+0x114>)
 8000c7a:	f000 fa17 	bl	80010ac <HAL_TIM_MspPostInit>

}
 8000c7e:	bf00      	nop
 8000c80:	3738      	adds	r7, #56	@ 0x38
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	24000104 	.word	0x24000104
 8000c8c:	40000400 	.word	0x40000400

08000c90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	@ 0x38
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d78 <MX_TIM4_Init+0xe8>)
 8000cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8000d7c <MX_TIM4_Init+0xec>)
 8000cc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d78 <MX_TIM4_Init+0xe8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b2a      	ldr	r3, [pc, #168]	@ (8000d78 <MX_TIM4_Init+0xe8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cd4:	4b28      	ldr	r3, [pc, #160]	@ (8000d78 <MX_TIM4_Init+0xe8>)
 8000cd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <MX_TIM4_Init+0xe8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce2:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <MX_TIM4_Init+0xe8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ce8:	4823      	ldr	r0, [pc, #140]	@ (8000d78 <MX_TIM4_Init+0xe8>)
 8000cea:	f002 fce3 	bl	80036b4 <HAL_TIM_Base_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000cf4:	f000 f922 	bl	8000f3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d02:	4619      	mov	r1, r3
 8000d04:	481c      	ldr	r0, [pc, #112]	@ (8000d78 <MX_TIM4_Init+0xe8>)
 8000d06:	f003 f8ad 	bl	8003e64 <HAL_TIM_ConfigClockSource>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000d10:	f000 f914 	bl	8000f3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d14:	4818      	ldr	r0, [pc, #96]	@ (8000d78 <MX_TIM4_Init+0xe8>)
 8000d16:	f002 fd24 	bl	8003762 <HAL_TIM_PWM_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000d20:	f000 f90c 	bl	8000f3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4811      	ldr	r0, [pc, #68]	@ (8000d78 <MX_TIM4_Init+0xe8>)
 8000d34:	f003 fef2 	bl	8004b1c <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000d3e:	f000 f8fd 	bl	8000f3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d42:	2360      	movs	r3, #96	@ 0x60
 8000d44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	4619      	mov	r1, r3
 8000d58:	4807      	ldr	r0, [pc, #28]	@ (8000d78 <MX_TIM4_Init+0xe8>)
 8000d5a:	f002 ff6f 	bl	8003c3c <HAL_TIM_PWM_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000d64:	f000 f8ea 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d68:	4803      	ldr	r0, [pc, #12]	@ (8000d78 <MX_TIM4_Init+0xe8>)
 8000d6a:	f000 f99f 	bl	80010ac <HAL_TIM_MspPostInit>

}
 8000d6e:	bf00      	nop
 8000d70:	3738      	adds	r7, #56	@ 0x38
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	24000150 	.word	0x24000150
 8000d7c:	40000800 	.word	0x40000800

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4b5a      	ldr	r3, [pc, #360]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	4a58      	ldr	r2, [pc, #352]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da6:	4b56      	ldr	r3, [pc, #344]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b52      	ldr	r3, [pc, #328]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dba:	4a51      	ldr	r2, [pc, #324]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc4:	4b4e      	ldr	r3, [pc, #312]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b4b      	ldr	r3, [pc, #300]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd8:	4a49      	ldr	r2, [pc, #292]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de2:	4b47      	ldr	r3, [pc, #284]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df0:	4b43      	ldr	r3, [pc, #268]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df6:	4a42      	ldr	r2, [pc, #264]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e00:	4b3f      	ldr	r3, [pc, #252]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e0e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e14:	4a3a      	ldr	r2, [pc, #232]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1e:	4b38      	ldr	r3, [pc, #224]	@ (8000f00 <MX_GPIO_Init+0x180>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2130      	movs	r1, #48	@ 0x30
 8000e30:	4834      	ldr	r0, [pc, #208]	@ (8000f04 <MX_GPIO_Init+0x184>)
 8000e32:	f001 f8f9 	bl	8002028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e36:	2332      	movs	r3, #50	@ 0x32
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e46:	230b      	movs	r3, #11
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	482d      	ldr	r0, [pc, #180]	@ (8000f08 <MX_GPIO_Init+0x188>)
 8000e52:	f000 ff39 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e56:	2386      	movs	r3, #134	@ 0x86
 8000e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e66:	230b      	movs	r3, #11
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4824      	ldr	r0, [pc, #144]	@ (8000f04 <MX_GPIO_Init+0x184>)
 8000e72:	f000 ff29 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e76:	2330      	movs	r3, #48	@ 0x30
 8000e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	481d      	ldr	r0, [pc, #116]	@ (8000f04 <MX_GPIO_Init+0x184>)
 8000e8e:	f000 ff1b 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea4:	230b      	movs	r3, #11
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4817      	ldr	r0, [pc, #92]	@ (8000f0c <MX_GPIO_Init+0x18c>)
 8000eb0:	f000 ff0a 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000eb4:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480c      	ldr	r0, [pc, #48]	@ (8000f04 <MX_GPIO_Init+0x184>)
 8000ed2:	f000 fef9 	bl	8001cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ed6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee8:	230b      	movs	r3, #11
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <MX_GPIO_Init+0x190>)
 8000ef4:	f000 fee8 	bl	8001cc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	@ 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58020000 	.word	0x58020000
 8000f08:	58020800 	.word	0x58020800
 8000f0c:	58020400 	.word	0x58020400
 8000f10:	58021800 	.word	0x58021800

08000f14 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <BSP_PB_Callback+0x24>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	240000b4 	.word	0x240000b4

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <Error_Handler+0x8>

08000f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_MspInit+0x30>)
 8000f50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f54:	4a08      	ldr	r2, [pc, #32]	@ (8000f78 <HAL_MspInit+0x30>)
 8000f56:	f043 0302 	orr.w	r3, r3, #2
 8000f5a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_MspInit+0x30>)
 8000f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	58024400 	.word	0x58024400

08000f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08c      	sub	sp, #48	@ 0x30
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f9c:	d14e      	bne.n	800103c <HAL_TIM_Base_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 8000fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fae:	4b3a      	ldr	r3, [pc, #232]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 8000fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b36      	ldr	r3, [pc, #216]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc2:	4a35      	ldr	r2, [pc, #212]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fcc:	4b32      	ldr	r3, [pc, #200]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4b2f      	ldr	r3, [pc, #188]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fea:	4b2b      	ldr	r3, [pc, #172]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
    PA0     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000ff8:	2309      	movs	r3, #9
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001008:	2301      	movs	r3, #1
 800100a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4822      	ldr	r0, [pc, #136]	@ (800109c <HAL_TIM_Base_MspInit+0x120>)
 8001014:	f000 fe58 	bl	8001cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001018:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 800101c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800102a:	2301      	movs	r3, #1
 800102c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	481a      	ldr	r0, [pc, #104]	@ (80010a0 <HAL_TIM_Base_MspInit+0x124>)
 8001036:	f000 fe47 	bl	8001cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800103a:	e028      	b.n	800108e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a18      	ldr	r2, [pc, #96]	@ (80010a4 <HAL_TIM_Base_MspInit+0x128>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10f      	bne.n	8001066 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001046:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 8001048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800104c:	4a12      	ldr	r2, [pc, #72]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 8001058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	e013      	b.n	800108e <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <HAL_TIM_Base_MspInit+0x12c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d10e      	bne.n	800108e <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001070:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 8001072:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001076:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001080:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <HAL_TIM_Base_MspInit+0x11c>)
 8001082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
}
 800108e:	bf00      	nop
 8001090:	3730      	adds	r7, #48	@ 0x30
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	58024400 	.word	0x58024400
 800109c:	58020000 	.word	0x58020000
 80010a0:	58020400 	.word	0x58020400
 80010a4:	40000400 	.word	0x40000400
 80010a8:	40000800 	.word	0x40000800

080010ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a35      	ldr	r2, [pc, #212]	@ (80011a0 <HAL_TIM_MspPostInit+0xf4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d13f      	bne.n	800114e <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	4b35      	ldr	r3, [pc, #212]	@ (80011a4 <HAL_TIM_MspPostInit+0xf8>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d4:	4a33      	ldr	r2, [pc, #204]	@ (80011a4 <HAL_TIM_MspPostInit+0xf8>)
 80010d6:	f043 0302 	orr.w	r3, r3, #2
 80010da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010de:	4b31      	ldr	r3, [pc, #196]	@ (80011a4 <HAL_TIM_MspPostInit+0xf8>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <HAL_TIM_MspPostInit+0xf8>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f2:	4a2c      	ldr	r2, [pc, #176]	@ (80011a4 <HAL_TIM_MspPostInit+0xf8>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010fc:	4b29      	ldr	r3, [pc, #164]	@ (80011a4 <HAL_TIM_MspPostInit+0xf8>)
 80010fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800110a:	2302      	movs	r3, #2
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800111a:	2302      	movs	r3, #2
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4820      	ldr	r0, [pc, #128]	@ (80011a8 <HAL_TIM_MspPostInit+0xfc>)
 8001126:	f000 fdcf 	bl	8001cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800112a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800113c:	2302      	movs	r3, #2
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4819      	ldr	r0, [pc, #100]	@ (80011ac <HAL_TIM_MspPostInit+0x100>)
 8001148:	f000 fdbe 	bl	8001cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800114c:	e024      	b.n	8001198 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM4)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a17      	ldr	r2, [pc, #92]	@ (80011b0 <HAL_TIM_MspPostInit+0x104>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d11f      	bne.n	8001198 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <HAL_TIM_MspPostInit+0xf8>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115e:	4a11      	ldr	r2, [pc, #68]	@ (80011a4 <HAL_TIM_MspPostInit+0xf8>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001168:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <HAL_TIM_MspPostInit+0xf8>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001176:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001188:	2302      	movs	r3, #2
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	4808      	ldr	r0, [pc, #32]	@ (80011b4 <HAL_TIM_MspPostInit+0x108>)
 8001194:	f000 fd98 	bl	8001cc8 <HAL_GPIO_Init>
}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	@ 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40000400 	.word	0x40000400
 80011a4:	58024400 	.word	0x58024400
 80011a8:	58020400 	.word	0x58020400
 80011ac:	58020800 	.word	0x58020800
 80011b0:	40000800 	.word	0x40000800
 80011b4:	58020c00 	.word	0x58020c00

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <NMI_Handler+0x4>

080011c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <MemManage_Handler+0x4>

080011d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <UsageFault_Handler+0x4>

080011e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120e:	f000 fb77 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}

08001216 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800121a:	2000      	movs	r0, #0
 800121c:	f000 fa0e 	bl	800163c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	e00a      	b.n	800124c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001236:	f3af 8000 	nop.w
 800123a:	4601      	mov	r1, r0
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	60ba      	str	r2, [r7, #8]
 8001242:	b2ca      	uxtb	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	dbf0      	blt.n	8001236 <_read+0x12>
  }

  return len;
 8001254:	687b      	ldr	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	e009      	b.n	8001284 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	60ba      	str	r2, [r7, #8]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fa53 	bl	8001724 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	dbf1      	blt.n	8001270 <_write+0x12>
  }
  return len;
 800128c:	687b      	ldr	r3, [r7, #4]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_close>:

int _close(int file)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012be:	605a      	str	r2, [r3, #4]
  return 0;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <_isatty>:

int _isatty(int file)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001308:	4a14      	ldr	r2, [pc, #80]	@ (800135c <_sbrk+0x5c>)
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <_sbrk+0x60>)
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <_sbrk+0x64>)
 800131e:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <_sbrk+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001330:	f004 fe58 	bl	8005fe4 <__errno>
 8001334:	4603      	mov	r3, r0
 8001336:	220c      	movs	r2, #12
 8001338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	e009      	b.n	8001354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001346:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <_sbrk+0x64>)
 8001350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	24080000 	.word	0x24080000
 8001360:	00000400 	.word	0x00000400
 8001364:	2400019c 	.word	0x2400019c
 8001368:	24000390 	.word	0x24000390

0800136c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800136c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80013a8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001370:	f7ff fa2c 	bl	80007cc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001374:	f7ff f97c 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800137a:	490d      	ldr	r1, [pc, #52]	@ (80013b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800137c:	4a0d      	ldr	r2, [pc, #52]	@ (80013b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001390:	4c0a      	ldr	r4, [pc, #40]	@ (80013bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139e:	f004 fe27 	bl	8005ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a2:	f7ff fa2b 	bl	80007fc <main>
  bx  lr
 80013a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013b0:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80013b4:	08006c24 	.word	0x08006c24
  ldr r2, =_sbss
 80013b8:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80013bc:	24000390 	.word	0x24000390

080013c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC3_IRQHandler>
	...

080013c4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08c      	sub	sp, #48	@ 0x30
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d009      	beq.n	80013ec <BSP_LED_Init+0x28>
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d006      	beq.n	80013ec <BSP_LED_Init+0x28>
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d003      	beq.n	80013ec <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013e4:	f06f 0301 	mvn.w	r3, #1
 80013e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013ea:	e055      	b.n	8001498 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10f      	bne.n	8001412 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80013f2:	4b2c      	ldr	r3, [pc, #176]	@ (80014a4 <BSP_LED_Init+0xe0>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f8:	4a2a      	ldr	r2, [pc, #168]	@ (80014a4 <BSP_LED_Init+0xe0>)
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001402:	4b28      	ldr	r3, [pc, #160]	@ (80014a4 <BSP_LED_Init+0xe0>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	e021      	b.n	8001456 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d10f      	bne.n	8001438 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001418:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <BSP_LED_Init+0xe0>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141e:	4a21      	ldr	r2, [pc, #132]	@ (80014a4 <BSP_LED_Init+0xe0>)
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001428:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <BSP_LED_Init+0xe0>)
 800142a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	e00e      	b.n	8001456 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <BSP_LED_Init+0xe0>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143e:	4a19      	ldr	r2, [pc, #100]	@ (80014a4 <BSP_LED_Init+0xe0>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001448:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <BSP_LED_Init+0xe0>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	4a13      	ldr	r2, [pc, #76]	@ (80014a8 <BSP_LED_Init+0xe4>)
 800145a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800145e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	4a0f      	ldr	r2, [pc, #60]	@ (80014ac <BSP_LED_Init+0xe8>)
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	f107 0218 	add.w	r2, r7, #24
 8001478:	4611      	mov	r1, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fc24 	bl	8001cc8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <BSP_LED_Init+0xe8>)
 8001484:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	4a07      	ldr	r2, [pc, #28]	@ (80014a8 <BSP_LED_Init+0xe4>)
 800148c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001490:	2200      	movs	r2, #0
 8001492:	4619      	mov	r1, r3
 8001494:	f000 fdc8 	bl	8002028 <HAL_GPIO_WritePin>
  }

  return ret;
 8001498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800149a:	4618      	mov	r0, r3
 800149c:	3730      	adds	r7, #48	@ 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	58024400 	.word	0x58024400
 80014a8:	08006bbc 	.word	0x08006bbc
 80014ac:	2400000c 	.word	0x2400000c

080014b0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d009      	beq.n	80014d8 <BSP_LED_On+0x28>
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d006      	beq.n	80014d8 <BSP_LED_On+0x28>
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d003      	beq.n	80014d8 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014d0:	f06f 0301 	mvn.w	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	e00b      	b.n	80014f0 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	4a08      	ldr	r2, [pc, #32]	@ (80014fc <BSP_LED_On+0x4c>)
 80014dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	4a07      	ldr	r2, [pc, #28]	@ (8001500 <BSP_LED_On+0x50>)
 80014e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014e8:	2201      	movs	r2, #1
 80014ea:	4619      	mov	r1, r3
 80014ec:	f000 fd9c 	bl	8002028 <HAL_GPIO_WritePin>
  }

  return ret;
 80014f0:	68fb      	ldr	r3, [r7, #12]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2400000c 	.word	0x2400000c
 8001500:	08006bbc 	.word	0x08006bbc

08001504 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d009      	beq.n	800152c <BSP_LED_Off+0x28>
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d006      	beq.n	800152c <BSP_LED_Off+0x28>
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d003      	beq.n	800152c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001524:	f06f 0301 	mvn.w	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	e00b      	b.n	8001544 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4a08      	ldr	r2, [pc, #32]	@ (8001550 <BSP_LED_Off+0x4c>)
 8001530:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	4a07      	ldr	r2, [pc, #28]	@ (8001554 <BSP_LED_Off+0x50>)
 8001538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800153c:	2200      	movs	r2, #0
 800153e:	4619      	mov	r1, r3
 8001540:	f000 fd72 	bl	8002028 <HAL_GPIO_WritePin>
  }

  return ret;
 8001544:	68fb      	ldr	r3, [r7, #12]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2400000c 	.word	0x2400000c
 8001554:	08006bbc 	.word	0x08006bbc

08001558 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	460a      	mov	r2, r1
 8001562:	71fb      	strb	r3, [r7, #7]
 8001564:	4613      	mov	r3, r2
 8001566:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001568:	4b2e      	ldr	r3, [pc, #184]	@ (8001624 <BSP_PB_Init+0xcc>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156e:	4a2d      	ldr	r2, [pc, #180]	@ (8001624 <BSP_PB_Init+0xcc>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001578:	4b2a      	ldr	r3, [pc, #168]	@ (8001624 <BSP_PB_Init+0xcc>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001586:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800158a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800158c:	2302      	movs	r3, #2
 800158e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001594:	79bb      	ldrb	r3, [r7, #6]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10c      	bne.n	80015b4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4a21      	ldr	r2, [pc, #132]	@ (8001628 <BSP_PB_Init+0xd0>)
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	f107 020c 	add.w	r2, r7, #12
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 fb8b 	bl	8001cc8 <HAL_GPIO_Init>
 80015b2:	e031      	b.n	8001618 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80015b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015b8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001628 <BSP_PB_Init+0xd0>)
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	f107 020c 	add.w	r2, r7, #12
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 fb7d 	bl	8001cc8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4a16      	ldr	r2, [pc, #88]	@ (800162c <BSP_PB_Init+0xd4>)
 80015d4:	441a      	add	r2, r3
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4915      	ldr	r1, [pc, #84]	@ (8001630 <BSP_PB_Init+0xd8>)
 80015da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015de:	4619      	mov	r1, r3
 80015e0:	4610      	mov	r0, r2
 80015e2:	f000 fb20 	bl	8001c26 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4a10      	ldr	r2, [pc, #64]	@ (800162c <BSP_PB_Init+0xd4>)
 80015ec:	1898      	adds	r0, r3, r2
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4a10      	ldr	r2, [pc, #64]	@ (8001634 <BSP_PB_Init+0xdc>)
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	461a      	mov	r2, r3
 80015f8:	2100      	movs	r1, #0
 80015fa:	f000 faf5 	bl	8001be8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80015fe:	2028      	movs	r0, #40	@ 0x28
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <BSP_PB_Init+0xe0>)
 8001604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001608:	2200      	movs	r2, #0
 800160a:	4619      	mov	r1, r3
 800160c:	f000 faa3 	bl	8001b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001610:	2328      	movs	r3, #40	@ 0x28
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fab9 	bl	8001b8a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	58024400 	.word	0x58024400
 8001628:	24000018 	.word	0x24000018
 800162c:	240001a0 	.word	0x240001a0
 8001630:	08006bc4 	.word	0x08006bc4
 8001634:	2400001c 	.word	0x2400001c
 8001638:	24000020 	.word	0x24000020

0800163c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4a04      	ldr	r2, [pc, #16]	@ (800165c <BSP_PB_IRQHandler+0x20>)
 800164c:	4413      	add	r3, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fafe 	bl	8001c50 <HAL_EXTI_IRQHandler>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	240001a0 	.word	0x240001a0

08001660 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001676:	f06f 0301 	mvn.w	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e018      	b.n	80016b0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	2294      	movs	r2, #148	@ 0x94
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <BSP_COM_Init+0x5c>)
 8001688:	4413      	add	r3, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f86e 	bl	800176c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	2294      	movs	r2, #148	@ 0x94
 8001694:	fb02 f303 	mul.w	r3, r2, r3
 8001698:	4a08      	ldr	r2, [pc, #32]	@ (80016bc <BSP_COM_Init+0x5c>)
 800169a:	4413      	add	r3, r2
 800169c:	6839      	ldr	r1, [r7, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f80e 	bl	80016c0 <MX_USART3_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80016aa:	f06f 0303 	mvn.w	r3, #3
 80016ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80016b0:	68fb      	ldr	r3, [r7, #12]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	240001a8 	.word	0x240001a8

080016c0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <MX_USART3_Init+0x60>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	220c      	movs	r2, #12
 80016de:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	895b      	ldrh	r3, [r3, #10]
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	891b      	ldrh	r3, [r3, #8]
 80016f6:	461a      	mov	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	899b      	ldrh	r3, [r3, #12]
 8001700:	461a      	mov	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800170c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f003 fa92 	bl	8004c38 <HAL_UART_Init>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	24000008 	.word	0x24000008

08001724 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800172c:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <__io_putchar+0x30>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	2394      	movs	r3, #148	@ 0x94
 8001734:	fb02 f303 	mul.w	r3, r2, r3
 8001738:	4a07      	ldr	r2, [pc, #28]	@ (8001758 <__io_putchar+0x34>)
 800173a:	1898      	adds	r0, r3, r2
 800173c:	1d39      	adds	r1, r7, #4
 800173e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001742:	2201      	movs	r2, #1
 8001744:	f003 fad2 	bl	8004cec <HAL_UART_Transmit>
  return ch;
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2400023c 	.word	0x2400023c
 8001758:	240001a8 	.word	0x240001a8

0800175c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001760:	2000      	movs	r0, #0
 8001762:	f7ff fbd7 	bl	8000f14 <BSP_PB_Callback>
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	@ 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001774:	4b27      	ldr	r3, [pc, #156]	@ (8001814 <COM1_MspInit+0xa8>)
 8001776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177a:	4a26      	ldr	r2, [pc, #152]	@ (8001814 <COM1_MspInit+0xa8>)
 800177c:	f043 0308 	orr.w	r3, r3, #8
 8001780:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001784:	4b23      	ldr	r3, [pc, #140]	@ (8001814 <COM1_MspInit+0xa8>)
 8001786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001792:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <COM1_MspInit+0xa8>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001798:	4a1e      	ldr	r2, [pc, #120]	@ (8001814 <COM1_MspInit+0xa8>)
 800179a:	f043 0308 	orr.w	r3, r3, #8
 800179e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <COM1_MspInit+0xa8>)
 80017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80017b0:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <COM1_MspInit+0xa8>)
 80017b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017b6:	4a17      	ldr	r2, [pc, #92]	@ (8001814 <COM1_MspInit+0xa8>)
 80017b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017c0:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <COM1_MspInit+0xa8>)
 80017c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80017ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017d2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d8:	2302      	movs	r3, #2
 80017da:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80017dc:	2301      	movs	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80017e0:	2307      	movs	r3, #7
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	4619      	mov	r1, r3
 80017ea:	480b      	ldr	r0, [pc, #44]	@ (8001818 <COM1_MspInit+0xac>)
 80017ec:	f000 fa6c 	bl	8001cc8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80017f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017f4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80017fa:	2307      	movs	r3, #7
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4804      	ldr	r0, [pc, #16]	@ (8001818 <COM1_MspInit+0xac>)
 8001806:	f000 fa5f 	bl	8001cc8 <HAL_GPIO_Init>
}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	@ 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	58024400 	.word	0x58024400
 8001818:	58020c00 	.word	0x58020c00

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001822:	2003      	movs	r0, #3
 8001824:	f000 f98c 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001828:	f001 fab0 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 800182c:	4602      	mov	r2, r0
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <HAL_Init+0x68>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	0a1b      	lsrs	r3, r3, #8
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	4913      	ldr	r1, [pc, #76]	@ (8001888 <HAL_Init+0x6c>)
 800183a:	5ccb      	ldrb	r3, [r1, r3]
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
 8001844:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001846:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <HAL_Init+0x68>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	4a0e      	ldr	r2, [pc, #56]	@ (8001888 <HAL_Init+0x6c>)
 8001850:	5cd3      	ldrb	r3, [r2, r3]
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
 800185c:	4a0b      	ldr	r2, [pc, #44]	@ (800188c <HAL_Init+0x70>)
 800185e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001860:	4a0b      	ldr	r2, [pc, #44]	@ (8001890 <HAL_Init+0x74>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001866:	2000      	movs	r0, #0
 8001868:	f000 f814 	bl	8001894 <HAL_InitTick>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e002      	b.n	800187c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001876:	f7ff fb67 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	58024400 	.word	0x58024400
 8001888:	08006bac 	.word	0x08006bac
 800188c:	24000004 	.word	0x24000004
 8001890:	24000000 	.word	0x24000000

08001894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800189c:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <HAL_InitTick+0x60>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e021      	b.n	80018ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <HAL_InitTick+0x64>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <HAL_InitTick+0x60>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 f971 	bl	8001ba6 <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f000 f93b 	bl	8001b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	@ (80018fc <HAL_InitTick+0x68>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	24000028 	.word	0x24000028
 80018f8:	24000000 	.word	0x24000000
 80018fc:	24000024 	.word	0x24000024

08001900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	24000028 	.word	0x24000028
 8001924:	24000240 	.word	0x24000240

08001928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return uwTick;
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	24000240 	.word	0x24000240

08001940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff ffee 	bl	8001928 <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800195a:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001966:	bf00      	nop
 8001968:	f7ff ffde 	bl	8001928 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
  {
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	24000028 	.word	0x24000028

08001988 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800198c:	4b03      	ldr	r3, [pc, #12]	@ (800199c <HAL_GetREVID+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0c1b      	lsrs	r3, r3, #16
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	5c001000 	.word	0x5c001000

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <__NVIC_SetPriorityGrouping+0x40>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ce:	4a04      	ldr	r2, [pc, #16]	@ (80019e0 <__NVIC_SetPriorityGrouping+0x40>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60d3      	str	r3, [r2, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00
 80019e4:	05fa0000 	.word	0x05fa0000

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	@ (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db0b      	blt.n	8001a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	4907      	ldr	r1, [pc, #28]	@ (8001a3c <__NVIC_EnableIRQ+0x38>)
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2001      	movs	r0, #1
 8001a26:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100

08001a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	@ (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	@ (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	@ 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1c3 0307 	rsb	r3, r3, #7
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	bf28      	it	cs
 8001ab2:	2304      	movcs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d902      	bls.n	8001ac4 <NVIC_EncodePriority+0x30>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3b03      	subs	r3, #3
 8001ac2:	e000      	b.n	8001ac6 <NVIC_EncodePriority+0x32>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	4313      	orrs	r3, r2
         );
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3724      	adds	r7, #36	@ 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b0c:	d301      	bcc.n	8001b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <SysTick_Config+0x40>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f7ff ff8e 	bl	8001a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <SysTick_Config+0x40>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2a:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <SysTick_Config+0x40>)
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	e000e010 	.word	0xe000e010

08001b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff29 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b64:	f7ff ff40 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	6978      	ldr	r0, [r7, #20]
 8001b70:	f7ff ff90 	bl	8001a94 <NVIC_EncodePriority>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff5f 	bl	8001a40 <__NVIC_SetPriority>
}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff33 	bl	8001a04 <__NVIC_EnableIRQ>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ffa4 	bl	8001afc <SysTick_Config>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001bc4:	4b07      	ldr	r3, [pc, #28]	@ (8001be4 <HAL_GetCurrentCPUID+0x24>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	2b07      	cmp	r3, #7
 8001bd0:	d101      	bne.n	8001bd6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e000      	b.n	8001bd8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001bd6:	2301      	movs	r3, #1
  }
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e00a      	b.n	8001c1a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001c04:	7afb      	ldrb	r3, [r7, #11]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d103      	bne.n	8001c12 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	605a      	str	r2, [r3, #4]
      break;
 8001c10:	e002      	b.n	8001c18 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
      break;
 8001c16:	bf00      	nop
  }

  return status;
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e003      	b.n	8001c42 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001c40:	2300      	movs	r3, #0
  }
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0c1b      	lsrs	r3, r3, #16
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001c74:	f7ff ffa4 	bl	8001bc0 <HAL_GetCurrentCPUID>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	d105      	bne.n	8001c8a <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	011a      	lsls	r2, r3, #4
 8001c82:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <HAL_EXTI_IRQHandler+0x70>)
 8001c84:	4413      	add	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	e004      	b.n	8001c94 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	011a      	lsls	r2, r3, #4
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <HAL_EXTI_IRQHandler+0x74>)
 8001c90:	4413      	add	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d009      	beq.n	8001cb8 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4798      	blx	r3
    }
  }
}
 8001cb8:	bf00      	nop
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	58000088 	.word	0x58000088
 8001cc4:	580000c8 	.word	0x580000c8

08001cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	@ 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001cd6:	4b89      	ldr	r3, [pc, #548]	@ (8001efc <HAL_GPIO_Init+0x234>)
 8001cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cda:	e194      	b.n	8002006 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8186 	beq.w	8002000 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d005      	beq.n	8001d0c <HAL_GPIO_Init+0x44>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d130      	bne.n	8001d6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d42:	2201      	movs	r2, #1
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	f003 0201 	and.w	r2, r3, #1
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b03      	cmp	r3, #3
 8001d78:	d017      	beq.n	8001daa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	2203      	movs	r2, #3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d123      	bne.n	8001dfe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	08da      	lsrs	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3208      	adds	r2, #8
 8001dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	220f      	movs	r2, #15
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	691a      	ldr	r2, [r3, #16]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	08da      	lsrs	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3208      	adds	r2, #8
 8001df8:	69b9      	ldr	r1, [r7, #24]
 8001dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	2203      	movs	r2, #3
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0203 	and.w	r2, r3, #3
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80e0 	beq.w	8002000 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e40:	4b2f      	ldr	r3, [pc, #188]	@ (8001f00 <HAL_GPIO_Init+0x238>)
 8001e42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e46:	4a2e      	ldr	r2, [pc, #184]	@ (8001f00 <HAL_GPIO_Init+0x238>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e50:	4b2b      	ldr	r3, [pc, #172]	@ (8001f00 <HAL_GPIO_Init+0x238>)
 8001e52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5e:	4a29      	ldr	r2, [pc, #164]	@ (8001f04 <HAL_GPIO_Init+0x23c>)
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3302      	adds	r3, #2
 8001e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	220f      	movs	r2, #15
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a20      	ldr	r2, [pc, #128]	@ (8001f08 <HAL_GPIO_Init+0x240>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d052      	beq.n	8001f30 <HAL_GPIO_Init+0x268>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f0c <HAL_GPIO_Init+0x244>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d031      	beq.n	8001ef6 <HAL_GPIO_Init+0x22e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a1e      	ldr	r2, [pc, #120]	@ (8001f10 <HAL_GPIO_Init+0x248>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d02b      	beq.n	8001ef2 <HAL_GPIO_Init+0x22a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f14 <HAL_GPIO_Init+0x24c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d025      	beq.n	8001eee <HAL_GPIO_Init+0x226>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f18 <HAL_GPIO_Init+0x250>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d01f      	beq.n	8001eea <HAL_GPIO_Init+0x222>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a1b      	ldr	r2, [pc, #108]	@ (8001f1c <HAL_GPIO_Init+0x254>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d019      	beq.n	8001ee6 <HAL_GPIO_Init+0x21e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001f20 <HAL_GPIO_Init+0x258>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_GPIO_Init+0x21a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a19      	ldr	r2, [pc, #100]	@ (8001f24 <HAL_GPIO_Init+0x25c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00d      	beq.n	8001ede <HAL_GPIO_Init+0x216>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a18      	ldr	r2, [pc, #96]	@ (8001f28 <HAL_GPIO_Init+0x260>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d007      	beq.n	8001eda <HAL_GPIO_Init+0x212>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a17      	ldr	r2, [pc, #92]	@ (8001f2c <HAL_GPIO_Init+0x264>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_GPIO_Init+0x20e>
 8001ed2:	2309      	movs	r3, #9
 8001ed4:	e02d      	b.n	8001f32 <HAL_GPIO_Init+0x26a>
 8001ed6:	230a      	movs	r3, #10
 8001ed8:	e02b      	b.n	8001f32 <HAL_GPIO_Init+0x26a>
 8001eda:	2308      	movs	r3, #8
 8001edc:	e029      	b.n	8001f32 <HAL_GPIO_Init+0x26a>
 8001ede:	2307      	movs	r3, #7
 8001ee0:	e027      	b.n	8001f32 <HAL_GPIO_Init+0x26a>
 8001ee2:	2306      	movs	r3, #6
 8001ee4:	e025      	b.n	8001f32 <HAL_GPIO_Init+0x26a>
 8001ee6:	2305      	movs	r3, #5
 8001ee8:	e023      	b.n	8001f32 <HAL_GPIO_Init+0x26a>
 8001eea:	2304      	movs	r3, #4
 8001eec:	e021      	b.n	8001f32 <HAL_GPIO_Init+0x26a>
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e01f      	b.n	8001f32 <HAL_GPIO_Init+0x26a>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e01d      	b.n	8001f32 <HAL_GPIO_Init+0x26a>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e01b      	b.n	8001f32 <HAL_GPIO_Init+0x26a>
 8001efa:	bf00      	nop
 8001efc:	58000080 	.word	0x58000080
 8001f00:	58024400 	.word	0x58024400
 8001f04:	58000400 	.word	0x58000400
 8001f08:	58020000 	.word	0x58020000
 8001f0c:	58020400 	.word	0x58020400
 8001f10:	58020800 	.word	0x58020800
 8001f14:	58020c00 	.word	0x58020c00
 8001f18:	58021000 	.word	0x58021000
 8001f1c:	58021400 	.word	0x58021400
 8001f20:	58021800 	.word	0x58021800
 8001f24:	58021c00 	.word	0x58021c00
 8001f28:	58022000 	.word	0x58022000
 8001f2c:	58022400 	.word	0x58022400
 8001f30:	2300      	movs	r3, #0
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	f002 0203 	and.w	r2, r2, #3
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f42:	4938      	ldr	r1, [pc, #224]	@ (8002024 <HAL_GPIO_Init+0x35c>)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	3301      	adds	r3, #1
 8002004:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	f47f ae63 	bne.w	8001cdc <HAL_GPIO_Init+0x14>
  }
}
 8002016:	bf00      	nop
 8002018:	bf00      	nop
 800201a:	3724      	adds	r7, #36	@ 0x24
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	58000400 	.word	0x58000400

08002028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	807b      	strh	r3, [r7, #2]
 8002034:	4613      	mov	r3, r2
 8002036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002044:	e003      	b.n	800204e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	041a      	lsls	r2, r3, #16
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	619a      	str	r2, [r3, #24]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002064:	4a08      	ldr	r2, [pc, #32]	@ (8002088 <HAL_HSEM_FastTake+0x2c>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3320      	adds	r3, #32
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	4a07      	ldr	r2, [pc, #28]	@ (800208c <HAL_HSEM_FastTake+0x30>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	e000      	b.n	800207a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	58026400 	.word	0x58026400
 800208c:	80000300 	.word	0x80000300

08002090 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800209a:	4906      	ldr	r1, [pc, #24]	@ (80020b4 <HAL_HSEM_Release+0x24>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	58026400 	.word	0x58026400

080020b8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80020c0:	4b29      	ldr	r3, [pc, #164]	@ (8002168 <HAL_PWREx_ConfigSupply+0xb0>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	2b06      	cmp	r3, #6
 80020ca:	d00a      	beq.n	80020e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020cc:	4b26      	ldr	r3, [pc, #152]	@ (8002168 <HAL_PWREx_ConfigSupply+0xb0>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e040      	b.n	8002160 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e03e      	b.n	8002160 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020e2:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <HAL_PWREx_ConfigSupply+0xb0>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80020ea:	491f      	ldr	r1, [pc, #124]	@ (8002168 <HAL_PWREx_ConfigSupply+0xb0>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020f2:	f7ff fc19 	bl	8001928 <HAL_GetTick>
 80020f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020f8:	e009      	b.n	800210e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020fa:	f7ff fc15 	bl	8001928 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002108:	d901      	bls.n	800210e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e028      	b.n	8002160 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800210e:	4b16      	ldr	r3, [pc, #88]	@ (8002168 <HAL_PWREx_ConfigSupply+0xb0>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800211a:	d1ee      	bne.n	80020fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b1e      	cmp	r3, #30
 8002120:	d008      	beq.n	8002134 <HAL_PWREx_ConfigSupply+0x7c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b2e      	cmp	r3, #46	@ 0x2e
 8002126:	d005      	beq.n	8002134 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b1d      	cmp	r3, #29
 800212c:	d002      	beq.n	8002134 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b2d      	cmp	r3, #45	@ 0x2d
 8002132:	d114      	bne.n	800215e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002134:	f7ff fbf8 	bl	8001928 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800213a:	e009      	b.n	8002150 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800213c:	f7ff fbf4 	bl	8001928 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800214a:	d901      	bls.n	8002150 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e007      	b.n	8002160 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <HAL_PWREx_ConfigSupply+0xb0>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800215c:	d1ee      	bne.n	800213c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	58024800 	.word	0x58024800

0800216c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	@ 0x30
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	f000 bc48 	b.w	8002a10 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 8088 	beq.w	800229e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800218e:	4b99      	ldr	r3, [pc, #612]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002196:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002198:	4b96      	ldr	r3, [pc, #600]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 800219a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800219e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a0:	2b10      	cmp	r3, #16
 80021a2:	d007      	beq.n	80021b4 <HAL_RCC_OscConfig+0x48>
 80021a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a6:	2b18      	cmp	r3, #24
 80021a8:	d111      	bne.n	80021ce <HAL_RCC_OscConfig+0x62>
 80021aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d10c      	bne.n	80021ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	4b8f      	ldr	r3, [pc, #572]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d06d      	beq.n	800229c <HAL_RCC_OscConfig+0x130>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d169      	bne.n	800229c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	f000 bc21 	b.w	8002a10 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x7a>
 80021d8:	4b86      	ldr	r3, [pc, #536]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a85      	ldr	r2, [pc, #532]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80021de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e02e      	b.n	8002244 <HAL_RCC_OscConfig+0xd8>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x9c>
 80021ee:	4b81      	ldr	r3, [pc, #516]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a80      	ldr	r2, [pc, #512]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80021f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b7e      	ldr	r3, [pc, #504]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a7d      	ldr	r2, [pc, #500]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 8002200:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e01d      	b.n	8002244 <HAL_RCC_OscConfig+0xd8>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002210:	d10c      	bne.n	800222c <HAL_RCC_OscConfig+0xc0>
 8002212:	4b78      	ldr	r3, [pc, #480]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a77      	ldr	r2, [pc, #476]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 8002218:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b75      	ldr	r3, [pc, #468]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a74      	ldr	r2, [pc, #464]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e00b      	b.n	8002244 <HAL_RCC_OscConfig+0xd8>
 800222c:	4b71      	ldr	r3, [pc, #452]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a70      	ldr	r2, [pc, #448]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 8002232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b6e      	ldr	r3, [pc, #440]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a6d      	ldr	r2, [pc, #436]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 800223e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d013      	beq.n	8002274 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7ff fb6c 	bl	8001928 <HAL_GetTick>
 8002250:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002254:	f7ff fb68 	bl	8001928 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	@ 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e3d4      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002266:	4b63      	ldr	r3, [pc, #396]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0xe8>
 8002272:	e014      	b.n	800229e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff fb58 	bl	8001928 <HAL_GetTick>
 8002278:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff fb54 	bl	8001928 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	@ 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e3c0      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800228e:	4b59      	ldr	r3, [pc, #356]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x110>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80ca 	beq.w	8002440 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ac:	4b51      	ldr	r3, [pc, #324]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022b6:	4b4f      	ldr	r3, [pc, #316]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80022b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d007      	beq.n	80022d2 <HAL_RCC_OscConfig+0x166>
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	2b18      	cmp	r3, #24
 80022c6:	d156      	bne.n	8002376 <HAL_RCC_OscConfig+0x20a>
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d151      	bne.n	8002376 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d2:	4b48      	ldr	r3, [pc, #288]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_RCC_OscConfig+0x17e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e392      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022ea:	4b42      	ldr	r3, [pc, #264]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 0219 	bic.w	r2, r3, #25
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	493f      	ldr	r1, [pc, #252]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7ff fb14 	bl	8001928 <HAL_GetTick>
 8002300:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002304:	f7ff fb10 	bl	8001928 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e37c      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002316:	4b37      	ldr	r3, [pc, #220]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002322:	f7ff fb31 	bl	8001988 <HAL_GetREVID>
 8002326:	4603      	mov	r3, r0
 8002328:	f241 0203 	movw	r2, #4099	@ 0x1003
 800232c:	4293      	cmp	r3, r2
 800232e:	d817      	bhi.n	8002360 <HAL_RCC_OscConfig+0x1f4>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b40      	cmp	r3, #64	@ 0x40
 8002336:	d108      	bne.n	800234a <HAL_RCC_OscConfig+0x1de>
 8002338:	4b2e      	ldr	r3, [pc, #184]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002340:	4a2c      	ldr	r2, [pc, #176]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 8002342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002346:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002348:	e07a      	b.n	8002440 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234a:	4b2a      	ldr	r3, [pc, #168]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	031b      	lsls	r3, r3, #12
 8002358:	4926      	ldr	r1, [pc, #152]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800235e:	e06f      	b.n	8002440 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002360:	4b24      	ldr	r3, [pc, #144]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	061b      	lsls	r3, r3, #24
 800236e:	4921      	ldr	r1, [pc, #132]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002374:	e064      	b.n	8002440 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d047      	beq.n	800240e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800237e:	4b1d      	ldr	r3, [pc, #116]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0219 	bic.w	r2, r3, #25
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	491a      	ldr	r1, [pc, #104]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff faca 	bl	8001928 <HAL_GetTick>
 8002394:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002398:	f7ff fac6 	bl	8001928 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e332      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023aa:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b6:	f7ff fae7 	bl	8001988 <HAL_GetREVID>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d819      	bhi.n	80023f8 <HAL_RCC_OscConfig+0x28c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2b40      	cmp	r3, #64	@ 0x40
 80023ca:	d108      	bne.n	80023de <HAL_RCC_OscConfig+0x272>
 80023cc:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80023d4:	4a07      	ldr	r2, [pc, #28]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80023d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023da:	6053      	str	r3, [r2, #4]
 80023dc:	e030      	b.n	8002440 <HAL_RCC_OscConfig+0x2d4>
 80023de:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	031b      	lsls	r3, r3, #12
 80023ec:	4901      	ldr	r1, [pc, #4]	@ (80023f4 <HAL_RCC_OscConfig+0x288>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]
 80023f2:	e025      	b.n	8002440 <HAL_RCC_OscConfig+0x2d4>
 80023f4:	58024400 	.word	0x58024400
 80023f8:	4b9a      	ldr	r3, [pc, #616]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	061b      	lsls	r3, r3, #24
 8002406:	4997      	ldr	r1, [pc, #604]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
 800240c:	e018      	b.n	8002440 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240e:	4b95      	ldr	r3, [pc, #596]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a94      	ldr	r2, [pc, #592]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7ff fa85 	bl	8001928 <HAL_GetTick>
 800241e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7ff fa81 	bl	8001928 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e2ed      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002434:	4b8b      	ldr	r3, [pc, #556]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a9 	beq.w	80025a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244e:	4b85      	ldr	r3, [pc, #532]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002456:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002458:	4b82      	ldr	r3, [pc, #520]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 800245a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b08      	cmp	r3, #8
 8002462:	d007      	beq.n	8002474 <HAL_RCC_OscConfig+0x308>
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2b18      	cmp	r3, #24
 8002468:	d13a      	bne.n	80024e0 <HAL_RCC_OscConfig+0x374>
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d135      	bne.n	80024e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002474:	4b7b      	ldr	r3, [pc, #492]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_OscConfig+0x320>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2b80      	cmp	r3, #128	@ 0x80
 8002486:	d001      	beq.n	800248c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e2c1      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800248c:	f7ff fa7c 	bl	8001988 <HAL_GetREVID>
 8002490:	4603      	mov	r3, r0
 8002492:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002496:	4293      	cmp	r3, r2
 8002498:	d817      	bhi.n	80024ca <HAL_RCC_OscConfig+0x35e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d108      	bne.n	80024b4 <HAL_RCC_OscConfig+0x348>
 80024a2:	4b70      	ldr	r3, [pc, #448]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80024aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 80024ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024b2:	e075      	b.n	80025a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	069b      	lsls	r3, r3, #26
 80024c2:	4968      	ldr	r1, [pc, #416]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024c8:	e06a      	b.n	80025a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024ca:	4b66      	ldr	r3, [pc, #408]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	061b      	lsls	r3, r3, #24
 80024d8:	4962      	ldr	r1, [pc, #392]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024de:	e05f      	b.n	80025a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d042      	beq.n	800256e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 80024ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7ff fa18 	bl	8001928 <HAL_GetTick>
 80024f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024fc:	f7ff fa14 	bl	8001928 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e280      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800250e:	4b55      	ldr	r3, [pc, #340]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800251a:	f7ff fa35 	bl	8001988 <HAL_GetREVID>
 800251e:	4603      	mov	r3, r0
 8002520:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002524:	4293      	cmp	r3, r2
 8002526:	d817      	bhi.n	8002558 <HAL_RCC_OscConfig+0x3ec>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	2b20      	cmp	r3, #32
 800252e:	d108      	bne.n	8002542 <HAL_RCC_OscConfig+0x3d6>
 8002530:	4b4c      	ldr	r3, [pc, #304]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002538:	4a4a      	ldr	r2, [pc, #296]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 800253a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800253e:	6053      	str	r3, [r2, #4]
 8002540:	e02e      	b.n	80025a0 <HAL_RCC_OscConfig+0x434>
 8002542:	4b48      	ldr	r3, [pc, #288]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	069b      	lsls	r3, r3, #26
 8002550:	4944      	ldr	r1, [pc, #272]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
 8002556:	e023      	b.n	80025a0 <HAL_RCC_OscConfig+0x434>
 8002558:	4b42      	ldr	r3, [pc, #264]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	061b      	lsls	r3, r3, #24
 8002566:	493f      	ldr	r1, [pc, #252]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002568:	4313      	orrs	r3, r2
 800256a:	60cb      	str	r3, [r1, #12]
 800256c:	e018      	b.n	80025a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800256e:	4b3d      	ldr	r3, [pc, #244]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a3c      	ldr	r2, [pc, #240]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002574:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257a:	f7ff f9d5 	bl	8001928 <HAL_GetTick>
 800257e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002582:	f7ff f9d1 	bl	8001928 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e23d      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002594:	4b33      	ldr	r3, [pc, #204]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f0      	bne.n	8002582 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d036      	beq.n	800261a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d019      	beq.n	80025e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 80025b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7ff f9b2 	bl	8001928 <HAL_GetTick>
 80025c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c8:	f7ff f9ae 	bl	8001928 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e21a      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025da:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x45c>
 80025e6:	e018      	b.n	800261a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 80025ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 80025ee:	f023 0301 	bic.w	r3, r3, #1
 80025f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7ff f998 	bl	8001928 <HAL_GetTick>
 80025f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fc:	f7ff f994 	bl	8001928 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e200      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0320 	and.w	r3, r3, #32
 8002622:	2b00      	cmp	r3, #0
 8002624:	d039      	beq.n	800269a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01c      	beq.n	8002668 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a0c      	ldr	r2, [pc, #48]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002634:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002638:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800263a:	f7ff f975 	bl	8001928 <HAL_GetTick>
 800263e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002642:	f7ff f971 	bl	8001928 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e1dd      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002654:	4b03      	ldr	r3, [pc, #12]	@ (8002664 <HAL_RCC_OscConfig+0x4f8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x4d6>
 8002660:	e01b      	b.n	800269a <HAL_RCC_OscConfig+0x52e>
 8002662:	bf00      	nop
 8002664:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002668:	4b9b      	ldr	r3, [pc, #620]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a9a      	ldr	r2, [pc, #616]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 800266e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002672:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002674:	f7ff f958 	bl	8001928 <HAL_GetTick>
 8002678:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800267c:	f7ff f954 	bl	8001928 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e1c0      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800268e:	4b92      	ldr	r3, [pc, #584]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8081 	beq.w	80027aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026a8:	4b8c      	ldr	r3, [pc, #560]	@ (80028dc <HAL_RCC_OscConfig+0x770>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a8b      	ldr	r2, [pc, #556]	@ (80028dc <HAL_RCC_OscConfig+0x770>)
 80026ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026b4:	f7ff f938 	bl	8001928 <HAL_GetTick>
 80026b8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026bc:	f7ff f934 	bl	8001928 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1a0      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ce:	4b83      	ldr	r3, [pc, #524]	@ (80028dc <HAL_RCC_OscConfig+0x770>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d106      	bne.n	80026f0 <HAL_RCC_OscConfig+0x584>
 80026e2:	4b7d      	ldr	r3, [pc, #500]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e6:	4a7c      	ldr	r2, [pc, #496]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ee:	e02d      	b.n	800274c <HAL_RCC_OscConfig+0x5e0>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10c      	bne.n	8002712 <HAL_RCC_OscConfig+0x5a6>
 80026f8:	4b77      	ldr	r3, [pc, #476]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fc:	4a76      	ldr	r2, [pc, #472]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80026fe:	f023 0301 	bic.w	r3, r3, #1
 8002702:	6713      	str	r3, [r2, #112]	@ 0x70
 8002704:	4b74      	ldr	r3, [pc, #464]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002708:	4a73      	ldr	r2, [pc, #460]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 800270a:	f023 0304 	bic.w	r3, r3, #4
 800270e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002710:	e01c      	b.n	800274c <HAL_RCC_OscConfig+0x5e0>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b05      	cmp	r3, #5
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x5c8>
 800271a:	4b6f      	ldr	r3, [pc, #444]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271e:	4a6e      	ldr	r2, [pc, #440]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	6713      	str	r3, [r2, #112]	@ 0x70
 8002726:	4b6c      	ldr	r3, [pc, #432]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272a:	4a6b      	ldr	r2, [pc, #428]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	@ 0x70
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0x5e0>
 8002734:	4b68      	ldr	r3, [pc, #416]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002738:	4a67      	ldr	r2, [pc, #412]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002740:	4b65      	ldr	r3, [pc, #404]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002744:	4a64      	ldr	r2, [pc, #400]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002746:	f023 0304 	bic.w	r3, r3, #4
 800274a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d015      	beq.n	8002780 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7ff f8e8 	bl	8001928 <HAL_GetTick>
 8002758:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7ff f8e4 	bl	8001928 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e14e      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002772:	4b59      	ldr	r3, [pc, #356]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0ee      	beq.n	800275c <HAL_RCC_OscConfig+0x5f0>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7ff f8d2 	bl	8001928 <HAL_GetTick>
 8002784:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002786:	e00a      	b.n	800279e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7ff f8ce 	bl	8001928 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e138      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800279e:	4b4e      	ldr	r3, [pc, #312]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ee      	bne.n	8002788 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 812d 	beq.w	8002a0e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027b4:	4b48      	ldr	r3, [pc, #288]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027bc:	2b18      	cmp	r3, #24
 80027be:	f000 80bd 	beq.w	800293c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	f040 809e 	bne.w	8002908 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027cc:	4b42      	ldr	r3, [pc, #264]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a41      	ldr	r2, [pc, #260]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80027d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7ff f8a6 	bl	8001928 <HAL_GetTick>
 80027dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7ff f8a2 	bl	8001928 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e10e      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027f2:	4b39      	ldr	r3, [pc, #228]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027fe:	4b36      	ldr	r3, [pc, #216]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002800:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002802:	4b37      	ldr	r3, [pc, #220]	@ (80028e0 <HAL_RCC_OscConfig+0x774>)
 8002804:	4013      	ands	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	430a      	orrs	r2, r1
 8002812:	4931      	ldr	r1, [pc, #196]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002814:	4313      	orrs	r3, r2
 8002816:	628b      	str	r3, [r1, #40]	@ 0x28
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281c:	3b01      	subs	r3, #1
 800281e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002826:	3b01      	subs	r3, #1
 8002828:	025b      	lsls	r3, r3, #9
 800282a:	b29b      	uxth	r3, r3
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002832:	3b01      	subs	r3, #1
 8002834:	041b      	lsls	r3, r3, #16
 8002836:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002840:	3b01      	subs	r3, #1
 8002842:	061b      	lsls	r3, r3, #24
 8002844:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002848:	4923      	ldr	r1, [pc, #140]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 800284a:	4313      	orrs	r3, r2
 800284c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800284e:	4b22      	ldr	r3, [pc, #136]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002852:	4a21      	ldr	r2, [pc, #132]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002854:	f023 0301 	bic.w	r3, r3, #1
 8002858:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800285a:	4b1f      	ldr	r3, [pc, #124]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 800285c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800285e:	4b21      	ldr	r3, [pc, #132]	@ (80028e4 <HAL_RCC_OscConfig+0x778>)
 8002860:	4013      	ands	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002866:	00d2      	lsls	r2, r2, #3
 8002868:	491b      	ldr	r1, [pc, #108]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 800286a:	4313      	orrs	r3, r2
 800286c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800286e:	4b1a      	ldr	r3, [pc, #104]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	f023 020c 	bic.w	r2, r3, #12
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	4917      	ldr	r1, [pc, #92]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 800287c:	4313      	orrs	r3, r2
 800287e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002880:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002884:	f023 0202 	bic.w	r2, r3, #2
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	4912      	ldr	r1, [pc, #72]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 800288e:	4313      	orrs	r3, r2
 8002890:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002892:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	4a10      	ldr	r2, [pc, #64]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800289c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800289e:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80028a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a2:	4a0d      	ldr	r2, [pc, #52]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80028a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028aa:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80028ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ae:	4a0a      	ldr	r2, [pc, #40]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80028b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80028b6:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80028b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ba:	4a07      	ldr	r2, [pc, #28]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c2:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a04      	ldr	r2, [pc, #16]	@ (80028d8 <HAL_RCC_OscConfig+0x76c>)
 80028c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7ff f82b 	bl	8001928 <HAL_GetTick>
 80028d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028d4:	e011      	b.n	80028fa <HAL_RCC_OscConfig+0x78e>
 80028d6:	bf00      	nop
 80028d8:	58024400 	.word	0x58024400
 80028dc:	58024800 	.word	0x58024800
 80028e0:	fffffc0c 	.word	0xfffffc0c
 80028e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7ff f81e 	bl	8001928 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e08a      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028fa:	4b47      	ldr	r3, [pc, #284]	@ (8002a18 <HAL_RCC_OscConfig+0x8ac>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x77c>
 8002906:	e082      	b.n	8002a0e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002908:	4b43      	ldr	r3, [pc, #268]	@ (8002a18 <HAL_RCC_OscConfig+0x8ac>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a42      	ldr	r2, [pc, #264]	@ (8002a18 <HAL_RCC_OscConfig+0x8ac>)
 800290e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7ff f808 	bl	8001928 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7ff f804 	bl	8001928 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e070      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800292e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a18 <HAL_RCC_OscConfig+0x8ac>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x7b0>
 800293a:	e068      	b.n	8002a0e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800293c:	4b36      	ldr	r3, [pc, #216]	@ (8002a18 <HAL_RCC_OscConfig+0x8ac>)
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002942:	4b35      	ldr	r3, [pc, #212]	@ (8002a18 <HAL_RCC_OscConfig+0x8ac>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294c:	2b01      	cmp	r3, #1
 800294e:	d031      	beq.n	80029b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f003 0203 	and.w	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d12a      	bne.n	80029b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d122      	bne.n	80029b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d11a      	bne.n	80029b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	0a5b      	lsrs	r3, r3, #9
 8002982:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800298a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d111      	bne.n	80029b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	0c1b      	lsrs	r3, r3, #16
 8002994:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800299c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d108      	bne.n	80029b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	0e1b      	lsrs	r3, r3, #24
 80029a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e02b      	b.n	8002a10 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80029b8:	4b17      	ldr	r3, [pc, #92]	@ (8002a18 <HAL_RCC_OscConfig+0x8ac>)
 80029ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029bc:	08db      	lsrs	r3, r3, #3
 80029be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d01f      	beq.n	8002a0e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80029ce:	4b12      	ldr	r3, [pc, #72]	@ (8002a18 <HAL_RCC_OscConfig+0x8ac>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d2:	4a11      	ldr	r2, [pc, #68]	@ (8002a18 <HAL_RCC_OscConfig+0x8ac>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029da:	f7fe ffa5 	bl	8001928 <HAL_GetTick>
 80029de:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80029e0:	bf00      	nop
 80029e2:	f7fe ffa1 	bl	8001928 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d0f9      	beq.n	80029e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <HAL_RCC_OscConfig+0x8ac>)
 80029f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029f2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <HAL_RCC_OscConfig+0x8b0>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029fa:	00d2      	lsls	r2, r2, #3
 80029fc:	4906      	ldr	r1, [pc, #24]	@ (8002a18 <HAL_RCC_OscConfig+0x8ac>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a02:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <HAL_RCC_OscConfig+0x8ac>)
 8002a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a06:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <HAL_RCC_OscConfig+0x8ac>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3730      	adds	r7, #48	@ 0x30
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	58024400 	.word	0x58024400
 8002a1c:	ffff0007 	.word	0xffff0007

08002a20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e19c      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a34:	4b8a      	ldr	r3, [pc, #552]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 030f 	and.w	r3, r3, #15
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d910      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b87      	ldr	r3, [pc, #540]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 020f 	bic.w	r2, r3, #15
 8002a4a:	4985      	ldr	r1, [pc, #532]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b83      	ldr	r3, [pc, #524]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e184      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d010      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	4b7b      	ldr	r3, [pc, #492]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d908      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a80:	4b78      	ldr	r3, [pc, #480]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	4975      	ldr	r1, [pc, #468]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d010      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	4b70      	ldr	r3, [pc, #448]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d908      	bls.n	8002ac0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002aae:	4b6d      	ldr	r3, [pc, #436]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	496a      	ldr	r1, [pc, #424]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d010      	beq.n	8002aee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699a      	ldr	r2, [r3, #24]
 8002ad0:	4b64      	ldr	r3, [pc, #400]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d908      	bls.n	8002aee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002adc:	4b61      	ldr	r3, [pc, #388]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	495e      	ldr	r1, [pc, #376]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d010      	beq.n	8002b1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69da      	ldr	r2, [r3, #28]
 8002afe:	4b59      	ldr	r3, [pc, #356]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d908      	bls.n	8002b1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b0a:	4b56      	ldr	r3, [pc, #344]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4953      	ldr	r1, [pc, #332]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d010      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d908      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b38:	4b4a      	ldr	r3, [pc, #296]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f023 020f 	bic.w	r2, r3, #15
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4947      	ldr	r1, [pc, #284]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d055      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b56:	4b43      	ldr	r3, [pc, #268]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	4940      	ldr	r1, [pc, #256]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d107      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b70:	4b3c      	ldr	r3, [pc, #240]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d121      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0f6      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d107      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b88:	4b36      	ldr	r3, [pc, #216]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d115      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0ea      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ba0:	4b30      	ldr	r3, [pc, #192]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d109      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0de      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0d6      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bc0:	4b28      	ldr	r3, [pc, #160]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f023 0207 	bic.w	r2, r3, #7
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	4925      	ldr	r1, [pc, #148]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd2:	f7fe fea9 	bl	8001928 <HAL_GetTick>
 8002bd6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bda:	f7fe fea5 	bl	8001928 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e0be      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d1eb      	bne.n	8002bda <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	4b14      	ldr	r3, [pc, #80]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d208      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1e:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	f023 020f 	bic.w	r2, r3, #15
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	490e      	ldr	r1, [pc, #56]	@ (8002c64 <HAL_RCC_ClockConfig+0x244>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d214      	bcs.n	8002c68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 020f 	bic.w	r2, r3, #15
 8002c46:	4906      	ldr	r1, [pc, #24]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <HAL_RCC_ClockConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e086      	b.n	8002d6e <HAL_RCC_ClockConfig+0x34e>
 8002c60:	52002000 	.word	0x52002000
 8002c64:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d010      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	4b3f      	ldr	r3, [pc, #252]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d208      	bcs.n	8002c96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c84:	4b3c      	ldr	r3, [pc, #240]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	4939      	ldr	r1, [pc, #228]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d010      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	4b34      	ldr	r3, [pc, #208]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d208      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cb2:	4b31      	ldr	r3, [pc, #196]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	492e      	ldr	r1, [pc, #184]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d010      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699a      	ldr	r2, [r3, #24]
 8002cd4:	4b28      	ldr	r3, [pc, #160]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d208      	bcs.n	8002cf2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ce0:	4b25      	ldr	r3, [pc, #148]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	4922      	ldr	r1, [pc, #136]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d010      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	4b1d      	ldr	r3, [pc, #116]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d208      	bcs.n	8002d20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	4917      	ldr	r1, [pc, #92]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d20:	f000 f834 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 8002d24:	4602      	mov	r2, r0
 8002d26:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	4912      	ldr	r1, [pc, #72]	@ (8002d7c <HAL_RCC_ClockConfig+0x35c>)
 8002d32:	5ccb      	ldrb	r3, [r1, r3]
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <HAL_RCC_ClockConfig+0x358>)
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	4a0d      	ldr	r2, [pc, #52]	@ (8002d7c <HAL_RCC_ClockConfig+0x35c>)
 8002d48:	5cd3      	ldrb	r3, [r2, r3]
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
 8002d54:	4a0a      	ldr	r2, [pc, #40]	@ (8002d80 <HAL_RCC_ClockConfig+0x360>)
 8002d56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d58:	4a0a      	ldr	r2, [pc, #40]	@ (8002d84 <HAL_RCC_ClockConfig+0x364>)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <HAL_RCC_ClockConfig+0x368>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fd96 	bl	8001894 <HAL_InitTick>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	58024400 	.word	0x58024400
 8002d7c:	08006bac 	.word	0x08006bac
 8002d80:	24000004 	.word	0x24000004
 8002d84:	24000000 	.word	0x24000000
 8002d88:	24000024 	.word	0x24000024

08002d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b089      	sub	sp, #36	@ 0x24
 8002d90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d92:	4bb3      	ldr	r3, [pc, #716]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d9a:	2b18      	cmp	r3, #24
 8002d9c:	f200 8155 	bhi.w	800304a <HAL_RCC_GetSysClockFreq+0x2be>
 8002da0:	a201      	add	r2, pc, #4	@ (adr r2, 8002da8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da6:	bf00      	nop
 8002da8:	08002e0d 	.word	0x08002e0d
 8002dac:	0800304b 	.word	0x0800304b
 8002db0:	0800304b 	.word	0x0800304b
 8002db4:	0800304b 	.word	0x0800304b
 8002db8:	0800304b 	.word	0x0800304b
 8002dbc:	0800304b 	.word	0x0800304b
 8002dc0:	0800304b 	.word	0x0800304b
 8002dc4:	0800304b 	.word	0x0800304b
 8002dc8:	08002e33 	.word	0x08002e33
 8002dcc:	0800304b 	.word	0x0800304b
 8002dd0:	0800304b 	.word	0x0800304b
 8002dd4:	0800304b 	.word	0x0800304b
 8002dd8:	0800304b 	.word	0x0800304b
 8002ddc:	0800304b 	.word	0x0800304b
 8002de0:	0800304b 	.word	0x0800304b
 8002de4:	0800304b 	.word	0x0800304b
 8002de8:	08002e39 	.word	0x08002e39
 8002dec:	0800304b 	.word	0x0800304b
 8002df0:	0800304b 	.word	0x0800304b
 8002df4:	0800304b 	.word	0x0800304b
 8002df8:	0800304b 	.word	0x0800304b
 8002dfc:	0800304b 	.word	0x0800304b
 8002e00:	0800304b 	.word	0x0800304b
 8002e04:	0800304b 	.word	0x0800304b
 8002e08:	08002e3f 	.word	0x08002e3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e0c:	4b94      	ldr	r3, [pc, #592]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d009      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e18:	4b91      	ldr	r3, [pc, #580]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	08db      	lsrs	r3, r3, #3
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	4a90      	ldr	r2, [pc, #576]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002e2a:	e111      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e2c:	4b8d      	ldr	r3, [pc, #564]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e2e:	61bb      	str	r3, [r7, #24]
      break;
 8002e30:	e10e      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002e32:	4b8d      	ldr	r3, [pc, #564]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e34:	61bb      	str	r3, [r7, #24]
      break;
 8002e36:	e10b      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e38:	4b8c      	ldr	r3, [pc, #560]	@ (800306c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e3a:	61bb      	str	r3, [r7, #24]
      break;
 8002e3c:	e108      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e3e:	4b88      	ldr	r3, [pc, #544]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e48:	4b85      	ldr	r3, [pc, #532]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e52:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e54:	4b82      	ldr	r3, [pc, #520]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e5e:	4b80      	ldr	r3, [pc, #512]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e62:	08db      	lsrs	r3, r3, #3
 8002e64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	ee07 3a90 	vmov	s15, r3
 8002e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e76:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80e1 	beq.w	8003044 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	f000 8083 	beq.w	8002f90 <HAL_RCC_GetSysClockFreq+0x204>
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	f200 80a1 	bhi.w	8002fd4 <HAL_RCC_GetSysClockFreq+0x248>
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x114>
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d056      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e9e:	e099      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d02d      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002eac:	4b6c      	ldr	r3, [pc, #432]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	08db      	lsrs	r3, r3, #3
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	4a6b      	ldr	r2, [pc, #428]	@ (8003064 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	ee07 3a90 	vmov	s15, r3
 8002ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ed6:	4b62      	ldr	r3, [pc, #392]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ede:	ee07 3a90 	vmov	s15, r3
 8002ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f02:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f06:	e087      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f12:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003074 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f1a:	4b51      	ldr	r3, [pc, #324]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f2e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f4a:	e065      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f56:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003078 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f5e:	4b40      	ldr	r3, [pc, #256]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f72:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f8e:	e043      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800307c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa2:	4b2f      	ldr	r3, [pc, #188]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002faa:	ee07 3a90 	vmov	s15, r3
 8002fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fb6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fd2:	e021      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003078 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003070 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800300a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800300e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003012:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003016:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003018:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301c:	0a5b      	lsrs	r3, r3, #9
 800301e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003022:	3301      	adds	r3, #1
 8003024:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	ee07 3a90 	vmov	s15, r3
 800302c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003030:	edd7 6a07 	vldr	s13, [r7, #28]
 8003034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800303c:	ee17 3a90 	vmov	r3, s15
 8003040:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003042:	e005      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	61bb      	str	r3, [r7, #24]
      break;
 8003048:	e002      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800304a:	4b07      	ldr	r3, [pc, #28]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800304c:	61bb      	str	r3, [r7, #24]
      break;
 800304e:	bf00      	nop
  }

  return sysclockfreq;
 8003050:	69bb      	ldr	r3, [r7, #24]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3724      	adds	r7, #36	@ 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	58024400 	.word	0x58024400
 8003064:	03d09000 	.word	0x03d09000
 8003068:	003d0900 	.word	0x003d0900
 800306c:	017d7840 	.word	0x017d7840
 8003070:	46000000 	.word	0x46000000
 8003074:	4c742400 	.word	0x4c742400
 8003078:	4a742400 	.word	0x4a742400
 800307c:	4bbebc20 	.word	0x4bbebc20

08003080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003086:	f7ff fe81 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 800308a:	4602      	mov	r2, r0
 800308c:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	490f      	ldr	r1, [pc, #60]	@ (80030d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003098:	5ccb      	ldrb	r3, [r1, r3]
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	fa22 f303 	lsr.w	r3, r2, r3
 80030a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030a4:	4b0a      	ldr	r3, [pc, #40]	@ (80030d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	4a09      	ldr	r2, [pc, #36]	@ (80030d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ba:	4a07      	ldr	r2, [pc, #28]	@ (80030d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80030bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030be:	4a07      	ldr	r2, [pc, #28]	@ (80030dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80030c4:	4b04      	ldr	r3, [pc, #16]	@ (80030d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	58024400 	.word	0x58024400
 80030d4:	08006bac 	.word	0x08006bac
 80030d8:	24000004 	.word	0x24000004
 80030dc:	24000000 	.word	0x24000000

080030e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80030e4:	f7ff ffcc 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4904      	ldr	r1, [pc, #16]	@ (8003108 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	58024400 	.word	0x58024400
 8003108:	08006bac 	.word	0x08006bac

0800310c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003110:	f7ff ffb6 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	0a1b      	lsrs	r3, r3, #8
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	4904      	ldr	r1, [pc, #16]	@ (8003134 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	58024400 	.word	0x58024400
 8003134:	08006bac 	.word	0x08006bac

08003138 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800313c:	f7ff ffa0 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4904      	ldr	r1, [pc, #16]	@ (8003160 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	58024400 	.word	0x58024400
 8003160:	08006bac 	.word	0x08006bac

08003164 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	@ 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800316c:	4ba1      	ldr	r3, [pc, #644]	@ (80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800316e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003176:	4b9f      	ldr	r3, [pc, #636]	@ (80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317a:	0b1b      	lsrs	r3, r3, #12
 800317c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003180:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003182:	4b9c      	ldr	r3, [pc, #624]	@ (80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800318e:	4b99      	ldr	r3, [pc, #612]	@ (80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003192:	08db      	lsrs	r3, r3, #3
 8003194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8111 	beq.w	80033d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	f000 8083 	beq.w	80032c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	f200 80a1 	bhi.w	8003304 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d056      	beq.n	800327c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80031ce:	e099      	b.n	8003304 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031d0:	4b88      	ldr	r3, [pc, #544]	@ (80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d02d      	beq.n	8003238 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031dc:	4b85      	ldr	r3, [pc, #532]	@ (80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	08db      	lsrs	r3, r3, #3
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	4a84      	ldr	r2, [pc, #528]	@ (80033f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	ee07 3a90 	vmov	s15, r3
 80031f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003206:	4b7b      	ldr	r3, [pc, #492]	@ (80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320e:	ee07 3a90 	vmov	s15, r3
 8003212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003216:	ed97 6a03 	vldr	s12, [r7, #12]
 800321a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800321e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800322a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800322e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003232:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003236:	e087      	b.n	8003348 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	ee07 3a90 	vmov	s15, r3
 800323e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003242:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003400 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800324a:	4b6a      	ldr	r3, [pc, #424]	@ (80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800324c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800325a:	ed97 6a03 	vldr	s12, [r7, #12]
 800325e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800326a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800326e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800327a:	e065      	b.n	8003348 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003286:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800328a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800328e:	4b59      	ldr	r3, [pc, #356]	@ (80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800329e:	ed97 6a03 	vldr	s12, [r7, #12]
 80032a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80032a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032be:	e043      	b.n	8003348 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	ee07 3a90 	vmov	s15, r3
 80032c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003408 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80032ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032d2:	4b48      	ldr	r3, [pc, #288]	@ (80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80032e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80032ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003302:	e021      	b.n	8003348 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	ee07 3a90 	vmov	s15, r3
 800330a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003316:	4b37      	ldr	r3, [pc, #220]	@ (80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003326:	ed97 6a03 	vldr	s12, [r7, #12]
 800332a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80033fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800332e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800333a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800333e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003346:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003348:	4b2a      	ldr	r3, [pc, #168]	@ (80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	0a5b      	lsrs	r3, r3, #9
 800334e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800335e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003362:	edd7 6a07 	vldr	s13, [r7, #28]
 8003366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800336a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800336e:	ee17 2a90 	vmov	r2, s15
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003376:	4b1f      	ldr	r3, [pc, #124]	@ (80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337a:	0c1b      	lsrs	r3, r3, #16
 800337c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003380:	ee07 3a90 	vmov	s15, r3
 8003384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003388:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800338c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003390:	edd7 6a07 	vldr	s13, [r7, #28]
 8003394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800339c:	ee17 2a90 	vmov	r2, s15
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80033a4:	4b13      	ldr	r3, [pc, #76]	@ (80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a8:	0e1b      	lsrs	r3, r3, #24
 80033aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80033ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80033be:	edd7 6a07 	vldr	s13, [r7, #28]
 80033c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ca:	ee17 2a90 	vmov	r2, s15
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80033d2:	e008      	b.n	80033e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	609a      	str	r2, [r3, #8]
}
 80033e6:	bf00      	nop
 80033e8:	3724      	adds	r7, #36	@ 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	58024400 	.word	0x58024400
 80033f8:	03d09000 	.word	0x03d09000
 80033fc:	46000000 	.word	0x46000000
 8003400:	4c742400 	.word	0x4c742400
 8003404:	4a742400 	.word	0x4a742400
 8003408:	4bbebc20 	.word	0x4bbebc20

0800340c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	@ 0x24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003414:	4ba1      	ldr	r3, [pc, #644]	@ (800369c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800341e:	4b9f      	ldr	r3, [pc, #636]	@ (800369c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003422:	0d1b      	lsrs	r3, r3, #20
 8003424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003428:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800342a:	4b9c      	ldr	r3, [pc, #624]	@ (800369c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003436:	4b99      	ldr	r3, [pc, #612]	@ (800369c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343a:	08db      	lsrs	r3, r3, #3
 800343c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8111 	beq.w	800367c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b02      	cmp	r3, #2
 800345e:	f000 8083 	beq.w	8003568 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b02      	cmp	r3, #2
 8003466:	f200 80a1 	bhi.w	80035ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d056      	beq.n	8003524 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003476:	e099      	b.n	80035ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003478:	4b88      	ldr	r3, [pc, #544]	@ (800369c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d02d      	beq.n	80034e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003484:	4b85      	ldr	r3, [pc, #532]	@ (800369c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	08db      	lsrs	r3, r3, #3
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	4a84      	ldr	r2, [pc, #528]	@ (80036a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
 8003494:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	ee07 3a90 	vmov	s15, r3
 800349c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ae:	4b7b      	ldr	r3, [pc, #492]	@ (800369c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034be:	ed97 6a03 	vldr	s12, [r7, #12]
 80034c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80034c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80034de:	e087      	b.n	80035f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80036a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80034ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f2:	4b6a      	ldr	r3, [pc, #424]	@ (800369c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003502:	ed97 6a03 	vldr	s12, [r7, #12]
 8003506:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800350a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800350e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800351a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003522:	e065      	b.n	80035f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80036ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003536:	4b59      	ldr	r3, [pc, #356]	@ (800369c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353e:	ee07 3a90 	vmov	s15, r3
 8003542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003546:	ed97 6a03 	vldr	s12, [r7, #12]
 800354a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800354e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800355a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800355e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003566:	e043      	b.n	80035f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003572:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80036b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357a:	4b48      	ldr	r3, [pc, #288]	@ (800369c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800358a:	ed97 6a03 	vldr	s12, [r7, #12]
 800358e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800359a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800359e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035aa:	e021      	b.n	80035f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80036ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80035ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035be:	4b37      	ldr	r3, [pc, #220]	@ (800369c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80035d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80036a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80035d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80035f0:	4b2a      	ldr	r3, [pc, #168]	@ (800369c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f4:	0a5b      	lsrs	r3, r3, #9
 80035f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003602:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003606:	ee37 7a87 	vadd.f32	s14, s15, s14
 800360a:	edd7 6a07 	vldr	s13, [r7, #28]
 800360e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003616:	ee17 2a90 	vmov	r2, s15
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800361e:	4b1f      	ldr	r3, [pc, #124]	@ (800369c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	0c1b      	lsrs	r3, r3, #16
 8003624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003628:	ee07 3a90 	vmov	s15, r3
 800362c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003630:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003634:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003638:	edd7 6a07 	vldr	s13, [r7, #28]
 800363c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003644:	ee17 2a90 	vmov	r2, s15
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800364c:	4b13      	ldr	r3, [pc, #76]	@ (800369c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	0e1b      	lsrs	r3, r3, #24
 8003652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800365e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003662:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003666:	edd7 6a07 	vldr	s13, [r7, #28]
 800366a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800366e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003672:	ee17 2a90 	vmov	r2, s15
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800367a:	e008      	b.n	800368e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
}
 800368e:	bf00      	nop
 8003690:	3724      	adds	r7, #36	@ 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	58024400 	.word	0x58024400
 80036a0:	03d09000 	.word	0x03d09000
 80036a4:	46000000 	.word	0x46000000
 80036a8:	4c742400 	.word	0x4c742400
 80036ac:	4a742400 	.word	0x4a742400
 80036b0:	4bbebc20 	.word	0x4bbebc20

080036b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e049      	b.n	800375a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd fc4e 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	4619      	mov	r1, r3
 80036f2:	4610      	mov	r0, r2
 80036f4:	f000 fcae 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e049      	b.n	8003808 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d106      	bne.n	800378e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f841 	bl	8003810 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3304      	adds	r3, #4
 800379e:	4619      	mov	r1, r3
 80037a0:	4610      	mov	r0, r2
 80037a2:	f000 fc57 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <HAL_TIM_PWM_Start+0x24>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	bf14      	ite	ne
 8003840:	2301      	movne	r3, #1
 8003842:	2300      	moveq	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	e03c      	b.n	80038c2 <HAL_TIM_PWM_Start+0x9e>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2b04      	cmp	r3, #4
 800384c:	d109      	bne.n	8003862 <HAL_TIM_PWM_Start+0x3e>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b01      	cmp	r3, #1
 8003858:	bf14      	ite	ne
 800385a:	2301      	movne	r3, #1
 800385c:	2300      	moveq	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	e02f      	b.n	80038c2 <HAL_TIM_PWM_Start+0x9e>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b08      	cmp	r3, #8
 8003866:	d109      	bne.n	800387c <HAL_TIM_PWM_Start+0x58>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	bf14      	ite	ne
 8003874:	2301      	movne	r3, #1
 8003876:	2300      	moveq	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e022      	b.n	80038c2 <HAL_TIM_PWM_Start+0x9e>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b0c      	cmp	r3, #12
 8003880:	d109      	bne.n	8003896 <HAL_TIM_PWM_Start+0x72>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	bf14      	ite	ne
 800388e:	2301      	movne	r3, #1
 8003890:	2300      	moveq	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	e015      	b.n	80038c2 <HAL_TIM_PWM_Start+0x9e>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b10      	cmp	r3, #16
 800389a:	d109      	bne.n	80038b0 <HAL_TIM_PWM_Start+0x8c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	e008      	b.n	80038c2 <HAL_TIM_PWM_Start+0x9e>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	bf14      	ite	ne
 80038bc:	2301      	movne	r3, #1
 80038be:	2300      	moveq	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e0a1      	b.n	8003a0e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d104      	bne.n	80038da <HAL_TIM_PWM_Start+0xb6>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038d8:	e023      	b.n	8003922 <HAL_TIM_PWM_Start+0xfe>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d104      	bne.n	80038ea <HAL_TIM_PWM_Start+0xc6>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038e8:	e01b      	b.n	8003922 <HAL_TIM_PWM_Start+0xfe>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d104      	bne.n	80038fa <HAL_TIM_PWM_Start+0xd6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038f8:	e013      	b.n	8003922 <HAL_TIM_PWM_Start+0xfe>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b0c      	cmp	r3, #12
 80038fe:	d104      	bne.n	800390a <HAL_TIM_PWM_Start+0xe6>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003908:	e00b      	b.n	8003922 <HAL_TIM_PWM_Start+0xfe>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b10      	cmp	r3, #16
 800390e:	d104      	bne.n	800391a <HAL_TIM_PWM_Start+0xf6>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003918:	e003      	b.n	8003922 <HAL_TIM_PWM_Start+0xfe>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2201      	movs	r2, #1
 8003928:	6839      	ldr	r1, [r7, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f001 f8d0 	bl	8004ad0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a38      	ldr	r2, [pc, #224]	@ (8003a18 <HAL_TIM_PWM_Start+0x1f4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <HAL_TIM_PWM_Start+0x13e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a37      	ldr	r2, [pc, #220]	@ (8003a1c <HAL_TIM_PWM_Start+0x1f8>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00e      	beq.n	8003962 <HAL_TIM_PWM_Start+0x13e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a35      	ldr	r2, [pc, #212]	@ (8003a20 <HAL_TIM_PWM_Start+0x1fc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_TIM_PWM_Start+0x13e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a34      	ldr	r2, [pc, #208]	@ (8003a24 <HAL_TIM_PWM_Start+0x200>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d004      	beq.n	8003962 <HAL_TIM_PWM_Start+0x13e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a32      	ldr	r2, [pc, #200]	@ (8003a28 <HAL_TIM_PWM_Start+0x204>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d101      	bne.n	8003966 <HAL_TIM_PWM_Start+0x142>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_TIM_PWM_Start+0x144>
 8003966:	2300      	movs	r3, #0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800397a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a25      	ldr	r2, [pc, #148]	@ (8003a18 <HAL_TIM_PWM_Start+0x1f4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d022      	beq.n	80039cc <HAL_TIM_PWM_Start+0x1a8>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398e:	d01d      	beq.n	80039cc <HAL_TIM_PWM_Start+0x1a8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a25      	ldr	r2, [pc, #148]	@ (8003a2c <HAL_TIM_PWM_Start+0x208>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d018      	beq.n	80039cc <HAL_TIM_PWM_Start+0x1a8>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a24      	ldr	r2, [pc, #144]	@ (8003a30 <HAL_TIM_PWM_Start+0x20c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <HAL_TIM_PWM_Start+0x1a8>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a22      	ldr	r2, [pc, #136]	@ (8003a34 <HAL_TIM_PWM_Start+0x210>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00e      	beq.n	80039cc <HAL_TIM_PWM_Start+0x1a8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a1c <HAL_TIM_PWM_Start+0x1f8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d009      	beq.n	80039cc <HAL_TIM_PWM_Start+0x1a8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003a38 <HAL_TIM_PWM_Start+0x214>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <HAL_TIM_PWM_Start+0x1a8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a16      	ldr	r2, [pc, #88]	@ (8003a20 <HAL_TIM_PWM_Start+0x1fc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d115      	bne.n	80039f8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a3c <HAL_TIM_PWM_Start+0x218>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b06      	cmp	r3, #6
 80039dc:	d015      	beq.n	8003a0a <HAL_TIM_PWM_Start+0x1e6>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e4:	d011      	beq.n	8003a0a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0201 	orr.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f6:	e008      	b.n	8003a0a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	e000      	b.n	8003a0c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40010000 	.word	0x40010000
 8003a1c:	40010400 	.word	0x40010400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40014400 	.word	0x40014400
 8003a28:	40014800 	.word	0x40014800
 8003a2c:	40000400 	.word	0x40000400
 8003a30:	40000800 	.word	0x40000800
 8003a34:	40000c00 	.word	0x40000c00
 8003a38:	40001800 	.word	0x40001800
 8003a3c:	00010007 	.word	0x00010007

08003a40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e049      	b.n	8003ae6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f841 	bl	8003aee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4610      	mov	r0, r2
 8003a80:	f000 fae8 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e088      	b.n	8003c32 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d11b      	bne.n	8003b66 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003b3e:	f000 fdff 	bl	8004740 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699a      	ldr	r2, [r3, #24]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 020c 	bic.w	r2, r2, #12
 8003b50:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6999      	ldr	r1, [r3, #24]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	619a      	str	r2, [r3, #24]
 8003b64:	e060      	b.n	8003c28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d11c      	bne.n	8003ba6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003b7c:	f000 fe83 	bl	8004886 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003b8e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6999      	ldr	r1, [r3, #24]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	021a      	lsls	r2, r3, #8
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	619a      	str	r2, [r3, #24]
 8003ba4:	e040      	b.n	8003c28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d11b      	bne.n	8003be4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003bbc:	f000 fed0 	bl	8004960 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69da      	ldr	r2, [r3, #28]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 020c 	bic.w	r2, r2, #12
 8003bce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69d9      	ldr	r1, [r3, #28]
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	61da      	str	r2, [r3, #28]
 8003be2:	e021      	b.n	8003c28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b0c      	cmp	r3, #12
 8003be8:	d11c      	bne.n	8003c24 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003bfa:	f000 feed 	bl	80049d8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c0c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69d9      	ldr	r1, [r3, #28]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	021a      	lsls	r2, r3, #8
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	61da      	str	r2, [r3, #28]
 8003c22:	e001      	b.n	8003c28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e0ff      	b.n	8003e5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b14      	cmp	r3, #20
 8003c66:	f200 80f0 	bhi.w	8003e4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003cc5 	.word	0x08003cc5
 8003c74:	08003e4b 	.word	0x08003e4b
 8003c78:	08003e4b 	.word	0x08003e4b
 8003c7c:	08003e4b 	.word	0x08003e4b
 8003c80:	08003d05 	.word	0x08003d05
 8003c84:	08003e4b 	.word	0x08003e4b
 8003c88:	08003e4b 	.word	0x08003e4b
 8003c8c:	08003e4b 	.word	0x08003e4b
 8003c90:	08003d47 	.word	0x08003d47
 8003c94:	08003e4b 	.word	0x08003e4b
 8003c98:	08003e4b 	.word	0x08003e4b
 8003c9c:	08003e4b 	.word	0x08003e4b
 8003ca0:	08003d87 	.word	0x08003d87
 8003ca4:	08003e4b 	.word	0x08003e4b
 8003ca8:	08003e4b 	.word	0x08003e4b
 8003cac:	08003e4b 	.word	0x08003e4b
 8003cb0:	08003dc9 	.word	0x08003dc9
 8003cb4:	08003e4b 	.word	0x08003e4b
 8003cb8:	08003e4b 	.word	0x08003e4b
 8003cbc:	08003e4b 	.word	0x08003e4b
 8003cc0:	08003e09 	.word	0x08003e09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68b9      	ldr	r1, [r7, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fa62 	bl	8004194 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0208 	orr.w	r2, r2, #8
 8003cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0204 	bic.w	r2, r2, #4
 8003cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6999      	ldr	r1, [r3, #24]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	691a      	ldr	r2, [r3, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	619a      	str	r2, [r3, #24]
      break;
 8003d02:	e0a5      	b.n	8003e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fad2 	bl	80042b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6999      	ldr	r1, [r3, #24]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	021a      	lsls	r2, r3, #8
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	619a      	str	r2, [r3, #24]
      break;
 8003d44:	e084      	b.n	8003e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fb3b 	bl	80043c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f042 0208 	orr.w	r2, r2, #8
 8003d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 0204 	bic.w	r2, r2, #4
 8003d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69d9      	ldr	r1, [r3, #28]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	61da      	str	r2, [r3, #28]
      break;
 8003d84:	e064      	b.n	8003e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fba3 	bl	80044d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69d9      	ldr	r1, [r3, #28]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	021a      	lsls	r2, r3, #8
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	61da      	str	r2, [r3, #28]
      break;
 8003dc6:	e043      	b.n	8003e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fbec 	bl	80045ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0208 	orr.w	r2, r2, #8
 8003de2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0204 	bic.w	r2, r2, #4
 8003df2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e06:	e023      	b.n	8003e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fc30 	bl	8004674 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	021a      	lsls	r2, r3, #8
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003e48:	e002      	b.n	8003e50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop

08003e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_TIM_ConfigClockSource+0x1c>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e0dc      	b.n	800403a <HAL_TIM_ConfigClockSource+0x1d6>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004044 <HAL_TIM_ConfigClockSource+0x1e0>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ea6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a64      	ldr	r2, [pc, #400]	@ (8004048 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	f000 80a9 	beq.w	800400e <HAL_TIM_ConfigClockSource+0x1aa>
 8003ebc:	4a62      	ldr	r2, [pc, #392]	@ (8004048 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	f200 80ae 	bhi.w	8004020 <HAL_TIM_ConfigClockSource+0x1bc>
 8003ec4:	4a61      	ldr	r2, [pc, #388]	@ (800404c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	f000 80a1 	beq.w	800400e <HAL_TIM_ConfigClockSource+0x1aa>
 8003ecc:	4a5f      	ldr	r2, [pc, #380]	@ (800404c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	f200 80a6 	bhi.w	8004020 <HAL_TIM_ConfigClockSource+0x1bc>
 8003ed4:	4a5e      	ldr	r2, [pc, #376]	@ (8004050 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	f000 8099 	beq.w	800400e <HAL_TIM_ConfigClockSource+0x1aa>
 8003edc:	4a5c      	ldr	r2, [pc, #368]	@ (8004050 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	f200 809e 	bhi.w	8004020 <HAL_TIM_ConfigClockSource+0x1bc>
 8003ee4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003ee8:	f000 8091 	beq.w	800400e <HAL_TIM_ConfigClockSource+0x1aa>
 8003eec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003ef0:	f200 8096 	bhi.w	8004020 <HAL_TIM_ConfigClockSource+0x1bc>
 8003ef4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ef8:	f000 8089 	beq.w	800400e <HAL_TIM_ConfigClockSource+0x1aa>
 8003efc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f00:	f200 808e 	bhi.w	8004020 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f08:	d03e      	beq.n	8003f88 <HAL_TIM_ConfigClockSource+0x124>
 8003f0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f0e:	f200 8087 	bhi.w	8004020 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f16:	f000 8086 	beq.w	8004026 <HAL_TIM_ConfigClockSource+0x1c2>
 8003f1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f1e:	d87f      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f20:	2b70      	cmp	r3, #112	@ 0x70
 8003f22:	d01a      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0xf6>
 8003f24:	2b70      	cmp	r3, #112	@ 0x70
 8003f26:	d87b      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f28:	2b60      	cmp	r3, #96	@ 0x60
 8003f2a:	d050      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x16a>
 8003f2c:	2b60      	cmp	r3, #96	@ 0x60
 8003f2e:	d877      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f30:	2b50      	cmp	r3, #80	@ 0x50
 8003f32:	d03c      	beq.n	8003fae <HAL_TIM_ConfigClockSource+0x14a>
 8003f34:	2b50      	cmp	r3, #80	@ 0x50
 8003f36:	d873      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f38:	2b40      	cmp	r3, #64	@ 0x40
 8003f3a:	d058      	beq.n	8003fee <HAL_TIM_ConfigClockSource+0x18a>
 8003f3c:	2b40      	cmp	r3, #64	@ 0x40
 8003f3e:	d86f      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f40:	2b30      	cmp	r3, #48	@ 0x30
 8003f42:	d064      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x1aa>
 8003f44:	2b30      	cmp	r3, #48	@ 0x30
 8003f46:	d86b      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d060      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x1aa>
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d867      	bhi.n	8004020 <HAL_TIM_ConfigClockSource+0x1bc>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d05c      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x1aa>
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d05a      	beq.n	800400e <HAL_TIM_ConfigClockSource+0x1aa>
 8003f58:	e062      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f6a:	f000 fd91 	bl	8004a90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	609a      	str	r2, [r3, #8]
      break;
 8003f86:	e04f      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f98:	f000 fd7a 	bl	8004a90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003faa:	609a      	str	r2, [r3, #8]
      break;
 8003fac:	e03c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f000 fc34 	bl	8004828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2150      	movs	r1, #80	@ 0x50
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fd44 	bl	8004a54 <TIM_ITRx_SetConfig>
      break;
 8003fcc:	e02c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f000 fc90 	bl	8004900 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2160      	movs	r1, #96	@ 0x60
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 fd34 	bl	8004a54 <TIM_ITRx_SetConfig>
      break;
 8003fec:	e01c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f000 fc14 	bl	8004828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2140      	movs	r1, #64	@ 0x40
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fd24 	bl	8004a54 <TIM_ITRx_SetConfig>
      break;
 800400c:	e00c      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f000 fd1b 	bl	8004a54 <TIM_ITRx_SetConfig>
      break;
 800401e:	e003      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
      break;
 8004024:	e000      	b.n	8004028 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004038:	7bfb      	ldrb	r3, [r7, #15]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	ffceff88 	.word	0xffceff88
 8004048:	00100040 	.word	0x00100040
 800404c:	00100030 	.word	0x00100030
 8004050:	00100020 	.word	0x00100020

08004054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a43      	ldr	r2, [pc, #268]	@ (8004174 <TIM_Base_SetConfig+0x120>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d013      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004072:	d00f      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a40      	ldr	r2, [pc, #256]	@ (8004178 <TIM_Base_SetConfig+0x124>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00b      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a3f      	ldr	r2, [pc, #252]	@ (800417c <TIM_Base_SetConfig+0x128>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d007      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a3e      	ldr	r2, [pc, #248]	@ (8004180 <TIM_Base_SetConfig+0x12c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <TIM_Base_SetConfig+0x40>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a3d      	ldr	r2, [pc, #244]	@ (8004184 <TIM_Base_SetConfig+0x130>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d108      	bne.n	80040a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a32      	ldr	r2, [pc, #200]	@ (8004174 <TIM_Base_SetConfig+0x120>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01f      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b4:	d01b      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004178 <TIM_Base_SetConfig+0x124>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d017      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a2e      	ldr	r2, [pc, #184]	@ (800417c <TIM_Base_SetConfig+0x128>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004180 <TIM_Base_SetConfig+0x12c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00f      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004184 <TIM_Base_SetConfig+0x130>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00b      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004188 <TIM_Base_SetConfig+0x134>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a2a      	ldr	r2, [pc, #168]	@ (800418c <TIM_Base_SetConfig+0x138>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d003      	beq.n	80040ee <TIM_Base_SetConfig+0x9a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a29      	ldr	r2, [pc, #164]	@ (8004190 <TIM_Base_SetConfig+0x13c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d108      	bne.n	8004100 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a14      	ldr	r2, [pc, #80]	@ (8004174 <TIM_Base_SetConfig+0x120>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00f      	beq.n	8004146 <TIM_Base_SetConfig+0xf2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a16      	ldr	r2, [pc, #88]	@ (8004184 <TIM_Base_SetConfig+0x130>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00b      	beq.n	8004146 <TIM_Base_SetConfig+0xf2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a15      	ldr	r2, [pc, #84]	@ (8004188 <TIM_Base_SetConfig+0x134>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <TIM_Base_SetConfig+0xf2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a14      	ldr	r2, [pc, #80]	@ (800418c <TIM_Base_SetConfig+0x138>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_Base_SetConfig+0xf2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a13      	ldr	r2, [pc, #76]	@ (8004190 <TIM_Base_SetConfig+0x13c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d103      	bne.n	800414e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f043 0204 	orr.w	r2, r3, #4
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	601a      	str	r2, [r3, #0]
}
 8004166:	bf00      	nop
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40010000 	.word	0x40010000
 8004178:	40000400 	.word	0x40000400
 800417c:	40000800 	.word	0x40000800
 8004180:	40000c00 	.word	0x40000c00
 8004184:	40010400 	.word	0x40010400
 8004188:	40014000 	.word	0x40014000
 800418c:	40014400 	.word	0x40014400
 8004190:	40014800 	.word	0x40014800

08004194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f023 0201 	bic.w	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4b37      	ldr	r3, [pc, #220]	@ (800429c <TIM_OC1_SetConfig+0x108>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0303 	bic.w	r3, r3, #3
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f023 0302 	bic.w	r3, r3, #2
 80041dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a2d      	ldr	r2, [pc, #180]	@ (80042a0 <TIM_OC1_SetConfig+0x10c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d00f      	beq.n	8004210 <TIM_OC1_SetConfig+0x7c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a2c      	ldr	r2, [pc, #176]	@ (80042a4 <TIM_OC1_SetConfig+0x110>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d00b      	beq.n	8004210 <TIM_OC1_SetConfig+0x7c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a2b      	ldr	r2, [pc, #172]	@ (80042a8 <TIM_OC1_SetConfig+0x114>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d007      	beq.n	8004210 <TIM_OC1_SetConfig+0x7c>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a2a      	ldr	r2, [pc, #168]	@ (80042ac <TIM_OC1_SetConfig+0x118>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d003      	beq.n	8004210 <TIM_OC1_SetConfig+0x7c>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a29      	ldr	r2, [pc, #164]	@ (80042b0 <TIM_OC1_SetConfig+0x11c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10c      	bne.n	800422a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f023 0308 	bic.w	r3, r3, #8
 8004216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f023 0304 	bic.w	r3, r3, #4
 8004228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a1c      	ldr	r2, [pc, #112]	@ (80042a0 <TIM_OC1_SetConfig+0x10c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00f      	beq.n	8004252 <TIM_OC1_SetConfig+0xbe>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a1b      	ldr	r2, [pc, #108]	@ (80042a4 <TIM_OC1_SetConfig+0x110>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00b      	beq.n	8004252 <TIM_OC1_SetConfig+0xbe>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a1a      	ldr	r2, [pc, #104]	@ (80042a8 <TIM_OC1_SetConfig+0x114>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d007      	beq.n	8004252 <TIM_OC1_SetConfig+0xbe>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a19      	ldr	r2, [pc, #100]	@ (80042ac <TIM_OC1_SetConfig+0x118>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d003      	beq.n	8004252 <TIM_OC1_SetConfig+0xbe>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a18      	ldr	r2, [pc, #96]	@ (80042b0 <TIM_OC1_SetConfig+0x11c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d111      	bne.n	8004276 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	621a      	str	r2, [r3, #32]
}
 8004290:	bf00      	nop
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	fffeff8f 	.word	0xfffeff8f
 80042a0:	40010000 	.word	0x40010000
 80042a4:	40010400 	.word	0x40010400
 80042a8:	40014000 	.word	0x40014000
 80042ac:	40014400 	.word	0x40014400
 80042b0:	40014800 	.word	0x40014800

080042b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	f023 0210 	bic.w	r2, r3, #16
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4b34      	ldr	r3, [pc, #208]	@ (80043b0 <TIM_OC2_SetConfig+0xfc>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	021b      	lsls	r3, r3, #8
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f023 0320 	bic.w	r3, r3, #32
 80042fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a29      	ldr	r2, [pc, #164]	@ (80043b4 <TIM_OC2_SetConfig+0x100>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d003      	beq.n	800431c <TIM_OC2_SetConfig+0x68>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a28      	ldr	r2, [pc, #160]	@ (80043b8 <TIM_OC2_SetConfig+0x104>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d10d      	bne.n	8004338 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004336:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a1e      	ldr	r2, [pc, #120]	@ (80043b4 <TIM_OC2_SetConfig+0x100>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00f      	beq.n	8004360 <TIM_OC2_SetConfig+0xac>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a1d      	ldr	r2, [pc, #116]	@ (80043b8 <TIM_OC2_SetConfig+0x104>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00b      	beq.n	8004360 <TIM_OC2_SetConfig+0xac>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a1c      	ldr	r2, [pc, #112]	@ (80043bc <TIM_OC2_SetConfig+0x108>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d007      	beq.n	8004360 <TIM_OC2_SetConfig+0xac>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a1b      	ldr	r2, [pc, #108]	@ (80043c0 <TIM_OC2_SetConfig+0x10c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_OC2_SetConfig+0xac>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a1a      	ldr	r2, [pc, #104]	@ (80043c4 <TIM_OC2_SetConfig+0x110>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d113      	bne.n	8004388 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004366:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800436e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	feff8fff 	.word	0xfeff8fff
 80043b4:	40010000 	.word	0x40010000
 80043b8:	40010400 	.word	0x40010400
 80043bc:	40014000 	.word	0x40014000
 80043c0:	40014400 	.word	0x40014400
 80043c4:	40014800 	.word	0x40014800

080043c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4b33      	ldr	r3, [pc, #204]	@ (80044c0 <TIM_OC3_SetConfig+0xf8>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0303 	bic.w	r3, r3, #3
 80043fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a28      	ldr	r2, [pc, #160]	@ (80044c4 <TIM_OC3_SetConfig+0xfc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d003      	beq.n	800442e <TIM_OC3_SetConfig+0x66>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a27      	ldr	r2, [pc, #156]	@ (80044c8 <TIM_OC3_SetConfig+0x100>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d10d      	bne.n	800444a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1d      	ldr	r2, [pc, #116]	@ (80044c4 <TIM_OC3_SetConfig+0xfc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00f      	beq.n	8004472 <TIM_OC3_SetConfig+0xaa>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1c      	ldr	r2, [pc, #112]	@ (80044c8 <TIM_OC3_SetConfig+0x100>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00b      	beq.n	8004472 <TIM_OC3_SetConfig+0xaa>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1b      	ldr	r2, [pc, #108]	@ (80044cc <TIM_OC3_SetConfig+0x104>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d007      	beq.n	8004472 <TIM_OC3_SetConfig+0xaa>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a1a      	ldr	r2, [pc, #104]	@ (80044d0 <TIM_OC3_SetConfig+0x108>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d003      	beq.n	8004472 <TIM_OC3_SetConfig+0xaa>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a19      	ldr	r2, [pc, #100]	@ (80044d4 <TIM_OC3_SetConfig+0x10c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d113      	bne.n	800449a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4313      	orrs	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	621a      	str	r2, [r3, #32]
}
 80044b4:	bf00      	nop
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	fffeff8f 	.word	0xfffeff8f
 80044c4:	40010000 	.word	0x40010000
 80044c8:	40010400 	.word	0x40010400
 80044cc:	40014000 	.word	0x40014000
 80044d0:	40014400 	.word	0x40014400
 80044d4:	40014800 	.word	0x40014800

080044d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4b24      	ldr	r3, [pc, #144]	@ (8004594 <TIM_OC4_SetConfig+0xbc>)
 8004504:	4013      	ands	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800450e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	031b      	lsls	r3, r3, #12
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a19      	ldr	r2, [pc, #100]	@ (8004598 <TIM_OC4_SetConfig+0xc0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d00f      	beq.n	8004558 <TIM_OC4_SetConfig+0x80>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a18      	ldr	r2, [pc, #96]	@ (800459c <TIM_OC4_SetConfig+0xc4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00b      	beq.n	8004558 <TIM_OC4_SetConfig+0x80>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a17      	ldr	r2, [pc, #92]	@ (80045a0 <TIM_OC4_SetConfig+0xc8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d007      	beq.n	8004558 <TIM_OC4_SetConfig+0x80>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a16      	ldr	r2, [pc, #88]	@ (80045a4 <TIM_OC4_SetConfig+0xcc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_OC4_SetConfig+0x80>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a15      	ldr	r2, [pc, #84]	@ (80045a8 <TIM_OC4_SetConfig+0xd0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d109      	bne.n	800456c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800455e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	019b      	lsls	r3, r3, #6
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	feff8fff 	.word	0xfeff8fff
 8004598:	40010000 	.word	0x40010000
 800459c:	40010400 	.word	0x40010400
 80045a0:	40014000 	.word	0x40014000
 80045a4:	40014400 	.word	0x40014400
 80045a8:	40014800 	.word	0x40014800

080045ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4b21      	ldr	r3, [pc, #132]	@ (800465c <TIM_OC5_SetConfig+0xb0>)
 80045d8:	4013      	ands	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80045ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	041b      	lsls	r3, r3, #16
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a18      	ldr	r2, [pc, #96]	@ (8004660 <TIM_OC5_SetConfig+0xb4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00f      	beq.n	8004622 <TIM_OC5_SetConfig+0x76>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a17      	ldr	r2, [pc, #92]	@ (8004664 <TIM_OC5_SetConfig+0xb8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00b      	beq.n	8004622 <TIM_OC5_SetConfig+0x76>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a16      	ldr	r2, [pc, #88]	@ (8004668 <TIM_OC5_SetConfig+0xbc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d007      	beq.n	8004622 <TIM_OC5_SetConfig+0x76>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a15      	ldr	r2, [pc, #84]	@ (800466c <TIM_OC5_SetConfig+0xc0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d003      	beq.n	8004622 <TIM_OC5_SetConfig+0x76>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a14      	ldr	r2, [pc, #80]	@ (8004670 <TIM_OC5_SetConfig+0xc4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d109      	bne.n	8004636 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004628:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	621a      	str	r2, [r3, #32]
}
 8004650:	bf00      	nop
 8004652:	371c      	adds	r7, #28
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	fffeff8f 	.word	0xfffeff8f
 8004660:	40010000 	.word	0x40010000
 8004664:	40010400 	.word	0x40010400
 8004668:	40014000 	.word	0x40014000
 800466c:	40014400 	.word	0x40014400
 8004670:	40014800 	.word	0x40014800

08004674 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4b22      	ldr	r3, [pc, #136]	@ (8004728 <TIM_OC6_SetConfig+0xb4>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	021b      	lsls	r3, r3, #8
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	051b      	lsls	r3, r3, #20
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a19      	ldr	r2, [pc, #100]	@ (800472c <TIM_OC6_SetConfig+0xb8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00f      	beq.n	80046ec <TIM_OC6_SetConfig+0x78>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a18      	ldr	r2, [pc, #96]	@ (8004730 <TIM_OC6_SetConfig+0xbc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00b      	beq.n	80046ec <TIM_OC6_SetConfig+0x78>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a17      	ldr	r2, [pc, #92]	@ (8004734 <TIM_OC6_SetConfig+0xc0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d007      	beq.n	80046ec <TIM_OC6_SetConfig+0x78>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a16      	ldr	r2, [pc, #88]	@ (8004738 <TIM_OC6_SetConfig+0xc4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_OC6_SetConfig+0x78>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a15      	ldr	r2, [pc, #84]	@ (800473c <TIM_OC6_SetConfig+0xc8>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d109      	bne.n	8004700 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	029b      	lsls	r3, r3, #10
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	feff8fff 	.word	0xfeff8fff
 800472c:	40010000 	.word	0x40010000
 8004730:	40010400 	.word	0x40010400
 8004734:	40014000 	.word	0x40014000
 8004738:	40014400 	.word	0x40014400
 800473c:	40014800 	.word	0x40014800

08004740 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	f023 0201 	bic.w	r2, r3, #1
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4a28      	ldr	r2, [pc, #160]	@ (800480c <TIM_TI1_SetConfig+0xcc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d01b      	beq.n	80047a6 <TIM_TI1_SetConfig+0x66>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004774:	d017      	beq.n	80047a6 <TIM_TI1_SetConfig+0x66>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a25      	ldr	r2, [pc, #148]	@ (8004810 <TIM_TI1_SetConfig+0xd0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d013      	beq.n	80047a6 <TIM_TI1_SetConfig+0x66>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a24      	ldr	r2, [pc, #144]	@ (8004814 <TIM_TI1_SetConfig+0xd4>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00f      	beq.n	80047a6 <TIM_TI1_SetConfig+0x66>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a23      	ldr	r2, [pc, #140]	@ (8004818 <TIM_TI1_SetConfig+0xd8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00b      	beq.n	80047a6 <TIM_TI1_SetConfig+0x66>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a22      	ldr	r2, [pc, #136]	@ (800481c <TIM_TI1_SetConfig+0xdc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d007      	beq.n	80047a6 <TIM_TI1_SetConfig+0x66>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4a21      	ldr	r2, [pc, #132]	@ (8004820 <TIM_TI1_SetConfig+0xe0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d003      	beq.n	80047a6 <TIM_TI1_SetConfig+0x66>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4a20      	ldr	r2, [pc, #128]	@ (8004824 <TIM_TI1_SetConfig+0xe4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d101      	bne.n	80047aa <TIM_TI1_SetConfig+0x6a>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <TIM_TI1_SetConfig+0x6c>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	e003      	b.n	80047ca <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f023 030a 	bic.w	r3, r3, #10
 80047e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f003 030a 	and.w	r3, r3, #10
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	621a      	str	r2, [r3, #32]
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40010000 	.word	0x40010000
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40010400 	.word	0x40010400
 8004820:	40001800 	.word	0x40001800
 8004824:	40014000 	.word	0x40014000

08004828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f023 0201 	bic.w	r2, r3, #1
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f023 030a 	bic.w	r3, r3, #10
 8004864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004886:	b480      	push	{r7}
 8004888:	b087      	sub	sp, #28
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0210 	bic.w	r2, r3, #16
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	021b      	lsls	r3, r3, #8
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	031b      	lsls	r3, r3, #12
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	621a      	str	r2, [r3, #32]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	f023 0210 	bic.w	r2, r3, #16
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800492a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	031b      	lsls	r3, r3, #12
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800493c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	621a      	str	r2, [r3, #32]
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f023 0303 	bic.w	r3, r3, #3
 800498c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800499c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80049b0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	621a      	str	r2, [r3, #32]
}
 80049cc:	bf00      	nop
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a04:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a16:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	031b      	lsls	r3, r3, #12
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004a2a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	031b      	lsls	r3, r3, #12
 8004a30:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	621a      	str	r2, [r3, #32]
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4b09      	ldr	r3, [pc, #36]	@ (8004a8c <TIM_ITRx_SetConfig+0x38>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f043 0307 	orr.w	r3, r3, #7
 8004a76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	609a      	str	r2, [r3, #8]
}
 8004a7e:	bf00      	nop
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	ffcfff8f 	.word	0xffcfff8f

08004a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	021a      	lsls	r2, r3, #8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	609a      	str	r2, [r3, #8]
}
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1a      	ldr	r2, [r3, #32]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	43db      	mvns	r3, r3
 8004af2:	401a      	ands	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a1a      	ldr	r2, [r3, #32]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 031f 	and.w	r3, r3, #31
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	431a      	orrs	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
	...

08004b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e06d      	b.n	8004c10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a30      	ldr	r2, [pc, #192]	@ (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a2f      	ldr	r2, [pc, #188]	@ (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d108      	bne.n	8004b7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a20      	ldr	r2, [pc, #128]	@ (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d022      	beq.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba6:	d01d      	beq.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1d      	ldr	r2, [pc, #116]	@ (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d018      	beq.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d013      	beq.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00e      	beq.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a15      	ldr	r2, [pc, #84]	@ (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d009      	beq.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a16      	ldr	r2, [pc, #88]	@ (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a15      	ldr	r2, [pc, #84]	@ (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d10c      	bne.n	8004bfe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40010000 	.word	0x40010000
 8004c20:	40010400 	.word	0x40010400
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40000800 	.word	0x40000800
 8004c2c:	40000c00 	.word	0x40000c00
 8004c30:	40001800 	.word	0x40001800
 8004c34:	40014000 	.word	0x40014000

08004c38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e042      	b.n	8004cd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f83b 	bl	8004cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2224      	movs	r2, #36	@ 0x24
 8004c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0201 	bic.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fe28 	bl	80058d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f8bd 	bl	8004e08 <UART_SetConfig>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e01b      	b.n	8004cd0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fea7 	bl	8005a1c <UART_CheckIdleState>
 8004cce:	4603      	mov	r3, r0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	@ 0x28
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d17b      	bne.n	8004dfe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <HAL_UART_Transmit+0x26>
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e074      	b.n	8004e00 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2221      	movs	r2, #33	@ 0x21
 8004d22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d26:	f7fc fdff 	bl	8001928 <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	88fa      	ldrh	r2, [r7, #6]
 8004d30:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	88fa      	ldrh	r2, [r7, #6]
 8004d38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d44:	d108      	bne.n	8004d58 <HAL_UART_Transmit+0x6c>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d104      	bne.n	8004d58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	e003      	b.n	8004d60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d60:	e030      	b.n	8004dc4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	2180      	movs	r1, #128	@ 0x80
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 feff 	bl	8005b70 <UART_WaitOnFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d005      	beq.n	8004d84 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e03d      	b.n	8004e00 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	61bb      	str	r3, [r7, #24]
 8004da0:	e007      	b.n	8004db2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	781a      	ldrb	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	3301      	adds	r3, #1
 8004db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1c8      	bne.n	8004d62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2140      	movs	r1, #64	@ 0x40
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fec8 	bl	8005b70 <UART_WaitOnFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e006      	b.n	8004e00 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	e000      	b.n	8004e00 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004dfe:	2302      	movs	r3, #2
  }
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3720      	adds	r7, #32
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e0c:	b092      	sub	sp, #72	@ 0x48
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	431a      	orrs	r2, r3
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	4bbe      	ldr	r3, [pc, #760]	@ (8005130 <UART_SetConfig+0x328>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e40:	430b      	orrs	r3, r1
 8004e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4ab3      	ldr	r2, [pc, #716]	@ (8005134 <UART_SetConfig+0x32c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d004      	beq.n	8004e74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e70:	4313      	orrs	r3, r2
 8004e72:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	4baf      	ldr	r3, [pc, #700]	@ (8005138 <UART_SetConfig+0x330>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	f023 010f 	bic.w	r1, r3, #15
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4aa6      	ldr	r2, [pc, #664]	@ (800513c <UART_SetConfig+0x334>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d177      	bne.n	8004f98 <UART_SetConfig+0x190>
 8004ea8:	4ba5      	ldr	r3, [pc, #660]	@ (8005140 <UART_SetConfig+0x338>)
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eb0:	2b28      	cmp	r3, #40	@ 0x28
 8004eb2:	d86d      	bhi.n	8004f90 <UART_SetConfig+0x188>
 8004eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ebc <UART_SetConfig+0xb4>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004f61 	.word	0x08004f61
 8004ec0:	08004f91 	.word	0x08004f91
 8004ec4:	08004f91 	.word	0x08004f91
 8004ec8:	08004f91 	.word	0x08004f91
 8004ecc:	08004f91 	.word	0x08004f91
 8004ed0:	08004f91 	.word	0x08004f91
 8004ed4:	08004f91 	.word	0x08004f91
 8004ed8:	08004f91 	.word	0x08004f91
 8004edc:	08004f69 	.word	0x08004f69
 8004ee0:	08004f91 	.word	0x08004f91
 8004ee4:	08004f91 	.word	0x08004f91
 8004ee8:	08004f91 	.word	0x08004f91
 8004eec:	08004f91 	.word	0x08004f91
 8004ef0:	08004f91 	.word	0x08004f91
 8004ef4:	08004f91 	.word	0x08004f91
 8004ef8:	08004f91 	.word	0x08004f91
 8004efc:	08004f71 	.word	0x08004f71
 8004f00:	08004f91 	.word	0x08004f91
 8004f04:	08004f91 	.word	0x08004f91
 8004f08:	08004f91 	.word	0x08004f91
 8004f0c:	08004f91 	.word	0x08004f91
 8004f10:	08004f91 	.word	0x08004f91
 8004f14:	08004f91 	.word	0x08004f91
 8004f18:	08004f91 	.word	0x08004f91
 8004f1c:	08004f79 	.word	0x08004f79
 8004f20:	08004f91 	.word	0x08004f91
 8004f24:	08004f91 	.word	0x08004f91
 8004f28:	08004f91 	.word	0x08004f91
 8004f2c:	08004f91 	.word	0x08004f91
 8004f30:	08004f91 	.word	0x08004f91
 8004f34:	08004f91 	.word	0x08004f91
 8004f38:	08004f91 	.word	0x08004f91
 8004f3c:	08004f81 	.word	0x08004f81
 8004f40:	08004f91 	.word	0x08004f91
 8004f44:	08004f91 	.word	0x08004f91
 8004f48:	08004f91 	.word	0x08004f91
 8004f4c:	08004f91 	.word	0x08004f91
 8004f50:	08004f91 	.word	0x08004f91
 8004f54:	08004f91 	.word	0x08004f91
 8004f58:	08004f91 	.word	0x08004f91
 8004f5c:	08004f89 	.word	0x08004f89
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f66:	e222      	b.n	80053ae <UART_SetConfig+0x5a6>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f6e:	e21e      	b.n	80053ae <UART_SetConfig+0x5a6>
 8004f70:	2308      	movs	r3, #8
 8004f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f76:	e21a      	b.n	80053ae <UART_SetConfig+0x5a6>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f7e:	e216      	b.n	80053ae <UART_SetConfig+0x5a6>
 8004f80:	2320      	movs	r3, #32
 8004f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f86:	e212      	b.n	80053ae <UART_SetConfig+0x5a6>
 8004f88:	2340      	movs	r3, #64	@ 0x40
 8004f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8e:	e20e      	b.n	80053ae <UART_SetConfig+0x5a6>
 8004f90:	2380      	movs	r3, #128	@ 0x80
 8004f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f96:	e20a      	b.n	80053ae <UART_SetConfig+0x5a6>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a69      	ldr	r2, [pc, #420]	@ (8005144 <UART_SetConfig+0x33c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d130      	bne.n	8005004 <UART_SetConfig+0x1fc>
 8004fa2:	4b67      	ldr	r3, [pc, #412]	@ (8005140 <UART_SetConfig+0x338>)
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	2b05      	cmp	r3, #5
 8004fac:	d826      	bhi.n	8004ffc <UART_SetConfig+0x1f4>
 8004fae:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb4 <UART_SetConfig+0x1ac>)
 8004fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb4:	08004fcd 	.word	0x08004fcd
 8004fb8:	08004fd5 	.word	0x08004fd5
 8004fbc:	08004fdd 	.word	0x08004fdd
 8004fc0:	08004fe5 	.word	0x08004fe5
 8004fc4:	08004fed 	.word	0x08004fed
 8004fc8:	08004ff5 	.word	0x08004ff5
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fd2:	e1ec      	b.n	80053ae <UART_SetConfig+0x5a6>
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fda:	e1e8      	b.n	80053ae <UART_SetConfig+0x5a6>
 8004fdc:	2308      	movs	r3, #8
 8004fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe2:	e1e4      	b.n	80053ae <UART_SetConfig+0x5a6>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fea:	e1e0      	b.n	80053ae <UART_SetConfig+0x5a6>
 8004fec:	2320      	movs	r3, #32
 8004fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff2:	e1dc      	b.n	80053ae <UART_SetConfig+0x5a6>
 8004ff4:	2340      	movs	r3, #64	@ 0x40
 8004ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffa:	e1d8      	b.n	80053ae <UART_SetConfig+0x5a6>
 8004ffc:	2380      	movs	r3, #128	@ 0x80
 8004ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005002:	e1d4      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a4f      	ldr	r2, [pc, #316]	@ (8005148 <UART_SetConfig+0x340>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d130      	bne.n	8005070 <UART_SetConfig+0x268>
 800500e:	4b4c      	ldr	r3, [pc, #304]	@ (8005140 <UART_SetConfig+0x338>)
 8005010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	2b05      	cmp	r3, #5
 8005018:	d826      	bhi.n	8005068 <UART_SetConfig+0x260>
 800501a:	a201      	add	r2, pc, #4	@ (adr r2, 8005020 <UART_SetConfig+0x218>)
 800501c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005020:	08005039 	.word	0x08005039
 8005024:	08005041 	.word	0x08005041
 8005028:	08005049 	.word	0x08005049
 800502c:	08005051 	.word	0x08005051
 8005030:	08005059 	.word	0x08005059
 8005034:	08005061 	.word	0x08005061
 8005038:	2300      	movs	r3, #0
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800503e:	e1b6      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005040:	2304      	movs	r3, #4
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005046:	e1b2      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005048:	2308      	movs	r3, #8
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800504e:	e1ae      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005050:	2310      	movs	r3, #16
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005056:	e1aa      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005058:	2320      	movs	r3, #32
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505e:	e1a6      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005060:	2340      	movs	r3, #64	@ 0x40
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005066:	e1a2      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005068:	2380      	movs	r3, #128	@ 0x80
 800506a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506e:	e19e      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a35      	ldr	r2, [pc, #212]	@ (800514c <UART_SetConfig+0x344>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d130      	bne.n	80050dc <UART_SetConfig+0x2d4>
 800507a:	4b31      	ldr	r3, [pc, #196]	@ (8005140 <UART_SetConfig+0x338>)
 800507c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	2b05      	cmp	r3, #5
 8005084:	d826      	bhi.n	80050d4 <UART_SetConfig+0x2cc>
 8005086:	a201      	add	r2, pc, #4	@ (adr r2, 800508c <UART_SetConfig+0x284>)
 8005088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508c:	080050a5 	.word	0x080050a5
 8005090:	080050ad 	.word	0x080050ad
 8005094:	080050b5 	.word	0x080050b5
 8005098:	080050bd 	.word	0x080050bd
 800509c:	080050c5 	.word	0x080050c5
 80050a0:	080050cd 	.word	0x080050cd
 80050a4:	2300      	movs	r3, #0
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050aa:	e180      	b.n	80053ae <UART_SetConfig+0x5a6>
 80050ac:	2304      	movs	r3, #4
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050b2:	e17c      	b.n	80053ae <UART_SetConfig+0x5a6>
 80050b4:	2308      	movs	r3, #8
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ba:	e178      	b.n	80053ae <UART_SetConfig+0x5a6>
 80050bc:	2310      	movs	r3, #16
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c2:	e174      	b.n	80053ae <UART_SetConfig+0x5a6>
 80050c4:	2320      	movs	r3, #32
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ca:	e170      	b.n	80053ae <UART_SetConfig+0x5a6>
 80050cc:	2340      	movs	r3, #64	@ 0x40
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d2:	e16c      	b.n	80053ae <UART_SetConfig+0x5a6>
 80050d4:	2380      	movs	r3, #128	@ 0x80
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050da:	e168      	b.n	80053ae <UART_SetConfig+0x5a6>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005150 <UART_SetConfig+0x348>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d142      	bne.n	800516c <UART_SetConfig+0x364>
 80050e6:	4b16      	ldr	r3, [pc, #88]	@ (8005140 <UART_SetConfig+0x338>)
 80050e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	d838      	bhi.n	8005164 <UART_SetConfig+0x35c>
 80050f2:	a201      	add	r2, pc, #4	@ (adr r2, 80050f8 <UART_SetConfig+0x2f0>)
 80050f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f8:	08005111 	.word	0x08005111
 80050fc:	08005119 	.word	0x08005119
 8005100:	08005121 	.word	0x08005121
 8005104:	08005129 	.word	0x08005129
 8005108:	08005155 	.word	0x08005155
 800510c:	0800515d 	.word	0x0800515d
 8005110:	2300      	movs	r3, #0
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005116:	e14a      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005118:	2304      	movs	r3, #4
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800511e:	e146      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005120:	2308      	movs	r3, #8
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005126:	e142      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005128:	2310      	movs	r3, #16
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800512e:	e13e      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005130:	cfff69f3 	.word	0xcfff69f3
 8005134:	58000c00 	.word	0x58000c00
 8005138:	11fff4ff 	.word	0x11fff4ff
 800513c:	40011000 	.word	0x40011000
 8005140:	58024400 	.word	0x58024400
 8005144:	40004400 	.word	0x40004400
 8005148:	40004800 	.word	0x40004800
 800514c:	40004c00 	.word	0x40004c00
 8005150:	40005000 	.word	0x40005000
 8005154:	2320      	movs	r3, #32
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515a:	e128      	b.n	80053ae <UART_SetConfig+0x5a6>
 800515c:	2340      	movs	r3, #64	@ 0x40
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005162:	e124      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005164:	2380      	movs	r3, #128	@ 0x80
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516a:	e120      	b.n	80053ae <UART_SetConfig+0x5a6>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4acb      	ldr	r2, [pc, #812]	@ (80054a0 <UART_SetConfig+0x698>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d176      	bne.n	8005264 <UART_SetConfig+0x45c>
 8005176:	4bcb      	ldr	r3, [pc, #812]	@ (80054a4 <UART_SetConfig+0x69c>)
 8005178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800517e:	2b28      	cmp	r3, #40	@ 0x28
 8005180:	d86c      	bhi.n	800525c <UART_SetConfig+0x454>
 8005182:	a201      	add	r2, pc, #4	@ (adr r2, 8005188 <UART_SetConfig+0x380>)
 8005184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005188:	0800522d 	.word	0x0800522d
 800518c:	0800525d 	.word	0x0800525d
 8005190:	0800525d 	.word	0x0800525d
 8005194:	0800525d 	.word	0x0800525d
 8005198:	0800525d 	.word	0x0800525d
 800519c:	0800525d 	.word	0x0800525d
 80051a0:	0800525d 	.word	0x0800525d
 80051a4:	0800525d 	.word	0x0800525d
 80051a8:	08005235 	.word	0x08005235
 80051ac:	0800525d 	.word	0x0800525d
 80051b0:	0800525d 	.word	0x0800525d
 80051b4:	0800525d 	.word	0x0800525d
 80051b8:	0800525d 	.word	0x0800525d
 80051bc:	0800525d 	.word	0x0800525d
 80051c0:	0800525d 	.word	0x0800525d
 80051c4:	0800525d 	.word	0x0800525d
 80051c8:	0800523d 	.word	0x0800523d
 80051cc:	0800525d 	.word	0x0800525d
 80051d0:	0800525d 	.word	0x0800525d
 80051d4:	0800525d 	.word	0x0800525d
 80051d8:	0800525d 	.word	0x0800525d
 80051dc:	0800525d 	.word	0x0800525d
 80051e0:	0800525d 	.word	0x0800525d
 80051e4:	0800525d 	.word	0x0800525d
 80051e8:	08005245 	.word	0x08005245
 80051ec:	0800525d 	.word	0x0800525d
 80051f0:	0800525d 	.word	0x0800525d
 80051f4:	0800525d 	.word	0x0800525d
 80051f8:	0800525d 	.word	0x0800525d
 80051fc:	0800525d 	.word	0x0800525d
 8005200:	0800525d 	.word	0x0800525d
 8005204:	0800525d 	.word	0x0800525d
 8005208:	0800524d 	.word	0x0800524d
 800520c:	0800525d 	.word	0x0800525d
 8005210:	0800525d 	.word	0x0800525d
 8005214:	0800525d 	.word	0x0800525d
 8005218:	0800525d 	.word	0x0800525d
 800521c:	0800525d 	.word	0x0800525d
 8005220:	0800525d 	.word	0x0800525d
 8005224:	0800525d 	.word	0x0800525d
 8005228:	08005255 	.word	0x08005255
 800522c:	2301      	movs	r3, #1
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005232:	e0bc      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005234:	2304      	movs	r3, #4
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800523a:	e0b8      	b.n	80053ae <UART_SetConfig+0x5a6>
 800523c:	2308      	movs	r3, #8
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005242:	e0b4      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005244:	2310      	movs	r3, #16
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800524a:	e0b0      	b.n	80053ae <UART_SetConfig+0x5a6>
 800524c:	2320      	movs	r3, #32
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005252:	e0ac      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005254:	2340      	movs	r3, #64	@ 0x40
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525a:	e0a8      	b.n	80053ae <UART_SetConfig+0x5a6>
 800525c:	2380      	movs	r3, #128	@ 0x80
 800525e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005262:	e0a4      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a8f      	ldr	r2, [pc, #572]	@ (80054a8 <UART_SetConfig+0x6a0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d130      	bne.n	80052d0 <UART_SetConfig+0x4c8>
 800526e:	4b8d      	ldr	r3, [pc, #564]	@ (80054a4 <UART_SetConfig+0x69c>)
 8005270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	2b05      	cmp	r3, #5
 8005278:	d826      	bhi.n	80052c8 <UART_SetConfig+0x4c0>
 800527a:	a201      	add	r2, pc, #4	@ (adr r2, 8005280 <UART_SetConfig+0x478>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	08005299 	.word	0x08005299
 8005284:	080052a1 	.word	0x080052a1
 8005288:	080052a9 	.word	0x080052a9
 800528c:	080052b1 	.word	0x080052b1
 8005290:	080052b9 	.word	0x080052b9
 8005294:	080052c1 	.word	0x080052c1
 8005298:	2300      	movs	r3, #0
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800529e:	e086      	b.n	80053ae <UART_SetConfig+0x5a6>
 80052a0:	2304      	movs	r3, #4
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052a6:	e082      	b.n	80053ae <UART_SetConfig+0x5a6>
 80052a8:	2308      	movs	r3, #8
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ae:	e07e      	b.n	80053ae <UART_SetConfig+0x5a6>
 80052b0:	2310      	movs	r3, #16
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b6:	e07a      	b.n	80053ae <UART_SetConfig+0x5a6>
 80052b8:	2320      	movs	r3, #32
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052be:	e076      	b.n	80053ae <UART_SetConfig+0x5a6>
 80052c0:	2340      	movs	r3, #64	@ 0x40
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c6:	e072      	b.n	80053ae <UART_SetConfig+0x5a6>
 80052c8:	2380      	movs	r3, #128	@ 0x80
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ce:	e06e      	b.n	80053ae <UART_SetConfig+0x5a6>
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a75      	ldr	r2, [pc, #468]	@ (80054ac <UART_SetConfig+0x6a4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d130      	bne.n	800533c <UART_SetConfig+0x534>
 80052da:	4b72      	ldr	r3, [pc, #456]	@ (80054a4 <UART_SetConfig+0x69c>)
 80052dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	2b05      	cmp	r3, #5
 80052e4:	d826      	bhi.n	8005334 <UART_SetConfig+0x52c>
 80052e6:	a201      	add	r2, pc, #4	@ (adr r2, 80052ec <UART_SetConfig+0x4e4>)
 80052e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ec:	08005305 	.word	0x08005305
 80052f0:	0800530d 	.word	0x0800530d
 80052f4:	08005315 	.word	0x08005315
 80052f8:	0800531d 	.word	0x0800531d
 80052fc:	08005325 	.word	0x08005325
 8005300:	0800532d 	.word	0x0800532d
 8005304:	2300      	movs	r3, #0
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530a:	e050      	b.n	80053ae <UART_SetConfig+0x5a6>
 800530c:	2304      	movs	r3, #4
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005312:	e04c      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005314:	2308      	movs	r3, #8
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531a:	e048      	b.n	80053ae <UART_SetConfig+0x5a6>
 800531c:	2310      	movs	r3, #16
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005322:	e044      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005324:	2320      	movs	r3, #32
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e040      	b.n	80053ae <UART_SetConfig+0x5a6>
 800532c:	2340      	movs	r3, #64	@ 0x40
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e03c      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005334:	2380      	movs	r3, #128	@ 0x80
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533a:	e038      	b.n	80053ae <UART_SetConfig+0x5a6>
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a5b      	ldr	r2, [pc, #364]	@ (80054b0 <UART_SetConfig+0x6a8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d130      	bne.n	80053a8 <UART_SetConfig+0x5a0>
 8005346:	4b57      	ldr	r3, [pc, #348]	@ (80054a4 <UART_SetConfig+0x69c>)
 8005348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	2b05      	cmp	r3, #5
 8005350:	d826      	bhi.n	80053a0 <UART_SetConfig+0x598>
 8005352:	a201      	add	r2, pc, #4	@ (adr r2, 8005358 <UART_SetConfig+0x550>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	08005371 	.word	0x08005371
 800535c:	08005379 	.word	0x08005379
 8005360:	08005381 	.word	0x08005381
 8005364:	08005389 	.word	0x08005389
 8005368:	08005391 	.word	0x08005391
 800536c:	08005399 	.word	0x08005399
 8005370:	2302      	movs	r3, #2
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005376:	e01a      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005378:	2304      	movs	r3, #4
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537e:	e016      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005380:	2308      	movs	r3, #8
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e012      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005388:	2310      	movs	r3, #16
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e00e      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005390:	2320      	movs	r3, #32
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e00a      	b.n	80053ae <UART_SetConfig+0x5a6>
 8005398:	2340      	movs	r3, #64	@ 0x40
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e006      	b.n	80053ae <UART_SetConfig+0x5a6>
 80053a0:	2380      	movs	r3, #128	@ 0x80
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e002      	b.n	80053ae <UART_SetConfig+0x5a6>
 80053a8:	2380      	movs	r3, #128	@ 0x80
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a3f      	ldr	r2, [pc, #252]	@ (80054b0 <UART_SetConfig+0x6a8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	f040 80f8 	bne.w	80055aa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80053be:	2b20      	cmp	r3, #32
 80053c0:	dc46      	bgt.n	8005450 <UART_SetConfig+0x648>
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	f2c0 8082 	blt.w	80054cc <UART_SetConfig+0x6c4>
 80053c8:	3b02      	subs	r3, #2
 80053ca:	2b1e      	cmp	r3, #30
 80053cc:	d87e      	bhi.n	80054cc <UART_SetConfig+0x6c4>
 80053ce:	a201      	add	r2, pc, #4	@ (adr r2, 80053d4 <UART_SetConfig+0x5cc>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	08005457 	.word	0x08005457
 80053d8:	080054cd 	.word	0x080054cd
 80053dc:	0800545f 	.word	0x0800545f
 80053e0:	080054cd 	.word	0x080054cd
 80053e4:	080054cd 	.word	0x080054cd
 80053e8:	080054cd 	.word	0x080054cd
 80053ec:	0800546f 	.word	0x0800546f
 80053f0:	080054cd 	.word	0x080054cd
 80053f4:	080054cd 	.word	0x080054cd
 80053f8:	080054cd 	.word	0x080054cd
 80053fc:	080054cd 	.word	0x080054cd
 8005400:	080054cd 	.word	0x080054cd
 8005404:	080054cd 	.word	0x080054cd
 8005408:	080054cd 	.word	0x080054cd
 800540c:	0800547f 	.word	0x0800547f
 8005410:	080054cd 	.word	0x080054cd
 8005414:	080054cd 	.word	0x080054cd
 8005418:	080054cd 	.word	0x080054cd
 800541c:	080054cd 	.word	0x080054cd
 8005420:	080054cd 	.word	0x080054cd
 8005424:	080054cd 	.word	0x080054cd
 8005428:	080054cd 	.word	0x080054cd
 800542c:	080054cd 	.word	0x080054cd
 8005430:	080054cd 	.word	0x080054cd
 8005434:	080054cd 	.word	0x080054cd
 8005438:	080054cd 	.word	0x080054cd
 800543c:	080054cd 	.word	0x080054cd
 8005440:	080054cd 	.word	0x080054cd
 8005444:	080054cd 	.word	0x080054cd
 8005448:	080054cd 	.word	0x080054cd
 800544c:	080054bf 	.word	0x080054bf
 8005450:	2b40      	cmp	r3, #64	@ 0x40
 8005452:	d037      	beq.n	80054c4 <UART_SetConfig+0x6bc>
 8005454:	e03a      	b.n	80054cc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005456:	f7fd fe6f 	bl	8003138 <HAL_RCCEx_GetD3PCLK1Freq>
 800545a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800545c:	e03c      	b.n	80054d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800545e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005462:	4618      	mov	r0, r3
 8005464:	f7fd fe7e 	bl	8003164 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800546c:	e034      	b.n	80054d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800546e:	f107 0318 	add.w	r3, r7, #24
 8005472:	4618      	mov	r0, r3
 8005474:	f7fd ffca 	bl	800340c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800547c:	e02c      	b.n	80054d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800547e:	4b09      	ldr	r3, [pc, #36]	@ (80054a4 <UART_SetConfig+0x69c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d016      	beq.n	80054b8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800548a:	4b06      	ldr	r3, [pc, #24]	@ (80054a4 <UART_SetConfig+0x69c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	08db      	lsrs	r3, r3, #3
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	4a07      	ldr	r2, [pc, #28]	@ (80054b4 <UART_SetConfig+0x6ac>)
 8005496:	fa22 f303 	lsr.w	r3, r2, r3
 800549a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800549c:	e01c      	b.n	80054d8 <UART_SetConfig+0x6d0>
 800549e:	bf00      	nop
 80054a0:	40011400 	.word	0x40011400
 80054a4:	58024400 	.word	0x58024400
 80054a8:	40007800 	.word	0x40007800
 80054ac:	40007c00 	.word	0x40007c00
 80054b0:	58000c00 	.word	0x58000c00
 80054b4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80054b8:	4b9d      	ldr	r3, [pc, #628]	@ (8005730 <UART_SetConfig+0x928>)
 80054ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054bc:	e00c      	b.n	80054d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054be:	4b9d      	ldr	r3, [pc, #628]	@ (8005734 <UART_SetConfig+0x92c>)
 80054c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054c2:	e009      	b.n	80054d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054ca:	e005      	b.n	80054d8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80054d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 81de 	beq.w	800589c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	4a94      	ldr	r2, [pc, #592]	@ (8005738 <UART_SetConfig+0x930>)
 80054e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ea:	461a      	mov	r2, r3
 80054ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80054f2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	4613      	mov	r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	4413      	add	r3, r2
 80054fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005500:	429a      	cmp	r2, r3
 8005502:	d305      	bcc.n	8005510 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800550a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800550c:	429a      	cmp	r2, r3
 800550e:	d903      	bls.n	8005518 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005516:	e1c1      	b.n	800589c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800551a:	2200      	movs	r2, #0
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	60fa      	str	r2, [r7, #12]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005524:	4a84      	ldr	r2, [pc, #528]	@ (8005738 <UART_SetConfig+0x930>)
 8005526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800552a:	b29b      	uxth	r3, r3
 800552c:	2200      	movs	r2, #0
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	607a      	str	r2, [r7, #4]
 8005532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005536:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800553a:	f7fa ff21 	bl	8000380 <__aeabi_uldivmod>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4610      	mov	r0, r2
 8005544:	4619      	mov	r1, r3
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	020b      	lsls	r3, r1, #8
 8005550:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005554:	0202      	lsls	r2, r0, #8
 8005556:	6979      	ldr	r1, [r7, #20]
 8005558:	6849      	ldr	r1, [r1, #4]
 800555a:	0849      	lsrs	r1, r1, #1
 800555c:	2000      	movs	r0, #0
 800555e:	460c      	mov	r4, r1
 8005560:	4605      	mov	r5, r0
 8005562:	eb12 0804 	adds.w	r8, r2, r4
 8005566:	eb43 0905 	adc.w	r9, r3, r5
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	469a      	mov	sl, r3
 8005572:	4693      	mov	fp, r2
 8005574:	4652      	mov	r2, sl
 8005576:	465b      	mov	r3, fp
 8005578:	4640      	mov	r0, r8
 800557a:	4649      	mov	r1, r9
 800557c:	f7fa ff00 	bl	8000380 <__aeabi_uldivmod>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4613      	mov	r3, r2
 8005586:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800558e:	d308      	bcc.n	80055a2 <UART_SetConfig+0x79a>
 8005590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005596:	d204      	bcs.n	80055a2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800559e:	60da      	str	r2, [r3, #12]
 80055a0:	e17c      	b.n	800589c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80055a8:	e178      	b.n	800589c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055b2:	f040 80c5 	bne.w	8005740 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80055b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80055ba:	2b20      	cmp	r3, #32
 80055bc:	dc48      	bgt.n	8005650 <UART_SetConfig+0x848>
 80055be:	2b00      	cmp	r3, #0
 80055c0:	db7b      	blt.n	80056ba <UART_SetConfig+0x8b2>
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d879      	bhi.n	80056ba <UART_SetConfig+0x8b2>
 80055c6:	a201      	add	r2, pc, #4	@ (adr r2, 80055cc <UART_SetConfig+0x7c4>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	08005657 	.word	0x08005657
 80055d0:	0800565f 	.word	0x0800565f
 80055d4:	080056bb 	.word	0x080056bb
 80055d8:	080056bb 	.word	0x080056bb
 80055dc:	08005667 	.word	0x08005667
 80055e0:	080056bb 	.word	0x080056bb
 80055e4:	080056bb 	.word	0x080056bb
 80055e8:	080056bb 	.word	0x080056bb
 80055ec:	08005677 	.word	0x08005677
 80055f0:	080056bb 	.word	0x080056bb
 80055f4:	080056bb 	.word	0x080056bb
 80055f8:	080056bb 	.word	0x080056bb
 80055fc:	080056bb 	.word	0x080056bb
 8005600:	080056bb 	.word	0x080056bb
 8005604:	080056bb 	.word	0x080056bb
 8005608:	080056bb 	.word	0x080056bb
 800560c:	08005687 	.word	0x08005687
 8005610:	080056bb 	.word	0x080056bb
 8005614:	080056bb 	.word	0x080056bb
 8005618:	080056bb 	.word	0x080056bb
 800561c:	080056bb 	.word	0x080056bb
 8005620:	080056bb 	.word	0x080056bb
 8005624:	080056bb 	.word	0x080056bb
 8005628:	080056bb 	.word	0x080056bb
 800562c:	080056bb 	.word	0x080056bb
 8005630:	080056bb 	.word	0x080056bb
 8005634:	080056bb 	.word	0x080056bb
 8005638:	080056bb 	.word	0x080056bb
 800563c:	080056bb 	.word	0x080056bb
 8005640:	080056bb 	.word	0x080056bb
 8005644:	080056bb 	.word	0x080056bb
 8005648:	080056bb 	.word	0x080056bb
 800564c:	080056ad 	.word	0x080056ad
 8005650:	2b40      	cmp	r3, #64	@ 0x40
 8005652:	d02e      	beq.n	80056b2 <UART_SetConfig+0x8aa>
 8005654:	e031      	b.n	80056ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005656:	f7fd fd43 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 800565a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800565c:	e033      	b.n	80056c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800565e:	f7fd fd55 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 8005662:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005664:	e02f      	b.n	80056c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800566a:	4618      	mov	r0, r3
 800566c:	f7fd fd7a 	bl	8003164 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005674:	e027      	b.n	80056c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005676:	f107 0318 	add.w	r3, r7, #24
 800567a:	4618      	mov	r0, r3
 800567c:	f7fd fec6 	bl	800340c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005684:	e01f      	b.n	80056c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005686:	4b2d      	ldr	r3, [pc, #180]	@ (800573c <UART_SetConfig+0x934>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005692:	4b2a      	ldr	r3, [pc, #168]	@ (800573c <UART_SetConfig+0x934>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	08db      	lsrs	r3, r3, #3
 8005698:	f003 0303 	and.w	r3, r3, #3
 800569c:	4a24      	ldr	r2, [pc, #144]	@ (8005730 <UART_SetConfig+0x928>)
 800569e:	fa22 f303 	lsr.w	r3, r2, r3
 80056a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056a4:	e00f      	b.n	80056c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80056a6:	4b22      	ldr	r3, [pc, #136]	@ (8005730 <UART_SetConfig+0x928>)
 80056a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056aa:	e00c      	b.n	80056c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056ac:	4b21      	ldr	r3, [pc, #132]	@ (8005734 <UART_SetConfig+0x92c>)
 80056ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056b0:	e009      	b.n	80056c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056b8:	e005      	b.n	80056c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80056c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 80e7 	beq.w	800589c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	4a19      	ldr	r2, [pc, #100]	@ (8005738 <UART_SetConfig+0x930>)
 80056d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056d8:	461a      	mov	r2, r3
 80056da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80056e0:	005a      	lsls	r2, r3, #1
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	085b      	lsrs	r3, r3, #1
 80056e8:	441a      	add	r2, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f6:	2b0f      	cmp	r3, #15
 80056f8:	d916      	bls.n	8005728 <UART_SetConfig+0x920>
 80056fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005700:	d212      	bcs.n	8005728 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005704:	b29b      	uxth	r3, r3
 8005706:	f023 030f 	bic.w	r3, r3, #15
 800570a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800570c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	b29b      	uxth	r3, r3
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	b29a      	uxth	r2, r3
 8005718:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800571a:	4313      	orrs	r3, r2
 800571c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005724:	60da      	str	r2, [r3, #12]
 8005726:	e0b9      	b.n	800589c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800572e:	e0b5      	b.n	800589c <UART_SetConfig+0xa94>
 8005730:	03d09000 	.word	0x03d09000
 8005734:	003d0900 	.word	0x003d0900
 8005738:	08006bc8 	.word	0x08006bc8
 800573c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005740:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005744:	2b20      	cmp	r3, #32
 8005746:	dc49      	bgt.n	80057dc <UART_SetConfig+0x9d4>
 8005748:	2b00      	cmp	r3, #0
 800574a:	db7c      	blt.n	8005846 <UART_SetConfig+0xa3e>
 800574c:	2b20      	cmp	r3, #32
 800574e:	d87a      	bhi.n	8005846 <UART_SetConfig+0xa3e>
 8005750:	a201      	add	r2, pc, #4	@ (adr r2, 8005758 <UART_SetConfig+0x950>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	080057e3 	.word	0x080057e3
 800575c:	080057eb 	.word	0x080057eb
 8005760:	08005847 	.word	0x08005847
 8005764:	08005847 	.word	0x08005847
 8005768:	080057f3 	.word	0x080057f3
 800576c:	08005847 	.word	0x08005847
 8005770:	08005847 	.word	0x08005847
 8005774:	08005847 	.word	0x08005847
 8005778:	08005803 	.word	0x08005803
 800577c:	08005847 	.word	0x08005847
 8005780:	08005847 	.word	0x08005847
 8005784:	08005847 	.word	0x08005847
 8005788:	08005847 	.word	0x08005847
 800578c:	08005847 	.word	0x08005847
 8005790:	08005847 	.word	0x08005847
 8005794:	08005847 	.word	0x08005847
 8005798:	08005813 	.word	0x08005813
 800579c:	08005847 	.word	0x08005847
 80057a0:	08005847 	.word	0x08005847
 80057a4:	08005847 	.word	0x08005847
 80057a8:	08005847 	.word	0x08005847
 80057ac:	08005847 	.word	0x08005847
 80057b0:	08005847 	.word	0x08005847
 80057b4:	08005847 	.word	0x08005847
 80057b8:	08005847 	.word	0x08005847
 80057bc:	08005847 	.word	0x08005847
 80057c0:	08005847 	.word	0x08005847
 80057c4:	08005847 	.word	0x08005847
 80057c8:	08005847 	.word	0x08005847
 80057cc:	08005847 	.word	0x08005847
 80057d0:	08005847 	.word	0x08005847
 80057d4:	08005847 	.word	0x08005847
 80057d8:	08005839 	.word	0x08005839
 80057dc:	2b40      	cmp	r3, #64	@ 0x40
 80057de:	d02e      	beq.n	800583e <UART_SetConfig+0xa36>
 80057e0:	e031      	b.n	8005846 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e2:	f7fd fc7d 	bl	80030e0 <HAL_RCC_GetPCLK1Freq>
 80057e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057e8:	e033      	b.n	8005852 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ea:	f7fd fc8f 	bl	800310c <HAL_RCC_GetPCLK2Freq>
 80057ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057f0:	e02f      	b.n	8005852 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fd fcb4 	bl	8003164 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005800:	e027      	b.n	8005852 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005802:	f107 0318 	add.w	r3, r7, #24
 8005806:	4618      	mov	r0, r3
 8005808:	f7fd fe00 	bl	800340c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005810:	e01f      	b.n	8005852 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005812:	4b2d      	ldr	r3, [pc, #180]	@ (80058c8 <UART_SetConfig+0xac0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800581e:	4b2a      	ldr	r3, [pc, #168]	@ (80058c8 <UART_SetConfig+0xac0>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	08db      	lsrs	r3, r3, #3
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	4a28      	ldr	r2, [pc, #160]	@ (80058cc <UART_SetConfig+0xac4>)
 800582a:	fa22 f303 	lsr.w	r3, r2, r3
 800582e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005830:	e00f      	b.n	8005852 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005832:	4b26      	ldr	r3, [pc, #152]	@ (80058cc <UART_SetConfig+0xac4>)
 8005834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005836:	e00c      	b.n	8005852 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005838:	4b25      	ldr	r3, [pc, #148]	@ (80058d0 <UART_SetConfig+0xac8>)
 800583a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800583c:	e009      	b.n	8005852 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005844:	e005      	b.n	8005852 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005850:	bf00      	nop
    }

    if (pclk != 0U)
 8005852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d021      	beq.n	800589c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	4a1d      	ldr	r2, [pc, #116]	@ (80058d4 <UART_SetConfig+0xacc>)
 800585e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005862:	461a      	mov	r2, r3
 8005864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005866:	fbb3 f2f2 	udiv	r2, r3, r2
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	085b      	lsrs	r3, r3, #1
 8005870:	441a      	add	r2, r3
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	fbb2 f3f3 	udiv	r3, r2, r3
 800587a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800587c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587e:	2b0f      	cmp	r3, #15
 8005880:	d909      	bls.n	8005896 <UART_SetConfig+0xa8e>
 8005882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005888:	d205      	bcs.n	8005896 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800588a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588c:	b29a      	uxth	r2, r3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60da      	str	r2, [r3, #12]
 8005894:	e002      	b.n	800589c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2201      	movs	r2, #1
 80058a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2200      	movs	r2, #0
 80058b0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2200      	movs	r2, #0
 80058b6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80058b8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3748      	adds	r7, #72	@ 0x48
 80058c0:	46bd      	mov	sp, r7
 80058c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058c6:	bf00      	nop
 80058c8:	58024400 	.word	0x58024400
 80058cc:	03d09000 	.word	0x03d09000
 80058d0:	003d0900 	.word	0x003d0900
 80058d4:	08006bc8 	.word	0x08006bc8

080058d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01a      	beq.n	80059ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059d6:	d10a      	bne.n	80059ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]
  }
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b098      	sub	sp, #96	@ 0x60
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a2c:	f7fb ff7c 	bl	8001928 <HAL_GetTick>
 8005a30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d12f      	bne.n	8005aa0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f88e 	bl	8005b70 <UART_WaitOnFlagUntilTimeout>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d022      	beq.n	8005aa0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a80:	e841 2300 	strex	r3, r2, [r1]
 8005a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e6      	bne.n	8005a5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e063      	b.n	8005b68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d149      	bne.n	8005b42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f857 	bl	8005b70 <UART_WaitOnFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d03c      	beq.n	8005b42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ae6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ae8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005aec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e6      	bne.n	8005ac8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3308      	adds	r3, #8
 8005b00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3308      	adds	r3, #8
 8005b18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b1a:	61fa      	str	r2, [r7, #28]
 8005b1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	69b9      	ldr	r1, [r7, #24]
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	617b      	str	r3, [r7, #20]
   return(result);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e5      	bne.n	8005afa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e012      	b.n	8005b68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3758      	adds	r7, #88	@ 0x58
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b80:	e04f      	b.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d04b      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8a:	f7fb fecd 	bl	8001928 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d302      	bcc.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e04e      	b.n	8005c42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d037      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b80      	cmp	r3, #128	@ 0x80
 8005bb6:	d034      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b40      	cmp	r3, #64	@ 0x40
 8005bbc:	d031      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d110      	bne.n	8005bee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2208      	movs	r2, #8
 8005bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f839 	bl	8005c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2208      	movs	r2, #8
 8005bde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e029      	b.n	8005c42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bfc:	d111      	bne.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f81f 	bl	8005c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e00f      	b.n	8005c42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	bf0c      	ite	eq
 8005c32:	2301      	moveq	r3, #1
 8005c34:	2300      	movne	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d0a0      	beq.n	8005b82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b095      	sub	sp, #84	@ 0x54
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c72:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c74:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e6      	bne.n	8005c54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	4b1e      	ldr	r3, [pc, #120]	@ (8005d14 <UART_EndRxTransfer+0xc8>)
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ca6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e5      	bne.n	8005c86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d118      	bne.n	8005cf4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f023 0310 	bic.w	r3, r3, #16
 8005cd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6979      	ldr	r1, [r7, #20]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	613b      	str	r3, [r7, #16]
   return(result);
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e6      	bne.n	8005cc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d08:	bf00      	nop
 8005d0a:	3754      	adds	r7, #84	@ 0x54
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	effffffe 	.word	0xeffffffe

08005d18 <std>:
 8005d18:	2300      	movs	r3, #0
 8005d1a:	b510      	push	{r4, lr}
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d26:	6083      	str	r3, [r0, #8]
 8005d28:	8181      	strh	r1, [r0, #12]
 8005d2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d2c:	81c2      	strh	r2, [r0, #14]
 8005d2e:	6183      	str	r3, [r0, #24]
 8005d30:	4619      	mov	r1, r3
 8005d32:	2208      	movs	r2, #8
 8005d34:	305c      	adds	r0, #92	@ 0x5c
 8005d36:	f000 f906 	bl	8005f46 <memset>
 8005d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d70 <std+0x58>)
 8005d3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d74 <std+0x5c>)
 8005d40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d42:	4b0d      	ldr	r3, [pc, #52]	@ (8005d78 <std+0x60>)
 8005d44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d46:	4b0d      	ldr	r3, [pc, #52]	@ (8005d7c <std+0x64>)
 8005d48:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d80 <std+0x68>)
 8005d4c:	6224      	str	r4, [r4, #32]
 8005d4e:	429c      	cmp	r4, r3
 8005d50:	d006      	beq.n	8005d60 <std+0x48>
 8005d52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d56:	4294      	cmp	r4, r2
 8005d58:	d002      	beq.n	8005d60 <std+0x48>
 8005d5a:	33d0      	adds	r3, #208	@ 0xd0
 8005d5c:	429c      	cmp	r4, r3
 8005d5e:	d105      	bne.n	8005d6c <std+0x54>
 8005d60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d68:	f000 b966 	b.w	8006038 <__retarget_lock_init_recursive>
 8005d6c:	bd10      	pop	{r4, pc}
 8005d6e:	bf00      	nop
 8005d70:	08005ec1 	.word	0x08005ec1
 8005d74:	08005ee3 	.word	0x08005ee3
 8005d78:	08005f1b 	.word	0x08005f1b
 8005d7c:	08005f3f 	.word	0x08005f3f
 8005d80:	24000244 	.word	0x24000244

08005d84 <stdio_exit_handler>:
 8005d84:	4a02      	ldr	r2, [pc, #8]	@ (8005d90 <stdio_exit_handler+0xc>)
 8005d86:	4903      	ldr	r1, [pc, #12]	@ (8005d94 <stdio_exit_handler+0x10>)
 8005d88:	4803      	ldr	r0, [pc, #12]	@ (8005d98 <stdio_exit_handler+0x14>)
 8005d8a:	f000 b869 	b.w	8005e60 <_fwalk_sglue>
 8005d8e:	bf00      	nop
 8005d90:	2400002c 	.word	0x2400002c
 8005d94:	080068d9 	.word	0x080068d9
 8005d98:	2400003c 	.word	0x2400003c

08005d9c <cleanup_stdio>:
 8005d9c:	6841      	ldr	r1, [r0, #4]
 8005d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd0 <cleanup_stdio+0x34>)
 8005da0:	4299      	cmp	r1, r3
 8005da2:	b510      	push	{r4, lr}
 8005da4:	4604      	mov	r4, r0
 8005da6:	d001      	beq.n	8005dac <cleanup_stdio+0x10>
 8005da8:	f000 fd96 	bl	80068d8 <_fflush_r>
 8005dac:	68a1      	ldr	r1, [r4, #8]
 8005dae:	4b09      	ldr	r3, [pc, #36]	@ (8005dd4 <cleanup_stdio+0x38>)
 8005db0:	4299      	cmp	r1, r3
 8005db2:	d002      	beq.n	8005dba <cleanup_stdio+0x1e>
 8005db4:	4620      	mov	r0, r4
 8005db6:	f000 fd8f 	bl	80068d8 <_fflush_r>
 8005dba:	68e1      	ldr	r1, [r4, #12]
 8005dbc:	4b06      	ldr	r3, [pc, #24]	@ (8005dd8 <cleanup_stdio+0x3c>)
 8005dbe:	4299      	cmp	r1, r3
 8005dc0:	d004      	beq.n	8005dcc <cleanup_stdio+0x30>
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc8:	f000 bd86 	b.w	80068d8 <_fflush_r>
 8005dcc:	bd10      	pop	{r4, pc}
 8005dce:	bf00      	nop
 8005dd0:	24000244 	.word	0x24000244
 8005dd4:	240002ac 	.word	0x240002ac
 8005dd8:	24000314 	.word	0x24000314

08005ddc <global_stdio_init.part.0>:
 8005ddc:	b510      	push	{r4, lr}
 8005dde:	4b0b      	ldr	r3, [pc, #44]	@ (8005e0c <global_stdio_init.part.0+0x30>)
 8005de0:	4c0b      	ldr	r4, [pc, #44]	@ (8005e10 <global_stdio_init.part.0+0x34>)
 8005de2:	4a0c      	ldr	r2, [pc, #48]	@ (8005e14 <global_stdio_init.part.0+0x38>)
 8005de4:	601a      	str	r2, [r3, #0]
 8005de6:	4620      	mov	r0, r4
 8005de8:	2200      	movs	r2, #0
 8005dea:	2104      	movs	r1, #4
 8005dec:	f7ff ff94 	bl	8005d18 <std>
 8005df0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005df4:	2201      	movs	r2, #1
 8005df6:	2109      	movs	r1, #9
 8005df8:	f7ff ff8e 	bl	8005d18 <std>
 8005dfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e00:	2202      	movs	r2, #2
 8005e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e06:	2112      	movs	r1, #18
 8005e08:	f7ff bf86 	b.w	8005d18 <std>
 8005e0c:	2400037c 	.word	0x2400037c
 8005e10:	24000244 	.word	0x24000244
 8005e14:	08005d85 	.word	0x08005d85

08005e18 <__sfp_lock_acquire>:
 8005e18:	4801      	ldr	r0, [pc, #4]	@ (8005e20 <__sfp_lock_acquire+0x8>)
 8005e1a:	f000 b90e 	b.w	800603a <__retarget_lock_acquire_recursive>
 8005e1e:	bf00      	nop
 8005e20:	24000385 	.word	0x24000385

08005e24 <__sfp_lock_release>:
 8005e24:	4801      	ldr	r0, [pc, #4]	@ (8005e2c <__sfp_lock_release+0x8>)
 8005e26:	f000 b909 	b.w	800603c <__retarget_lock_release_recursive>
 8005e2a:	bf00      	nop
 8005e2c:	24000385 	.word	0x24000385

08005e30 <__sinit>:
 8005e30:	b510      	push	{r4, lr}
 8005e32:	4604      	mov	r4, r0
 8005e34:	f7ff fff0 	bl	8005e18 <__sfp_lock_acquire>
 8005e38:	6a23      	ldr	r3, [r4, #32]
 8005e3a:	b11b      	cbz	r3, 8005e44 <__sinit+0x14>
 8005e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e40:	f7ff bff0 	b.w	8005e24 <__sfp_lock_release>
 8005e44:	4b04      	ldr	r3, [pc, #16]	@ (8005e58 <__sinit+0x28>)
 8005e46:	6223      	str	r3, [r4, #32]
 8005e48:	4b04      	ldr	r3, [pc, #16]	@ (8005e5c <__sinit+0x2c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1f5      	bne.n	8005e3c <__sinit+0xc>
 8005e50:	f7ff ffc4 	bl	8005ddc <global_stdio_init.part.0>
 8005e54:	e7f2      	b.n	8005e3c <__sinit+0xc>
 8005e56:	bf00      	nop
 8005e58:	08005d9d 	.word	0x08005d9d
 8005e5c:	2400037c 	.word	0x2400037c

08005e60 <_fwalk_sglue>:
 8005e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e64:	4607      	mov	r7, r0
 8005e66:	4688      	mov	r8, r1
 8005e68:	4614      	mov	r4, r2
 8005e6a:	2600      	movs	r6, #0
 8005e6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e70:	f1b9 0901 	subs.w	r9, r9, #1
 8005e74:	d505      	bpl.n	8005e82 <_fwalk_sglue+0x22>
 8005e76:	6824      	ldr	r4, [r4, #0]
 8005e78:	2c00      	cmp	r4, #0
 8005e7a:	d1f7      	bne.n	8005e6c <_fwalk_sglue+0xc>
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e82:	89ab      	ldrh	r3, [r5, #12]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d907      	bls.n	8005e98 <_fwalk_sglue+0x38>
 8005e88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	d003      	beq.n	8005e98 <_fwalk_sglue+0x38>
 8005e90:	4629      	mov	r1, r5
 8005e92:	4638      	mov	r0, r7
 8005e94:	47c0      	blx	r8
 8005e96:	4306      	orrs	r6, r0
 8005e98:	3568      	adds	r5, #104	@ 0x68
 8005e9a:	e7e9      	b.n	8005e70 <_fwalk_sglue+0x10>

08005e9c <iprintf>:
 8005e9c:	b40f      	push	{r0, r1, r2, r3}
 8005e9e:	b507      	push	{r0, r1, r2, lr}
 8005ea0:	4906      	ldr	r1, [pc, #24]	@ (8005ebc <iprintf+0x20>)
 8005ea2:	ab04      	add	r3, sp, #16
 8005ea4:	6808      	ldr	r0, [r1, #0]
 8005ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eaa:	6881      	ldr	r1, [r0, #8]
 8005eac:	9301      	str	r3, [sp, #4]
 8005eae:	f000 f9e9 	bl	8006284 <_vfiprintf_r>
 8005eb2:	b003      	add	sp, #12
 8005eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005eb8:	b004      	add	sp, #16
 8005eba:	4770      	bx	lr
 8005ebc:	24000038 	.word	0x24000038

08005ec0 <__sread>:
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec8:	f000 f868 	bl	8005f9c <_read_r>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	bfab      	itete	ge
 8005ed0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8005ed4:	181b      	addge	r3, r3, r0
 8005ed6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005eda:	bfac      	ite	ge
 8005edc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ede:	81a3      	strhlt	r3, [r4, #12]
 8005ee0:	bd10      	pop	{r4, pc}

08005ee2 <__swrite>:
 8005ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee6:	461f      	mov	r7, r3
 8005ee8:	898b      	ldrh	r3, [r1, #12]
 8005eea:	05db      	lsls	r3, r3, #23
 8005eec:	4605      	mov	r5, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	4616      	mov	r6, r2
 8005ef2:	d505      	bpl.n	8005f00 <__swrite+0x1e>
 8005ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef8:	2302      	movs	r3, #2
 8005efa:	2200      	movs	r2, #0
 8005efc:	f000 f83c 	bl	8005f78 <_lseek_r>
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f0a:	81a3      	strh	r3, [r4, #12]
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	463b      	mov	r3, r7
 8005f10:	4628      	mov	r0, r5
 8005f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f16:	f000 b853 	b.w	8005fc0 <_write_r>

08005f1a <__sseek>:
 8005f1a:	b510      	push	{r4, lr}
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f22:	f000 f829 	bl	8005f78 <_lseek_r>
 8005f26:	1c43      	adds	r3, r0, #1
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	bf15      	itete	ne
 8005f2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f36:	81a3      	strheq	r3, [r4, #12]
 8005f38:	bf18      	it	ne
 8005f3a:	81a3      	strhne	r3, [r4, #12]
 8005f3c:	bd10      	pop	{r4, pc}

08005f3e <__sclose>:
 8005f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f42:	f000 b809 	b.w	8005f58 <_close_r>

08005f46 <memset>:
 8005f46:	4402      	add	r2, r0
 8005f48:	4603      	mov	r3, r0
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d100      	bne.n	8005f50 <memset+0xa>
 8005f4e:	4770      	bx	lr
 8005f50:	f803 1b01 	strb.w	r1, [r3], #1
 8005f54:	e7f9      	b.n	8005f4a <memset+0x4>
	...

08005f58 <_close_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4d06      	ldr	r5, [pc, #24]	@ (8005f74 <_close_r+0x1c>)
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	4604      	mov	r4, r0
 8005f60:	4608      	mov	r0, r1
 8005f62:	602b      	str	r3, [r5, #0]
 8005f64:	f7fb f997 	bl	8001296 <_close>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	d102      	bne.n	8005f72 <_close_r+0x1a>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	b103      	cbz	r3, 8005f72 <_close_r+0x1a>
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	bd38      	pop	{r3, r4, r5, pc}
 8005f74:	24000380 	.word	0x24000380

08005f78 <_lseek_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4d07      	ldr	r5, [pc, #28]	@ (8005f98 <_lseek_r+0x20>)
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	4608      	mov	r0, r1
 8005f80:	4611      	mov	r1, r2
 8005f82:	2200      	movs	r2, #0
 8005f84:	602a      	str	r2, [r5, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	f7fb f9ac 	bl	80012e4 <_lseek>
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	d102      	bne.n	8005f96 <_lseek_r+0x1e>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	b103      	cbz	r3, 8005f96 <_lseek_r+0x1e>
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	bd38      	pop	{r3, r4, r5, pc}
 8005f98:	24000380 	.word	0x24000380

08005f9c <_read_r>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	4d07      	ldr	r5, [pc, #28]	@ (8005fbc <_read_r+0x20>)
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	4608      	mov	r0, r1
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	602a      	str	r2, [r5, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	f7fb f93a 	bl	8001224 <_read>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d102      	bne.n	8005fba <_read_r+0x1e>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	b103      	cbz	r3, 8005fba <_read_r+0x1e>
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	24000380 	.word	0x24000380

08005fc0 <_write_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	4d07      	ldr	r5, [pc, #28]	@ (8005fe0 <_write_r+0x20>)
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	4608      	mov	r0, r1
 8005fc8:	4611      	mov	r1, r2
 8005fca:	2200      	movs	r2, #0
 8005fcc:	602a      	str	r2, [r5, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f7fb f945 	bl	800125e <_write>
 8005fd4:	1c43      	adds	r3, r0, #1
 8005fd6:	d102      	bne.n	8005fde <_write_r+0x1e>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	b103      	cbz	r3, 8005fde <_write_r+0x1e>
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	24000380 	.word	0x24000380

08005fe4 <__errno>:
 8005fe4:	4b01      	ldr	r3, [pc, #4]	@ (8005fec <__errno+0x8>)
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	24000038 	.word	0x24000038

08005ff0 <__libc_init_array>:
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	4d0d      	ldr	r5, [pc, #52]	@ (8006028 <__libc_init_array+0x38>)
 8005ff4:	4c0d      	ldr	r4, [pc, #52]	@ (800602c <__libc_init_array+0x3c>)
 8005ff6:	1b64      	subs	r4, r4, r5
 8005ff8:	10a4      	asrs	r4, r4, #2
 8005ffa:	2600      	movs	r6, #0
 8005ffc:	42a6      	cmp	r6, r4
 8005ffe:	d109      	bne.n	8006014 <__libc_init_array+0x24>
 8006000:	4d0b      	ldr	r5, [pc, #44]	@ (8006030 <__libc_init_array+0x40>)
 8006002:	4c0c      	ldr	r4, [pc, #48]	@ (8006034 <__libc_init_array+0x44>)
 8006004:	f000 fdb8 	bl	8006b78 <_init>
 8006008:	1b64      	subs	r4, r4, r5
 800600a:	10a4      	asrs	r4, r4, #2
 800600c:	2600      	movs	r6, #0
 800600e:	42a6      	cmp	r6, r4
 8006010:	d105      	bne.n	800601e <__libc_init_array+0x2e>
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	f855 3b04 	ldr.w	r3, [r5], #4
 8006018:	4798      	blx	r3
 800601a:	3601      	adds	r6, #1
 800601c:	e7ee      	b.n	8005ffc <__libc_init_array+0xc>
 800601e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006022:	4798      	blx	r3
 8006024:	3601      	adds	r6, #1
 8006026:	e7f2      	b.n	800600e <__libc_init_array+0x1e>
 8006028:	08006c1c 	.word	0x08006c1c
 800602c:	08006c1c 	.word	0x08006c1c
 8006030:	08006c1c 	.word	0x08006c1c
 8006034:	08006c20 	.word	0x08006c20

08006038 <__retarget_lock_init_recursive>:
 8006038:	4770      	bx	lr

0800603a <__retarget_lock_acquire_recursive>:
 800603a:	4770      	bx	lr

0800603c <__retarget_lock_release_recursive>:
 800603c:	4770      	bx	lr
	...

08006040 <_free_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4605      	mov	r5, r0
 8006044:	2900      	cmp	r1, #0
 8006046:	d041      	beq.n	80060cc <_free_r+0x8c>
 8006048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800604c:	1f0c      	subs	r4, r1, #4
 800604e:	2b00      	cmp	r3, #0
 8006050:	bfb8      	it	lt
 8006052:	18e4      	addlt	r4, r4, r3
 8006054:	f000 f8e0 	bl	8006218 <__malloc_lock>
 8006058:	4a1d      	ldr	r2, [pc, #116]	@ (80060d0 <_free_r+0x90>)
 800605a:	6813      	ldr	r3, [r2, #0]
 800605c:	b933      	cbnz	r3, 800606c <_free_r+0x2c>
 800605e:	6063      	str	r3, [r4, #4]
 8006060:	6014      	str	r4, [r2, #0]
 8006062:	4628      	mov	r0, r5
 8006064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006068:	f000 b8dc 	b.w	8006224 <__malloc_unlock>
 800606c:	42a3      	cmp	r3, r4
 800606e:	d908      	bls.n	8006082 <_free_r+0x42>
 8006070:	6820      	ldr	r0, [r4, #0]
 8006072:	1821      	adds	r1, r4, r0
 8006074:	428b      	cmp	r3, r1
 8006076:	bf01      	itttt	eq
 8006078:	6819      	ldreq	r1, [r3, #0]
 800607a:	685b      	ldreq	r3, [r3, #4]
 800607c:	1809      	addeq	r1, r1, r0
 800607e:	6021      	streq	r1, [r4, #0]
 8006080:	e7ed      	b.n	800605e <_free_r+0x1e>
 8006082:	461a      	mov	r2, r3
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	b10b      	cbz	r3, 800608c <_free_r+0x4c>
 8006088:	42a3      	cmp	r3, r4
 800608a:	d9fa      	bls.n	8006082 <_free_r+0x42>
 800608c:	6811      	ldr	r1, [r2, #0]
 800608e:	1850      	adds	r0, r2, r1
 8006090:	42a0      	cmp	r0, r4
 8006092:	d10b      	bne.n	80060ac <_free_r+0x6c>
 8006094:	6820      	ldr	r0, [r4, #0]
 8006096:	4401      	add	r1, r0
 8006098:	1850      	adds	r0, r2, r1
 800609a:	4283      	cmp	r3, r0
 800609c:	6011      	str	r1, [r2, #0]
 800609e:	d1e0      	bne.n	8006062 <_free_r+0x22>
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	6053      	str	r3, [r2, #4]
 80060a6:	4408      	add	r0, r1
 80060a8:	6010      	str	r0, [r2, #0]
 80060aa:	e7da      	b.n	8006062 <_free_r+0x22>
 80060ac:	d902      	bls.n	80060b4 <_free_r+0x74>
 80060ae:	230c      	movs	r3, #12
 80060b0:	602b      	str	r3, [r5, #0]
 80060b2:	e7d6      	b.n	8006062 <_free_r+0x22>
 80060b4:	6820      	ldr	r0, [r4, #0]
 80060b6:	1821      	adds	r1, r4, r0
 80060b8:	428b      	cmp	r3, r1
 80060ba:	bf04      	itt	eq
 80060bc:	6819      	ldreq	r1, [r3, #0]
 80060be:	685b      	ldreq	r3, [r3, #4]
 80060c0:	6063      	str	r3, [r4, #4]
 80060c2:	bf04      	itt	eq
 80060c4:	1809      	addeq	r1, r1, r0
 80060c6:	6021      	streq	r1, [r4, #0]
 80060c8:	6054      	str	r4, [r2, #4]
 80060ca:	e7ca      	b.n	8006062 <_free_r+0x22>
 80060cc:	bd38      	pop	{r3, r4, r5, pc}
 80060ce:	bf00      	nop
 80060d0:	2400038c 	.word	0x2400038c

080060d4 <sbrk_aligned>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	4e0f      	ldr	r6, [pc, #60]	@ (8006114 <sbrk_aligned+0x40>)
 80060d8:	460c      	mov	r4, r1
 80060da:	6831      	ldr	r1, [r6, #0]
 80060dc:	4605      	mov	r5, r0
 80060de:	b911      	cbnz	r1, 80060e6 <sbrk_aligned+0x12>
 80060e0:	f000 fcb6 	bl	8006a50 <_sbrk_r>
 80060e4:	6030      	str	r0, [r6, #0]
 80060e6:	4621      	mov	r1, r4
 80060e8:	4628      	mov	r0, r5
 80060ea:	f000 fcb1 	bl	8006a50 <_sbrk_r>
 80060ee:	1c43      	adds	r3, r0, #1
 80060f0:	d103      	bne.n	80060fa <sbrk_aligned+0x26>
 80060f2:	f04f 34ff 	mov.w	r4, #4294967295
 80060f6:	4620      	mov	r0, r4
 80060f8:	bd70      	pop	{r4, r5, r6, pc}
 80060fa:	1cc4      	adds	r4, r0, #3
 80060fc:	f024 0403 	bic.w	r4, r4, #3
 8006100:	42a0      	cmp	r0, r4
 8006102:	d0f8      	beq.n	80060f6 <sbrk_aligned+0x22>
 8006104:	1a21      	subs	r1, r4, r0
 8006106:	4628      	mov	r0, r5
 8006108:	f000 fca2 	bl	8006a50 <_sbrk_r>
 800610c:	3001      	adds	r0, #1
 800610e:	d1f2      	bne.n	80060f6 <sbrk_aligned+0x22>
 8006110:	e7ef      	b.n	80060f2 <sbrk_aligned+0x1e>
 8006112:	bf00      	nop
 8006114:	24000388 	.word	0x24000388

08006118 <_malloc_r>:
 8006118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800611c:	1ccd      	adds	r5, r1, #3
 800611e:	f025 0503 	bic.w	r5, r5, #3
 8006122:	3508      	adds	r5, #8
 8006124:	2d0c      	cmp	r5, #12
 8006126:	bf38      	it	cc
 8006128:	250c      	movcc	r5, #12
 800612a:	2d00      	cmp	r5, #0
 800612c:	4606      	mov	r6, r0
 800612e:	db01      	blt.n	8006134 <_malloc_r+0x1c>
 8006130:	42a9      	cmp	r1, r5
 8006132:	d904      	bls.n	800613e <_malloc_r+0x26>
 8006134:	230c      	movs	r3, #12
 8006136:	6033      	str	r3, [r6, #0]
 8006138:	2000      	movs	r0, #0
 800613a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800613e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006214 <_malloc_r+0xfc>
 8006142:	f000 f869 	bl	8006218 <__malloc_lock>
 8006146:	f8d8 3000 	ldr.w	r3, [r8]
 800614a:	461c      	mov	r4, r3
 800614c:	bb44      	cbnz	r4, 80061a0 <_malloc_r+0x88>
 800614e:	4629      	mov	r1, r5
 8006150:	4630      	mov	r0, r6
 8006152:	f7ff ffbf 	bl	80060d4 <sbrk_aligned>
 8006156:	1c43      	adds	r3, r0, #1
 8006158:	4604      	mov	r4, r0
 800615a:	d158      	bne.n	800620e <_malloc_r+0xf6>
 800615c:	f8d8 4000 	ldr.w	r4, [r8]
 8006160:	4627      	mov	r7, r4
 8006162:	2f00      	cmp	r7, #0
 8006164:	d143      	bne.n	80061ee <_malloc_r+0xd6>
 8006166:	2c00      	cmp	r4, #0
 8006168:	d04b      	beq.n	8006202 <_malloc_r+0xea>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	4639      	mov	r1, r7
 800616e:	4630      	mov	r0, r6
 8006170:	eb04 0903 	add.w	r9, r4, r3
 8006174:	f000 fc6c 	bl	8006a50 <_sbrk_r>
 8006178:	4581      	cmp	r9, r0
 800617a:	d142      	bne.n	8006202 <_malloc_r+0xea>
 800617c:	6821      	ldr	r1, [r4, #0]
 800617e:	1a6d      	subs	r5, r5, r1
 8006180:	4629      	mov	r1, r5
 8006182:	4630      	mov	r0, r6
 8006184:	f7ff ffa6 	bl	80060d4 <sbrk_aligned>
 8006188:	3001      	adds	r0, #1
 800618a:	d03a      	beq.n	8006202 <_malloc_r+0xea>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	442b      	add	r3, r5
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	f8d8 3000 	ldr.w	r3, [r8]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	bb62      	cbnz	r2, 80061f4 <_malloc_r+0xdc>
 800619a:	f8c8 7000 	str.w	r7, [r8]
 800619e:	e00f      	b.n	80061c0 <_malloc_r+0xa8>
 80061a0:	6822      	ldr	r2, [r4, #0]
 80061a2:	1b52      	subs	r2, r2, r5
 80061a4:	d420      	bmi.n	80061e8 <_malloc_r+0xd0>
 80061a6:	2a0b      	cmp	r2, #11
 80061a8:	d917      	bls.n	80061da <_malloc_r+0xc2>
 80061aa:	1961      	adds	r1, r4, r5
 80061ac:	42a3      	cmp	r3, r4
 80061ae:	6025      	str	r5, [r4, #0]
 80061b0:	bf18      	it	ne
 80061b2:	6059      	strne	r1, [r3, #4]
 80061b4:	6863      	ldr	r3, [r4, #4]
 80061b6:	bf08      	it	eq
 80061b8:	f8c8 1000 	streq.w	r1, [r8]
 80061bc:	5162      	str	r2, [r4, r5]
 80061be:	604b      	str	r3, [r1, #4]
 80061c0:	4630      	mov	r0, r6
 80061c2:	f000 f82f 	bl	8006224 <__malloc_unlock>
 80061c6:	f104 000b 	add.w	r0, r4, #11
 80061ca:	1d23      	adds	r3, r4, #4
 80061cc:	f020 0007 	bic.w	r0, r0, #7
 80061d0:	1ac2      	subs	r2, r0, r3
 80061d2:	bf1c      	itt	ne
 80061d4:	1a1b      	subne	r3, r3, r0
 80061d6:	50a3      	strne	r3, [r4, r2]
 80061d8:	e7af      	b.n	800613a <_malloc_r+0x22>
 80061da:	6862      	ldr	r2, [r4, #4]
 80061dc:	42a3      	cmp	r3, r4
 80061de:	bf0c      	ite	eq
 80061e0:	f8c8 2000 	streq.w	r2, [r8]
 80061e4:	605a      	strne	r2, [r3, #4]
 80061e6:	e7eb      	b.n	80061c0 <_malloc_r+0xa8>
 80061e8:	4623      	mov	r3, r4
 80061ea:	6864      	ldr	r4, [r4, #4]
 80061ec:	e7ae      	b.n	800614c <_malloc_r+0x34>
 80061ee:	463c      	mov	r4, r7
 80061f0:	687f      	ldr	r7, [r7, #4]
 80061f2:	e7b6      	b.n	8006162 <_malloc_r+0x4a>
 80061f4:	461a      	mov	r2, r3
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	d1fb      	bne.n	80061f4 <_malloc_r+0xdc>
 80061fc:	2300      	movs	r3, #0
 80061fe:	6053      	str	r3, [r2, #4]
 8006200:	e7de      	b.n	80061c0 <_malloc_r+0xa8>
 8006202:	230c      	movs	r3, #12
 8006204:	6033      	str	r3, [r6, #0]
 8006206:	4630      	mov	r0, r6
 8006208:	f000 f80c 	bl	8006224 <__malloc_unlock>
 800620c:	e794      	b.n	8006138 <_malloc_r+0x20>
 800620e:	6005      	str	r5, [r0, #0]
 8006210:	e7d6      	b.n	80061c0 <_malloc_r+0xa8>
 8006212:	bf00      	nop
 8006214:	2400038c 	.word	0x2400038c

08006218 <__malloc_lock>:
 8006218:	4801      	ldr	r0, [pc, #4]	@ (8006220 <__malloc_lock+0x8>)
 800621a:	f7ff bf0e 	b.w	800603a <__retarget_lock_acquire_recursive>
 800621e:	bf00      	nop
 8006220:	24000384 	.word	0x24000384

08006224 <__malloc_unlock>:
 8006224:	4801      	ldr	r0, [pc, #4]	@ (800622c <__malloc_unlock+0x8>)
 8006226:	f7ff bf09 	b.w	800603c <__retarget_lock_release_recursive>
 800622a:	bf00      	nop
 800622c:	24000384 	.word	0x24000384

08006230 <__sfputc_r>:
 8006230:	6893      	ldr	r3, [r2, #8]
 8006232:	3b01      	subs	r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	b410      	push	{r4}
 8006238:	6093      	str	r3, [r2, #8]
 800623a:	da08      	bge.n	800624e <__sfputc_r+0x1e>
 800623c:	6994      	ldr	r4, [r2, #24]
 800623e:	42a3      	cmp	r3, r4
 8006240:	db01      	blt.n	8006246 <__sfputc_r+0x16>
 8006242:	290a      	cmp	r1, #10
 8006244:	d103      	bne.n	800624e <__sfputc_r+0x1e>
 8006246:	f85d 4b04 	ldr.w	r4, [sp], #4
 800624a:	f000 bb6d 	b.w	8006928 <__swbuf_r>
 800624e:	6813      	ldr	r3, [r2, #0]
 8006250:	1c58      	adds	r0, r3, #1
 8006252:	6010      	str	r0, [r2, #0]
 8006254:	7019      	strb	r1, [r3, #0]
 8006256:	4608      	mov	r0, r1
 8006258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800625c:	4770      	bx	lr

0800625e <__sfputs_r>:
 800625e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006260:	4606      	mov	r6, r0
 8006262:	460f      	mov	r7, r1
 8006264:	4614      	mov	r4, r2
 8006266:	18d5      	adds	r5, r2, r3
 8006268:	42ac      	cmp	r4, r5
 800626a:	d101      	bne.n	8006270 <__sfputs_r+0x12>
 800626c:	2000      	movs	r0, #0
 800626e:	e007      	b.n	8006280 <__sfputs_r+0x22>
 8006270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006274:	463a      	mov	r2, r7
 8006276:	4630      	mov	r0, r6
 8006278:	f7ff ffda 	bl	8006230 <__sfputc_r>
 800627c:	1c43      	adds	r3, r0, #1
 800627e:	d1f3      	bne.n	8006268 <__sfputs_r+0xa>
 8006280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006284 <_vfiprintf_r>:
 8006284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006288:	460d      	mov	r5, r1
 800628a:	b09d      	sub	sp, #116	@ 0x74
 800628c:	4614      	mov	r4, r2
 800628e:	4698      	mov	r8, r3
 8006290:	4606      	mov	r6, r0
 8006292:	b118      	cbz	r0, 800629c <_vfiprintf_r+0x18>
 8006294:	6a03      	ldr	r3, [r0, #32]
 8006296:	b90b      	cbnz	r3, 800629c <_vfiprintf_r+0x18>
 8006298:	f7ff fdca 	bl	8005e30 <__sinit>
 800629c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800629e:	07d9      	lsls	r1, r3, #31
 80062a0:	d405      	bmi.n	80062ae <_vfiprintf_r+0x2a>
 80062a2:	89ab      	ldrh	r3, [r5, #12]
 80062a4:	059a      	lsls	r2, r3, #22
 80062a6:	d402      	bmi.n	80062ae <_vfiprintf_r+0x2a>
 80062a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062aa:	f7ff fec6 	bl	800603a <__retarget_lock_acquire_recursive>
 80062ae:	89ab      	ldrh	r3, [r5, #12]
 80062b0:	071b      	lsls	r3, r3, #28
 80062b2:	d501      	bpl.n	80062b8 <_vfiprintf_r+0x34>
 80062b4:	692b      	ldr	r3, [r5, #16]
 80062b6:	b99b      	cbnz	r3, 80062e0 <_vfiprintf_r+0x5c>
 80062b8:	4629      	mov	r1, r5
 80062ba:	4630      	mov	r0, r6
 80062bc:	f000 fb72 	bl	80069a4 <__swsetup_r>
 80062c0:	b170      	cbz	r0, 80062e0 <_vfiprintf_r+0x5c>
 80062c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062c4:	07dc      	lsls	r4, r3, #31
 80062c6:	d504      	bpl.n	80062d2 <_vfiprintf_r+0x4e>
 80062c8:	f04f 30ff 	mov.w	r0, #4294967295
 80062cc:	b01d      	add	sp, #116	@ 0x74
 80062ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d2:	89ab      	ldrh	r3, [r5, #12]
 80062d4:	0598      	lsls	r0, r3, #22
 80062d6:	d4f7      	bmi.n	80062c8 <_vfiprintf_r+0x44>
 80062d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062da:	f7ff feaf 	bl	800603c <__retarget_lock_release_recursive>
 80062de:	e7f3      	b.n	80062c8 <_vfiprintf_r+0x44>
 80062e0:	2300      	movs	r3, #0
 80062e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80062e4:	2320      	movs	r3, #32
 80062e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80062ee:	2330      	movs	r3, #48	@ 0x30
 80062f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80064a0 <_vfiprintf_r+0x21c>
 80062f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062f8:	f04f 0901 	mov.w	r9, #1
 80062fc:	4623      	mov	r3, r4
 80062fe:	469a      	mov	sl, r3
 8006300:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006304:	b10a      	cbz	r2, 800630a <_vfiprintf_r+0x86>
 8006306:	2a25      	cmp	r2, #37	@ 0x25
 8006308:	d1f9      	bne.n	80062fe <_vfiprintf_r+0x7a>
 800630a:	ebba 0b04 	subs.w	fp, sl, r4
 800630e:	d00b      	beq.n	8006328 <_vfiprintf_r+0xa4>
 8006310:	465b      	mov	r3, fp
 8006312:	4622      	mov	r2, r4
 8006314:	4629      	mov	r1, r5
 8006316:	4630      	mov	r0, r6
 8006318:	f7ff ffa1 	bl	800625e <__sfputs_r>
 800631c:	3001      	adds	r0, #1
 800631e:	f000 80a7 	beq.w	8006470 <_vfiprintf_r+0x1ec>
 8006322:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006324:	445a      	add	r2, fp
 8006326:	9209      	str	r2, [sp, #36]	@ 0x24
 8006328:	f89a 3000 	ldrb.w	r3, [sl]
 800632c:	2b00      	cmp	r3, #0
 800632e:	f000 809f 	beq.w	8006470 <_vfiprintf_r+0x1ec>
 8006332:	2300      	movs	r3, #0
 8006334:	f04f 32ff 	mov.w	r2, #4294967295
 8006338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800633c:	f10a 0a01 	add.w	sl, sl, #1
 8006340:	9304      	str	r3, [sp, #16]
 8006342:	9307      	str	r3, [sp, #28]
 8006344:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006348:	931a      	str	r3, [sp, #104]	@ 0x68
 800634a:	4654      	mov	r4, sl
 800634c:	2205      	movs	r2, #5
 800634e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006352:	4853      	ldr	r0, [pc, #332]	@ (80064a0 <_vfiprintf_r+0x21c>)
 8006354:	f7f9 ffc4 	bl	80002e0 <memchr>
 8006358:	9a04      	ldr	r2, [sp, #16]
 800635a:	b9d8      	cbnz	r0, 8006394 <_vfiprintf_r+0x110>
 800635c:	06d1      	lsls	r1, r2, #27
 800635e:	bf44      	itt	mi
 8006360:	2320      	movmi	r3, #32
 8006362:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006366:	0713      	lsls	r3, r2, #28
 8006368:	bf44      	itt	mi
 800636a:	232b      	movmi	r3, #43	@ 0x2b
 800636c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006370:	f89a 3000 	ldrb.w	r3, [sl]
 8006374:	2b2a      	cmp	r3, #42	@ 0x2a
 8006376:	d015      	beq.n	80063a4 <_vfiprintf_r+0x120>
 8006378:	9a07      	ldr	r2, [sp, #28]
 800637a:	4654      	mov	r4, sl
 800637c:	2000      	movs	r0, #0
 800637e:	f04f 0c0a 	mov.w	ip, #10
 8006382:	4621      	mov	r1, r4
 8006384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006388:	3b30      	subs	r3, #48	@ 0x30
 800638a:	2b09      	cmp	r3, #9
 800638c:	d94b      	bls.n	8006426 <_vfiprintf_r+0x1a2>
 800638e:	b1b0      	cbz	r0, 80063be <_vfiprintf_r+0x13a>
 8006390:	9207      	str	r2, [sp, #28]
 8006392:	e014      	b.n	80063be <_vfiprintf_r+0x13a>
 8006394:	eba0 0308 	sub.w	r3, r0, r8
 8006398:	fa09 f303 	lsl.w	r3, r9, r3
 800639c:	4313      	orrs	r3, r2
 800639e:	9304      	str	r3, [sp, #16]
 80063a0:	46a2      	mov	sl, r4
 80063a2:	e7d2      	b.n	800634a <_vfiprintf_r+0xc6>
 80063a4:	9b03      	ldr	r3, [sp, #12]
 80063a6:	1d19      	adds	r1, r3, #4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	9103      	str	r1, [sp, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bfbb      	ittet	lt
 80063b0:	425b      	neglt	r3, r3
 80063b2:	f042 0202 	orrlt.w	r2, r2, #2
 80063b6:	9307      	strge	r3, [sp, #28]
 80063b8:	9307      	strlt	r3, [sp, #28]
 80063ba:	bfb8      	it	lt
 80063bc:	9204      	strlt	r2, [sp, #16]
 80063be:	7823      	ldrb	r3, [r4, #0]
 80063c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80063c2:	d10a      	bne.n	80063da <_vfiprintf_r+0x156>
 80063c4:	7863      	ldrb	r3, [r4, #1]
 80063c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80063c8:	d132      	bne.n	8006430 <_vfiprintf_r+0x1ac>
 80063ca:	9b03      	ldr	r3, [sp, #12]
 80063cc:	1d1a      	adds	r2, r3, #4
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	9203      	str	r2, [sp, #12]
 80063d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063d6:	3402      	adds	r4, #2
 80063d8:	9305      	str	r3, [sp, #20]
 80063da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80064b0 <_vfiprintf_r+0x22c>
 80063de:	7821      	ldrb	r1, [r4, #0]
 80063e0:	2203      	movs	r2, #3
 80063e2:	4650      	mov	r0, sl
 80063e4:	f7f9 ff7c 	bl	80002e0 <memchr>
 80063e8:	b138      	cbz	r0, 80063fa <_vfiprintf_r+0x176>
 80063ea:	9b04      	ldr	r3, [sp, #16]
 80063ec:	eba0 000a 	sub.w	r0, r0, sl
 80063f0:	2240      	movs	r2, #64	@ 0x40
 80063f2:	4082      	lsls	r2, r0
 80063f4:	4313      	orrs	r3, r2
 80063f6:	3401      	adds	r4, #1
 80063f8:	9304      	str	r3, [sp, #16]
 80063fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063fe:	4829      	ldr	r0, [pc, #164]	@ (80064a4 <_vfiprintf_r+0x220>)
 8006400:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006404:	2206      	movs	r2, #6
 8006406:	f7f9 ff6b 	bl	80002e0 <memchr>
 800640a:	2800      	cmp	r0, #0
 800640c:	d03f      	beq.n	800648e <_vfiprintf_r+0x20a>
 800640e:	4b26      	ldr	r3, [pc, #152]	@ (80064a8 <_vfiprintf_r+0x224>)
 8006410:	bb1b      	cbnz	r3, 800645a <_vfiprintf_r+0x1d6>
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	3307      	adds	r3, #7
 8006416:	f023 0307 	bic.w	r3, r3, #7
 800641a:	3308      	adds	r3, #8
 800641c:	9303      	str	r3, [sp, #12]
 800641e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006420:	443b      	add	r3, r7
 8006422:	9309      	str	r3, [sp, #36]	@ 0x24
 8006424:	e76a      	b.n	80062fc <_vfiprintf_r+0x78>
 8006426:	fb0c 3202 	mla	r2, ip, r2, r3
 800642a:	460c      	mov	r4, r1
 800642c:	2001      	movs	r0, #1
 800642e:	e7a8      	b.n	8006382 <_vfiprintf_r+0xfe>
 8006430:	2300      	movs	r3, #0
 8006432:	3401      	adds	r4, #1
 8006434:	9305      	str	r3, [sp, #20]
 8006436:	4619      	mov	r1, r3
 8006438:	f04f 0c0a 	mov.w	ip, #10
 800643c:	4620      	mov	r0, r4
 800643e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006442:	3a30      	subs	r2, #48	@ 0x30
 8006444:	2a09      	cmp	r2, #9
 8006446:	d903      	bls.n	8006450 <_vfiprintf_r+0x1cc>
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0c6      	beq.n	80063da <_vfiprintf_r+0x156>
 800644c:	9105      	str	r1, [sp, #20]
 800644e:	e7c4      	b.n	80063da <_vfiprintf_r+0x156>
 8006450:	fb0c 2101 	mla	r1, ip, r1, r2
 8006454:	4604      	mov	r4, r0
 8006456:	2301      	movs	r3, #1
 8006458:	e7f0      	b.n	800643c <_vfiprintf_r+0x1b8>
 800645a:	ab03      	add	r3, sp, #12
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	462a      	mov	r2, r5
 8006460:	4b12      	ldr	r3, [pc, #72]	@ (80064ac <_vfiprintf_r+0x228>)
 8006462:	a904      	add	r1, sp, #16
 8006464:	4630      	mov	r0, r6
 8006466:	f3af 8000 	nop.w
 800646a:	4607      	mov	r7, r0
 800646c:	1c78      	adds	r0, r7, #1
 800646e:	d1d6      	bne.n	800641e <_vfiprintf_r+0x19a>
 8006470:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006472:	07d9      	lsls	r1, r3, #31
 8006474:	d405      	bmi.n	8006482 <_vfiprintf_r+0x1fe>
 8006476:	89ab      	ldrh	r3, [r5, #12]
 8006478:	059a      	lsls	r2, r3, #22
 800647a:	d402      	bmi.n	8006482 <_vfiprintf_r+0x1fe>
 800647c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800647e:	f7ff fddd 	bl	800603c <__retarget_lock_release_recursive>
 8006482:	89ab      	ldrh	r3, [r5, #12]
 8006484:	065b      	lsls	r3, r3, #25
 8006486:	f53f af1f 	bmi.w	80062c8 <_vfiprintf_r+0x44>
 800648a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800648c:	e71e      	b.n	80062cc <_vfiprintf_r+0x48>
 800648e:	ab03      	add	r3, sp, #12
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	462a      	mov	r2, r5
 8006494:	4b05      	ldr	r3, [pc, #20]	@ (80064ac <_vfiprintf_r+0x228>)
 8006496:	a904      	add	r1, sp, #16
 8006498:	4630      	mov	r0, r6
 800649a:	f000 f879 	bl	8006590 <_printf_i>
 800649e:	e7e4      	b.n	800646a <_vfiprintf_r+0x1e6>
 80064a0:	08006be0 	.word	0x08006be0
 80064a4:	08006bea 	.word	0x08006bea
 80064a8:	00000000 	.word	0x00000000
 80064ac:	0800625f 	.word	0x0800625f
 80064b0:	08006be6 	.word	0x08006be6

080064b4 <_printf_common>:
 80064b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b8:	4616      	mov	r6, r2
 80064ba:	4698      	mov	r8, r3
 80064bc:	688a      	ldr	r2, [r1, #8]
 80064be:	690b      	ldr	r3, [r1, #16]
 80064c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064c4:	4293      	cmp	r3, r2
 80064c6:	bfb8      	it	lt
 80064c8:	4613      	movlt	r3, r2
 80064ca:	6033      	str	r3, [r6, #0]
 80064cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064d0:	4607      	mov	r7, r0
 80064d2:	460c      	mov	r4, r1
 80064d4:	b10a      	cbz	r2, 80064da <_printf_common+0x26>
 80064d6:	3301      	adds	r3, #1
 80064d8:	6033      	str	r3, [r6, #0]
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	0699      	lsls	r1, r3, #26
 80064de:	bf42      	ittt	mi
 80064e0:	6833      	ldrmi	r3, [r6, #0]
 80064e2:	3302      	addmi	r3, #2
 80064e4:	6033      	strmi	r3, [r6, #0]
 80064e6:	6825      	ldr	r5, [r4, #0]
 80064e8:	f015 0506 	ands.w	r5, r5, #6
 80064ec:	d106      	bne.n	80064fc <_printf_common+0x48>
 80064ee:	f104 0a19 	add.w	sl, r4, #25
 80064f2:	68e3      	ldr	r3, [r4, #12]
 80064f4:	6832      	ldr	r2, [r6, #0]
 80064f6:	1a9b      	subs	r3, r3, r2
 80064f8:	42ab      	cmp	r3, r5
 80064fa:	dc26      	bgt.n	800654a <_printf_common+0x96>
 80064fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006500:	6822      	ldr	r2, [r4, #0]
 8006502:	3b00      	subs	r3, #0
 8006504:	bf18      	it	ne
 8006506:	2301      	movne	r3, #1
 8006508:	0692      	lsls	r2, r2, #26
 800650a:	d42b      	bmi.n	8006564 <_printf_common+0xb0>
 800650c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006510:	4641      	mov	r1, r8
 8006512:	4638      	mov	r0, r7
 8006514:	47c8      	blx	r9
 8006516:	3001      	adds	r0, #1
 8006518:	d01e      	beq.n	8006558 <_printf_common+0xa4>
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	6922      	ldr	r2, [r4, #16]
 800651e:	f003 0306 	and.w	r3, r3, #6
 8006522:	2b04      	cmp	r3, #4
 8006524:	bf02      	ittt	eq
 8006526:	68e5      	ldreq	r5, [r4, #12]
 8006528:	6833      	ldreq	r3, [r6, #0]
 800652a:	1aed      	subeq	r5, r5, r3
 800652c:	68a3      	ldr	r3, [r4, #8]
 800652e:	bf0c      	ite	eq
 8006530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006534:	2500      	movne	r5, #0
 8006536:	4293      	cmp	r3, r2
 8006538:	bfc4      	itt	gt
 800653a:	1a9b      	subgt	r3, r3, r2
 800653c:	18ed      	addgt	r5, r5, r3
 800653e:	2600      	movs	r6, #0
 8006540:	341a      	adds	r4, #26
 8006542:	42b5      	cmp	r5, r6
 8006544:	d11a      	bne.n	800657c <_printf_common+0xc8>
 8006546:	2000      	movs	r0, #0
 8006548:	e008      	b.n	800655c <_printf_common+0xa8>
 800654a:	2301      	movs	r3, #1
 800654c:	4652      	mov	r2, sl
 800654e:	4641      	mov	r1, r8
 8006550:	4638      	mov	r0, r7
 8006552:	47c8      	blx	r9
 8006554:	3001      	adds	r0, #1
 8006556:	d103      	bne.n	8006560 <_printf_common+0xac>
 8006558:	f04f 30ff 	mov.w	r0, #4294967295
 800655c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006560:	3501      	adds	r5, #1
 8006562:	e7c6      	b.n	80064f2 <_printf_common+0x3e>
 8006564:	18e1      	adds	r1, r4, r3
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	2030      	movs	r0, #48	@ 0x30
 800656a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800656e:	4422      	add	r2, r4
 8006570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006578:	3302      	adds	r3, #2
 800657a:	e7c7      	b.n	800650c <_printf_common+0x58>
 800657c:	2301      	movs	r3, #1
 800657e:	4622      	mov	r2, r4
 8006580:	4641      	mov	r1, r8
 8006582:	4638      	mov	r0, r7
 8006584:	47c8      	blx	r9
 8006586:	3001      	adds	r0, #1
 8006588:	d0e6      	beq.n	8006558 <_printf_common+0xa4>
 800658a:	3601      	adds	r6, #1
 800658c:	e7d9      	b.n	8006542 <_printf_common+0x8e>
	...

08006590 <_printf_i>:
 8006590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006594:	7e0f      	ldrb	r7, [r1, #24]
 8006596:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006598:	2f78      	cmp	r7, #120	@ 0x78
 800659a:	4691      	mov	r9, r2
 800659c:	4680      	mov	r8, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	469a      	mov	sl, r3
 80065a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065a6:	d807      	bhi.n	80065b8 <_printf_i+0x28>
 80065a8:	2f62      	cmp	r7, #98	@ 0x62
 80065aa:	d80a      	bhi.n	80065c2 <_printf_i+0x32>
 80065ac:	2f00      	cmp	r7, #0
 80065ae:	f000 80d2 	beq.w	8006756 <_printf_i+0x1c6>
 80065b2:	2f58      	cmp	r7, #88	@ 0x58
 80065b4:	f000 80b9 	beq.w	800672a <_printf_i+0x19a>
 80065b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065c0:	e03a      	b.n	8006638 <_printf_i+0xa8>
 80065c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065c6:	2b15      	cmp	r3, #21
 80065c8:	d8f6      	bhi.n	80065b8 <_printf_i+0x28>
 80065ca:	a101      	add	r1, pc, #4	@ (adr r1, 80065d0 <_printf_i+0x40>)
 80065cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065d0:	08006629 	.word	0x08006629
 80065d4:	0800663d 	.word	0x0800663d
 80065d8:	080065b9 	.word	0x080065b9
 80065dc:	080065b9 	.word	0x080065b9
 80065e0:	080065b9 	.word	0x080065b9
 80065e4:	080065b9 	.word	0x080065b9
 80065e8:	0800663d 	.word	0x0800663d
 80065ec:	080065b9 	.word	0x080065b9
 80065f0:	080065b9 	.word	0x080065b9
 80065f4:	080065b9 	.word	0x080065b9
 80065f8:	080065b9 	.word	0x080065b9
 80065fc:	0800673d 	.word	0x0800673d
 8006600:	08006667 	.word	0x08006667
 8006604:	080066f7 	.word	0x080066f7
 8006608:	080065b9 	.word	0x080065b9
 800660c:	080065b9 	.word	0x080065b9
 8006610:	0800675f 	.word	0x0800675f
 8006614:	080065b9 	.word	0x080065b9
 8006618:	08006667 	.word	0x08006667
 800661c:	080065b9 	.word	0x080065b9
 8006620:	080065b9 	.word	0x080065b9
 8006624:	080066ff 	.word	0x080066ff
 8006628:	6833      	ldr	r3, [r6, #0]
 800662a:	1d1a      	adds	r2, r3, #4
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6032      	str	r2, [r6, #0]
 8006630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006638:	2301      	movs	r3, #1
 800663a:	e09d      	b.n	8006778 <_printf_i+0x1e8>
 800663c:	6833      	ldr	r3, [r6, #0]
 800663e:	6820      	ldr	r0, [r4, #0]
 8006640:	1d19      	adds	r1, r3, #4
 8006642:	6031      	str	r1, [r6, #0]
 8006644:	0606      	lsls	r6, r0, #24
 8006646:	d501      	bpl.n	800664c <_printf_i+0xbc>
 8006648:	681d      	ldr	r5, [r3, #0]
 800664a:	e003      	b.n	8006654 <_printf_i+0xc4>
 800664c:	0645      	lsls	r5, r0, #25
 800664e:	d5fb      	bpl.n	8006648 <_printf_i+0xb8>
 8006650:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006654:	2d00      	cmp	r5, #0
 8006656:	da03      	bge.n	8006660 <_printf_i+0xd0>
 8006658:	232d      	movs	r3, #45	@ 0x2d
 800665a:	426d      	negs	r5, r5
 800665c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006660:	4859      	ldr	r0, [pc, #356]	@ (80067c8 <_printf_i+0x238>)
 8006662:	230a      	movs	r3, #10
 8006664:	e011      	b.n	800668a <_printf_i+0xfa>
 8006666:	6821      	ldr	r1, [r4, #0]
 8006668:	6833      	ldr	r3, [r6, #0]
 800666a:	0608      	lsls	r0, r1, #24
 800666c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006670:	d402      	bmi.n	8006678 <_printf_i+0xe8>
 8006672:	0649      	lsls	r1, r1, #25
 8006674:	bf48      	it	mi
 8006676:	b2ad      	uxthmi	r5, r5
 8006678:	2f6f      	cmp	r7, #111	@ 0x6f
 800667a:	4853      	ldr	r0, [pc, #332]	@ (80067c8 <_printf_i+0x238>)
 800667c:	6033      	str	r3, [r6, #0]
 800667e:	bf14      	ite	ne
 8006680:	230a      	movne	r3, #10
 8006682:	2308      	moveq	r3, #8
 8006684:	2100      	movs	r1, #0
 8006686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800668a:	6866      	ldr	r6, [r4, #4]
 800668c:	60a6      	str	r6, [r4, #8]
 800668e:	2e00      	cmp	r6, #0
 8006690:	bfa2      	ittt	ge
 8006692:	6821      	ldrge	r1, [r4, #0]
 8006694:	f021 0104 	bicge.w	r1, r1, #4
 8006698:	6021      	strge	r1, [r4, #0]
 800669a:	b90d      	cbnz	r5, 80066a0 <_printf_i+0x110>
 800669c:	2e00      	cmp	r6, #0
 800669e:	d04b      	beq.n	8006738 <_printf_i+0x1a8>
 80066a0:	4616      	mov	r6, r2
 80066a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80066a6:	fb03 5711 	mls	r7, r3, r1, r5
 80066aa:	5dc7      	ldrb	r7, [r0, r7]
 80066ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066b0:	462f      	mov	r7, r5
 80066b2:	42bb      	cmp	r3, r7
 80066b4:	460d      	mov	r5, r1
 80066b6:	d9f4      	bls.n	80066a2 <_printf_i+0x112>
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	d10b      	bne.n	80066d4 <_printf_i+0x144>
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	07df      	lsls	r7, r3, #31
 80066c0:	d508      	bpl.n	80066d4 <_printf_i+0x144>
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	6861      	ldr	r1, [r4, #4]
 80066c6:	4299      	cmp	r1, r3
 80066c8:	bfde      	ittt	le
 80066ca:	2330      	movle	r3, #48	@ 0x30
 80066cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066d4:	1b92      	subs	r2, r2, r6
 80066d6:	6122      	str	r2, [r4, #16]
 80066d8:	f8cd a000 	str.w	sl, [sp]
 80066dc:	464b      	mov	r3, r9
 80066de:	aa03      	add	r2, sp, #12
 80066e0:	4621      	mov	r1, r4
 80066e2:	4640      	mov	r0, r8
 80066e4:	f7ff fee6 	bl	80064b4 <_printf_common>
 80066e8:	3001      	adds	r0, #1
 80066ea:	d14a      	bne.n	8006782 <_printf_i+0x1f2>
 80066ec:	f04f 30ff 	mov.w	r0, #4294967295
 80066f0:	b004      	add	sp, #16
 80066f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	f043 0320 	orr.w	r3, r3, #32
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	4833      	ldr	r0, [pc, #204]	@ (80067cc <_printf_i+0x23c>)
 8006700:	2778      	movs	r7, #120	@ 0x78
 8006702:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	6831      	ldr	r1, [r6, #0]
 800670a:	061f      	lsls	r7, r3, #24
 800670c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006710:	d402      	bmi.n	8006718 <_printf_i+0x188>
 8006712:	065f      	lsls	r7, r3, #25
 8006714:	bf48      	it	mi
 8006716:	b2ad      	uxthmi	r5, r5
 8006718:	6031      	str	r1, [r6, #0]
 800671a:	07d9      	lsls	r1, r3, #31
 800671c:	bf44      	itt	mi
 800671e:	f043 0320 	orrmi.w	r3, r3, #32
 8006722:	6023      	strmi	r3, [r4, #0]
 8006724:	b11d      	cbz	r5, 800672e <_printf_i+0x19e>
 8006726:	2310      	movs	r3, #16
 8006728:	e7ac      	b.n	8006684 <_printf_i+0xf4>
 800672a:	4827      	ldr	r0, [pc, #156]	@ (80067c8 <_printf_i+0x238>)
 800672c:	e7e9      	b.n	8006702 <_printf_i+0x172>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	f023 0320 	bic.w	r3, r3, #32
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	e7f6      	b.n	8006726 <_printf_i+0x196>
 8006738:	4616      	mov	r6, r2
 800673a:	e7bd      	b.n	80066b8 <_printf_i+0x128>
 800673c:	6833      	ldr	r3, [r6, #0]
 800673e:	6825      	ldr	r5, [r4, #0]
 8006740:	6961      	ldr	r1, [r4, #20]
 8006742:	1d18      	adds	r0, r3, #4
 8006744:	6030      	str	r0, [r6, #0]
 8006746:	062e      	lsls	r6, r5, #24
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	d501      	bpl.n	8006750 <_printf_i+0x1c0>
 800674c:	6019      	str	r1, [r3, #0]
 800674e:	e002      	b.n	8006756 <_printf_i+0x1c6>
 8006750:	0668      	lsls	r0, r5, #25
 8006752:	d5fb      	bpl.n	800674c <_printf_i+0x1bc>
 8006754:	8019      	strh	r1, [r3, #0]
 8006756:	2300      	movs	r3, #0
 8006758:	6123      	str	r3, [r4, #16]
 800675a:	4616      	mov	r6, r2
 800675c:	e7bc      	b.n	80066d8 <_printf_i+0x148>
 800675e:	6833      	ldr	r3, [r6, #0]
 8006760:	1d1a      	adds	r2, r3, #4
 8006762:	6032      	str	r2, [r6, #0]
 8006764:	681e      	ldr	r6, [r3, #0]
 8006766:	6862      	ldr	r2, [r4, #4]
 8006768:	2100      	movs	r1, #0
 800676a:	4630      	mov	r0, r6
 800676c:	f7f9 fdb8 	bl	80002e0 <memchr>
 8006770:	b108      	cbz	r0, 8006776 <_printf_i+0x1e6>
 8006772:	1b80      	subs	r0, r0, r6
 8006774:	6060      	str	r0, [r4, #4]
 8006776:	6863      	ldr	r3, [r4, #4]
 8006778:	6123      	str	r3, [r4, #16]
 800677a:	2300      	movs	r3, #0
 800677c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006780:	e7aa      	b.n	80066d8 <_printf_i+0x148>
 8006782:	6923      	ldr	r3, [r4, #16]
 8006784:	4632      	mov	r2, r6
 8006786:	4649      	mov	r1, r9
 8006788:	4640      	mov	r0, r8
 800678a:	47d0      	blx	sl
 800678c:	3001      	adds	r0, #1
 800678e:	d0ad      	beq.n	80066ec <_printf_i+0x15c>
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	079b      	lsls	r3, r3, #30
 8006794:	d413      	bmi.n	80067be <_printf_i+0x22e>
 8006796:	68e0      	ldr	r0, [r4, #12]
 8006798:	9b03      	ldr	r3, [sp, #12]
 800679a:	4298      	cmp	r0, r3
 800679c:	bfb8      	it	lt
 800679e:	4618      	movlt	r0, r3
 80067a0:	e7a6      	b.n	80066f0 <_printf_i+0x160>
 80067a2:	2301      	movs	r3, #1
 80067a4:	4632      	mov	r2, r6
 80067a6:	4649      	mov	r1, r9
 80067a8:	4640      	mov	r0, r8
 80067aa:	47d0      	blx	sl
 80067ac:	3001      	adds	r0, #1
 80067ae:	d09d      	beq.n	80066ec <_printf_i+0x15c>
 80067b0:	3501      	adds	r5, #1
 80067b2:	68e3      	ldr	r3, [r4, #12]
 80067b4:	9903      	ldr	r1, [sp, #12]
 80067b6:	1a5b      	subs	r3, r3, r1
 80067b8:	42ab      	cmp	r3, r5
 80067ba:	dcf2      	bgt.n	80067a2 <_printf_i+0x212>
 80067bc:	e7eb      	b.n	8006796 <_printf_i+0x206>
 80067be:	2500      	movs	r5, #0
 80067c0:	f104 0619 	add.w	r6, r4, #25
 80067c4:	e7f5      	b.n	80067b2 <_printf_i+0x222>
 80067c6:	bf00      	nop
 80067c8:	08006bf1 	.word	0x08006bf1
 80067cc:	08006c02 	.word	0x08006c02

080067d0 <__sflush_r>:
 80067d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d8:	0716      	lsls	r6, r2, #28
 80067da:	4605      	mov	r5, r0
 80067dc:	460c      	mov	r4, r1
 80067de:	d454      	bmi.n	800688a <__sflush_r+0xba>
 80067e0:	684b      	ldr	r3, [r1, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	dc02      	bgt.n	80067ec <__sflush_r+0x1c>
 80067e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	dd48      	ble.n	800687e <__sflush_r+0xae>
 80067ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067ee:	2e00      	cmp	r6, #0
 80067f0:	d045      	beq.n	800687e <__sflush_r+0xae>
 80067f2:	2300      	movs	r3, #0
 80067f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80067f8:	682f      	ldr	r7, [r5, #0]
 80067fa:	6a21      	ldr	r1, [r4, #32]
 80067fc:	602b      	str	r3, [r5, #0]
 80067fe:	d030      	beq.n	8006862 <__sflush_r+0x92>
 8006800:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	0759      	lsls	r1, r3, #29
 8006806:	d505      	bpl.n	8006814 <__sflush_r+0x44>
 8006808:	6863      	ldr	r3, [r4, #4]
 800680a:	1ad2      	subs	r2, r2, r3
 800680c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800680e:	b10b      	cbz	r3, 8006814 <__sflush_r+0x44>
 8006810:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006812:	1ad2      	subs	r2, r2, r3
 8006814:	2300      	movs	r3, #0
 8006816:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006818:	6a21      	ldr	r1, [r4, #32]
 800681a:	4628      	mov	r0, r5
 800681c:	47b0      	blx	r6
 800681e:	1c43      	adds	r3, r0, #1
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	d106      	bne.n	8006832 <__sflush_r+0x62>
 8006824:	6829      	ldr	r1, [r5, #0]
 8006826:	291d      	cmp	r1, #29
 8006828:	d82b      	bhi.n	8006882 <__sflush_r+0xb2>
 800682a:	4a2a      	ldr	r2, [pc, #168]	@ (80068d4 <__sflush_r+0x104>)
 800682c:	410a      	asrs	r2, r1
 800682e:	07d6      	lsls	r6, r2, #31
 8006830:	d427      	bmi.n	8006882 <__sflush_r+0xb2>
 8006832:	2200      	movs	r2, #0
 8006834:	6062      	str	r2, [r4, #4]
 8006836:	04d9      	lsls	r1, r3, #19
 8006838:	6922      	ldr	r2, [r4, #16]
 800683a:	6022      	str	r2, [r4, #0]
 800683c:	d504      	bpl.n	8006848 <__sflush_r+0x78>
 800683e:	1c42      	adds	r2, r0, #1
 8006840:	d101      	bne.n	8006846 <__sflush_r+0x76>
 8006842:	682b      	ldr	r3, [r5, #0]
 8006844:	b903      	cbnz	r3, 8006848 <__sflush_r+0x78>
 8006846:	6560      	str	r0, [r4, #84]	@ 0x54
 8006848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800684a:	602f      	str	r7, [r5, #0]
 800684c:	b1b9      	cbz	r1, 800687e <__sflush_r+0xae>
 800684e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006852:	4299      	cmp	r1, r3
 8006854:	d002      	beq.n	800685c <__sflush_r+0x8c>
 8006856:	4628      	mov	r0, r5
 8006858:	f7ff fbf2 	bl	8006040 <_free_r>
 800685c:	2300      	movs	r3, #0
 800685e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006860:	e00d      	b.n	800687e <__sflush_r+0xae>
 8006862:	2301      	movs	r3, #1
 8006864:	4628      	mov	r0, r5
 8006866:	47b0      	blx	r6
 8006868:	4602      	mov	r2, r0
 800686a:	1c50      	adds	r0, r2, #1
 800686c:	d1c9      	bne.n	8006802 <__sflush_r+0x32>
 800686e:	682b      	ldr	r3, [r5, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d0c6      	beq.n	8006802 <__sflush_r+0x32>
 8006874:	2b1d      	cmp	r3, #29
 8006876:	d001      	beq.n	800687c <__sflush_r+0xac>
 8006878:	2b16      	cmp	r3, #22
 800687a:	d11e      	bne.n	80068ba <__sflush_r+0xea>
 800687c:	602f      	str	r7, [r5, #0]
 800687e:	2000      	movs	r0, #0
 8006880:	e022      	b.n	80068c8 <__sflush_r+0xf8>
 8006882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006886:	b21b      	sxth	r3, r3
 8006888:	e01b      	b.n	80068c2 <__sflush_r+0xf2>
 800688a:	690f      	ldr	r7, [r1, #16]
 800688c:	2f00      	cmp	r7, #0
 800688e:	d0f6      	beq.n	800687e <__sflush_r+0xae>
 8006890:	0793      	lsls	r3, r2, #30
 8006892:	680e      	ldr	r6, [r1, #0]
 8006894:	bf08      	it	eq
 8006896:	694b      	ldreq	r3, [r1, #20]
 8006898:	600f      	str	r7, [r1, #0]
 800689a:	bf18      	it	ne
 800689c:	2300      	movne	r3, #0
 800689e:	eba6 0807 	sub.w	r8, r6, r7
 80068a2:	608b      	str	r3, [r1, #8]
 80068a4:	f1b8 0f00 	cmp.w	r8, #0
 80068a8:	dde9      	ble.n	800687e <__sflush_r+0xae>
 80068aa:	6a21      	ldr	r1, [r4, #32]
 80068ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80068ae:	4643      	mov	r3, r8
 80068b0:	463a      	mov	r2, r7
 80068b2:	4628      	mov	r0, r5
 80068b4:	47b0      	blx	r6
 80068b6:	2800      	cmp	r0, #0
 80068b8:	dc08      	bgt.n	80068cc <__sflush_r+0xfc>
 80068ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068c2:	81a3      	strh	r3, [r4, #12]
 80068c4:	f04f 30ff 	mov.w	r0, #4294967295
 80068c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068cc:	4407      	add	r7, r0
 80068ce:	eba8 0800 	sub.w	r8, r8, r0
 80068d2:	e7e7      	b.n	80068a4 <__sflush_r+0xd4>
 80068d4:	dfbffffe 	.word	0xdfbffffe

080068d8 <_fflush_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	690b      	ldr	r3, [r1, #16]
 80068dc:	4605      	mov	r5, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	b913      	cbnz	r3, 80068e8 <_fflush_r+0x10>
 80068e2:	2500      	movs	r5, #0
 80068e4:	4628      	mov	r0, r5
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	b118      	cbz	r0, 80068f2 <_fflush_r+0x1a>
 80068ea:	6a03      	ldr	r3, [r0, #32]
 80068ec:	b90b      	cbnz	r3, 80068f2 <_fflush_r+0x1a>
 80068ee:	f7ff fa9f 	bl	8005e30 <__sinit>
 80068f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d0f3      	beq.n	80068e2 <_fflush_r+0xa>
 80068fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80068fc:	07d0      	lsls	r0, r2, #31
 80068fe:	d404      	bmi.n	800690a <_fflush_r+0x32>
 8006900:	0599      	lsls	r1, r3, #22
 8006902:	d402      	bmi.n	800690a <_fflush_r+0x32>
 8006904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006906:	f7ff fb98 	bl	800603a <__retarget_lock_acquire_recursive>
 800690a:	4628      	mov	r0, r5
 800690c:	4621      	mov	r1, r4
 800690e:	f7ff ff5f 	bl	80067d0 <__sflush_r>
 8006912:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006914:	07da      	lsls	r2, r3, #31
 8006916:	4605      	mov	r5, r0
 8006918:	d4e4      	bmi.n	80068e4 <_fflush_r+0xc>
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	059b      	lsls	r3, r3, #22
 800691e:	d4e1      	bmi.n	80068e4 <_fflush_r+0xc>
 8006920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006922:	f7ff fb8b 	bl	800603c <__retarget_lock_release_recursive>
 8006926:	e7dd      	b.n	80068e4 <_fflush_r+0xc>

08006928 <__swbuf_r>:
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	460e      	mov	r6, r1
 800692c:	4614      	mov	r4, r2
 800692e:	4605      	mov	r5, r0
 8006930:	b118      	cbz	r0, 800693a <__swbuf_r+0x12>
 8006932:	6a03      	ldr	r3, [r0, #32]
 8006934:	b90b      	cbnz	r3, 800693a <__swbuf_r+0x12>
 8006936:	f7ff fa7b 	bl	8005e30 <__sinit>
 800693a:	69a3      	ldr	r3, [r4, #24]
 800693c:	60a3      	str	r3, [r4, #8]
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	071a      	lsls	r2, r3, #28
 8006942:	d501      	bpl.n	8006948 <__swbuf_r+0x20>
 8006944:	6923      	ldr	r3, [r4, #16]
 8006946:	b943      	cbnz	r3, 800695a <__swbuf_r+0x32>
 8006948:	4621      	mov	r1, r4
 800694a:	4628      	mov	r0, r5
 800694c:	f000 f82a 	bl	80069a4 <__swsetup_r>
 8006950:	b118      	cbz	r0, 800695a <__swbuf_r+0x32>
 8006952:	f04f 37ff 	mov.w	r7, #4294967295
 8006956:	4638      	mov	r0, r7
 8006958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	6922      	ldr	r2, [r4, #16]
 800695e:	1a98      	subs	r0, r3, r2
 8006960:	6963      	ldr	r3, [r4, #20]
 8006962:	b2f6      	uxtb	r6, r6
 8006964:	4283      	cmp	r3, r0
 8006966:	4637      	mov	r7, r6
 8006968:	dc05      	bgt.n	8006976 <__swbuf_r+0x4e>
 800696a:	4621      	mov	r1, r4
 800696c:	4628      	mov	r0, r5
 800696e:	f7ff ffb3 	bl	80068d8 <_fflush_r>
 8006972:	2800      	cmp	r0, #0
 8006974:	d1ed      	bne.n	8006952 <__swbuf_r+0x2a>
 8006976:	68a3      	ldr	r3, [r4, #8]
 8006978:	3b01      	subs	r3, #1
 800697a:	60a3      	str	r3, [r4, #8]
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	6022      	str	r2, [r4, #0]
 8006982:	701e      	strb	r6, [r3, #0]
 8006984:	6962      	ldr	r2, [r4, #20]
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	429a      	cmp	r2, r3
 800698a:	d004      	beq.n	8006996 <__swbuf_r+0x6e>
 800698c:	89a3      	ldrh	r3, [r4, #12]
 800698e:	07db      	lsls	r3, r3, #31
 8006990:	d5e1      	bpl.n	8006956 <__swbuf_r+0x2e>
 8006992:	2e0a      	cmp	r6, #10
 8006994:	d1df      	bne.n	8006956 <__swbuf_r+0x2e>
 8006996:	4621      	mov	r1, r4
 8006998:	4628      	mov	r0, r5
 800699a:	f7ff ff9d 	bl	80068d8 <_fflush_r>
 800699e:	2800      	cmp	r0, #0
 80069a0:	d0d9      	beq.n	8006956 <__swbuf_r+0x2e>
 80069a2:	e7d6      	b.n	8006952 <__swbuf_r+0x2a>

080069a4 <__swsetup_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	4b29      	ldr	r3, [pc, #164]	@ (8006a4c <__swsetup_r+0xa8>)
 80069a8:	4605      	mov	r5, r0
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	460c      	mov	r4, r1
 80069ae:	b118      	cbz	r0, 80069b8 <__swsetup_r+0x14>
 80069b0:	6a03      	ldr	r3, [r0, #32]
 80069b2:	b90b      	cbnz	r3, 80069b8 <__swsetup_r+0x14>
 80069b4:	f7ff fa3c 	bl	8005e30 <__sinit>
 80069b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069bc:	0719      	lsls	r1, r3, #28
 80069be:	d422      	bmi.n	8006a06 <__swsetup_r+0x62>
 80069c0:	06da      	lsls	r2, r3, #27
 80069c2:	d407      	bmi.n	80069d4 <__swsetup_r+0x30>
 80069c4:	2209      	movs	r2, #9
 80069c6:	602a      	str	r2, [r5, #0]
 80069c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069cc:	81a3      	strh	r3, [r4, #12]
 80069ce:	f04f 30ff 	mov.w	r0, #4294967295
 80069d2:	e033      	b.n	8006a3c <__swsetup_r+0x98>
 80069d4:	0758      	lsls	r0, r3, #29
 80069d6:	d512      	bpl.n	80069fe <__swsetup_r+0x5a>
 80069d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069da:	b141      	cbz	r1, 80069ee <__swsetup_r+0x4a>
 80069dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069e0:	4299      	cmp	r1, r3
 80069e2:	d002      	beq.n	80069ea <__swsetup_r+0x46>
 80069e4:	4628      	mov	r0, r5
 80069e6:	f7ff fb2b 	bl	8006040 <_free_r>
 80069ea:	2300      	movs	r3, #0
 80069ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80069ee:	89a3      	ldrh	r3, [r4, #12]
 80069f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069f4:	81a3      	strh	r3, [r4, #12]
 80069f6:	2300      	movs	r3, #0
 80069f8:	6063      	str	r3, [r4, #4]
 80069fa:	6923      	ldr	r3, [r4, #16]
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	89a3      	ldrh	r3, [r4, #12]
 8006a00:	f043 0308 	orr.w	r3, r3, #8
 8006a04:	81a3      	strh	r3, [r4, #12]
 8006a06:	6923      	ldr	r3, [r4, #16]
 8006a08:	b94b      	cbnz	r3, 8006a1e <__swsetup_r+0x7a>
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a14:	d003      	beq.n	8006a1e <__swsetup_r+0x7a>
 8006a16:	4621      	mov	r1, r4
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f000 f84f 	bl	8006abc <__smakebuf_r>
 8006a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a22:	f013 0201 	ands.w	r2, r3, #1
 8006a26:	d00a      	beq.n	8006a3e <__swsetup_r+0x9a>
 8006a28:	2200      	movs	r2, #0
 8006a2a:	60a2      	str	r2, [r4, #8]
 8006a2c:	6962      	ldr	r2, [r4, #20]
 8006a2e:	4252      	negs	r2, r2
 8006a30:	61a2      	str	r2, [r4, #24]
 8006a32:	6922      	ldr	r2, [r4, #16]
 8006a34:	b942      	cbnz	r2, 8006a48 <__swsetup_r+0xa4>
 8006a36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a3a:	d1c5      	bne.n	80069c8 <__swsetup_r+0x24>
 8006a3c:	bd38      	pop	{r3, r4, r5, pc}
 8006a3e:	0799      	lsls	r1, r3, #30
 8006a40:	bf58      	it	pl
 8006a42:	6962      	ldrpl	r2, [r4, #20]
 8006a44:	60a2      	str	r2, [r4, #8]
 8006a46:	e7f4      	b.n	8006a32 <__swsetup_r+0x8e>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	e7f7      	b.n	8006a3c <__swsetup_r+0x98>
 8006a4c:	24000038 	.word	0x24000038

08006a50 <_sbrk_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4d06      	ldr	r5, [pc, #24]	@ (8006a6c <_sbrk_r+0x1c>)
 8006a54:	2300      	movs	r3, #0
 8006a56:	4604      	mov	r4, r0
 8006a58:	4608      	mov	r0, r1
 8006a5a:	602b      	str	r3, [r5, #0]
 8006a5c:	f7fa fc50 	bl	8001300 <_sbrk>
 8006a60:	1c43      	adds	r3, r0, #1
 8006a62:	d102      	bne.n	8006a6a <_sbrk_r+0x1a>
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	b103      	cbz	r3, 8006a6a <_sbrk_r+0x1a>
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	24000380 	.word	0x24000380

08006a70 <__swhatbuf_r>:
 8006a70:	b570      	push	{r4, r5, r6, lr}
 8006a72:	460c      	mov	r4, r1
 8006a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a78:	2900      	cmp	r1, #0
 8006a7a:	b096      	sub	sp, #88	@ 0x58
 8006a7c:	4615      	mov	r5, r2
 8006a7e:	461e      	mov	r6, r3
 8006a80:	da0d      	bge.n	8006a9e <__swhatbuf_r+0x2e>
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a88:	f04f 0100 	mov.w	r1, #0
 8006a8c:	bf14      	ite	ne
 8006a8e:	2340      	movne	r3, #64	@ 0x40
 8006a90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a94:	2000      	movs	r0, #0
 8006a96:	6031      	str	r1, [r6, #0]
 8006a98:	602b      	str	r3, [r5, #0]
 8006a9a:	b016      	add	sp, #88	@ 0x58
 8006a9c:	bd70      	pop	{r4, r5, r6, pc}
 8006a9e:	466a      	mov	r2, sp
 8006aa0:	f000 f848 	bl	8006b34 <_fstat_r>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	dbec      	blt.n	8006a82 <__swhatbuf_r+0x12>
 8006aa8:	9901      	ldr	r1, [sp, #4]
 8006aaa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006aae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ab2:	4259      	negs	r1, r3
 8006ab4:	4159      	adcs	r1, r3
 8006ab6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006aba:	e7eb      	b.n	8006a94 <__swhatbuf_r+0x24>

08006abc <__smakebuf_r>:
 8006abc:	898b      	ldrh	r3, [r1, #12]
 8006abe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ac0:	079d      	lsls	r5, r3, #30
 8006ac2:	4606      	mov	r6, r0
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	d507      	bpl.n	8006ad8 <__smakebuf_r+0x1c>
 8006ac8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	6123      	str	r3, [r4, #16]
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	6163      	str	r3, [r4, #20]
 8006ad4:	b003      	add	sp, #12
 8006ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad8:	ab01      	add	r3, sp, #4
 8006ada:	466a      	mov	r2, sp
 8006adc:	f7ff ffc8 	bl	8006a70 <__swhatbuf_r>
 8006ae0:	9f00      	ldr	r7, [sp, #0]
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f7ff fb16 	bl	8006118 <_malloc_r>
 8006aec:	b948      	cbnz	r0, 8006b02 <__smakebuf_r+0x46>
 8006aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006af2:	059a      	lsls	r2, r3, #22
 8006af4:	d4ee      	bmi.n	8006ad4 <__smakebuf_r+0x18>
 8006af6:	f023 0303 	bic.w	r3, r3, #3
 8006afa:	f043 0302 	orr.w	r3, r3, #2
 8006afe:	81a3      	strh	r3, [r4, #12]
 8006b00:	e7e2      	b.n	8006ac8 <__smakebuf_r+0xc>
 8006b02:	89a3      	ldrh	r3, [r4, #12]
 8006b04:	6020      	str	r0, [r4, #0]
 8006b06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b0a:	81a3      	strh	r3, [r4, #12]
 8006b0c:	9b01      	ldr	r3, [sp, #4]
 8006b0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b12:	b15b      	cbz	r3, 8006b2c <__smakebuf_r+0x70>
 8006b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f000 f81d 	bl	8006b58 <_isatty_r>
 8006b1e:	b128      	cbz	r0, 8006b2c <__smakebuf_r+0x70>
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	f023 0303 	bic.w	r3, r3, #3
 8006b26:	f043 0301 	orr.w	r3, r3, #1
 8006b2a:	81a3      	strh	r3, [r4, #12]
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	431d      	orrs	r5, r3
 8006b30:	81a5      	strh	r5, [r4, #12]
 8006b32:	e7cf      	b.n	8006ad4 <__smakebuf_r+0x18>

08006b34 <_fstat_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4d07      	ldr	r5, [pc, #28]	@ (8006b54 <_fstat_r+0x20>)
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	4611      	mov	r1, r2
 8006b40:	602b      	str	r3, [r5, #0]
 8006b42:	f7fa fbb4 	bl	80012ae <_fstat>
 8006b46:	1c43      	adds	r3, r0, #1
 8006b48:	d102      	bne.n	8006b50 <_fstat_r+0x1c>
 8006b4a:	682b      	ldr	r3, [r5, #0]
 8006b4c:	b103      	cbz	r3, 8006b50 <_fstat_r+0x1c>
 8006b4e:	6023      	str	r3, [r4, #0]
 8006b50:	bd38      	pop	{r3, r4, r5, pc}
 8006b52:	bf00      	nop
 8006b54:	24000380 	.word	0x24000380

08006b58 <_isatty_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4d06      	ldr	r5, [pc, #24]	@ (8006b74 <_isatty_r+0x1c>)
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	4604      	mov	r4, r0
 8006b60:	4608      	mov	r0, r1
 8006b62:	602b      	str	r3, [r5, #0]
 8006b64:	f7fa fbb3 	bl	80012ce <_isatty>
 8006b68:	1c43      	adds	r3, r0, #1
 8006b6a:	d102      	bne.n	8006b72 <_isatty_r+0x1a>
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	b103      	cbz	r3, 8006b72 <_isatty_r+0x1a>
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	bd38      	pop	{r3, r4, r5, pc}
 8006b74:	24000380 	.word	0x24000380

08006b78 <_init>:
 8006b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7a:	bf00      	nop
 8006b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b7e:	bc08      	pop	{r3}
 8006b80:	469e      	mov	lr, r3
 8006b82:	4770      	bx	lr

08006b84 <_fini>:
 8006b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b86:	bf00      	nop
 8006b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8a:	bc08      	pop	{r3}
 8006b8c:	469e      	mov	lr, r3
 8006b8e:	4770      	bx	lr
